// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: response.proto

package response

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for status
type Status int32

const (
	Status_SUCCESS                Status = 0
	Status_BACKEND_ERROR          Status = 1
	Status_AUTHENTICATION_FAILURE Status = 2
	Status_CRYPTO_FAILURE         Status = 3
	Status_STORAGE_FAILURE        Status = 4
	Status_INVALID_REQUEST        Status = 5
	Status_INVALID_RESPONSE       Status = 6
	Status_OBJECT_NOT_FOUND       Status = 7
	Status_OBJECT_EXISTS          Status = 8
	Status_OBJECT_CORRUPTED       Status = 9
	Status_OBJECT_LOCKED          Status = 10
	Status_ACCESS_DENIED          Status = 11
	Status_QUOTA_EXCEEDED         Status = 12
	Status_STORAGE_FULL           Status = 13
	Status_STORAGE_UNAVAILABLE    Status = 14
	Status_STORAGE_CORRUPTED      Status = 15
	Status_STORAGE_MISCONFIGURED  Status = 16
	Status_STORAGE_READ_ONLY      Status = 17
	Status_STORAGE_DISABLED       Status = 18
	Status_FAILURE                Status = 100
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:   "SUCCESS",
		1:   "BACKEND_ERROR",
		2:   "AUTHENTICATION_FAILURE",
		3:   "CRYPTO_FAILURE",
		4:   "STORAGE_FAILURE",
		5:   "INVALID_REQUEST",
		6:   "INVALID_RESPONSE",
		7:   "OBJECT_NOT_FOUND",
		8:   "OBJECT_EXISTS",
		9:   "OBJECT_CORRUPTED",
		10:  "OBJECT_LOCKED",
		11:  "ACCESS_DENIED",
		12:  "QUOTA_EXCEEDED",
		13:  "STORAGE_FULL",
		14:  "STORAGE_UNAVAILABLE",
		15:  "STORAGE_CORRUPTED",
		16:  "STORAGE_MISCONFIGURED",
		17:  "STORAGE_READ_ONLY",
		18:  "STORAGE_DISABLED",
		100: "FAILURE",
	}
	Status_value = map[string]int32{
		"SUCCESS":                0,
		"BACKEND_ERROR":          1,
		"AUTHENTICATION_FAILURE": 2,
		"CRYPTO_FAILURE":         3,
		"STORAGE_FAILURE":        4,
		"INVALID_REQUEST":        5,
		"INVALID_RESPONSE":       6,
		"OBJECT_NOT_FOUND":       7,
		"OBJECT_EXISTS":          8,
		"OBJECT_CORRUPTED":       9,
		"OBJECT_LOCKED":          10,
		"ACCESS_DENIED":          11,
		"QUOTA_EXCEEDED":         12,
		"STORAGE_FULL":           13,
		"STORAGE_UNAVAILABLE":    14,
		"STORAGE_CORRUPTED":      15,
		"STORAGE_MISCONFIGURED":  16,
		"STORAGE_READ_ONLY":      17,
		"STORAGE_DISABLED":       18,
		"FAILURE":                100,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{0}
}

type Plan int32

const (
	Plan_Free  Plan = 0
	Plan_Basic Plan = 1
	Plan_Pro   Plan = 2
)

// Enum value maps for Plan.
var (
	Plan_name = map[int32]string{
		0: "Free",
		1: "Basic",
		2: "Pro",
	}
	Plan_value = map[string]int32{
		"Free":  0,
		"Basic": 1,
		"Pro":   2,
	}
)

func (x Plan) Enum() *Plan {
	p := new(Plan)
	*p = x
	return p
}

func (x Plan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Plan) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[1].Descriptor()
}

func (Plan) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[1]
}

func (x Plan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Plan.Descriptor instead.
func (Plan) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{1}
}

type ChunkCompression int32

const (
	ChunkCompression_None  ChunkCompression = 0
	ChunkCompression_GZIP  ChunkCompression = 1
	ChunkCompression_ZSTD  ChunkCompression = 2
	ChunkCompression_LZ4   ChunkCompression = 3
	ChunkCompression_LZ4HC ChunkCompression = 4
	ChunkCompression_LZMA  ChunkCompression = 5
	ChunkCompression_BZIP2 ChunkCompression = 6
	ChunkCompression_ZLIB  ChunkCompression = 7
)

// Enum value maps for ChunkCompression.
var (
	ChunkCompression_name = map[int32]string{
		0: "None",
		1: "GZIP",
		2: "ZSTD",
		3: "LZ4",
		4: "LZ4HC",
		5: "LZMA",
		6: "BZIP2",
		7: "ZLIB",
	}
	ChunkCompression_value = map[string]int32{
		"None":  0,
		"GZIP":  1,
		"ZSTD":  2,
		"LZ4":   3,
		"LZ4HC": 4,
		"LZMA":  5,
		"BZIP2": 6,
		"ZLIB":  7,
	}
)

func (x ChunkCompression) Enum() *ChunkCompression {
	p := new(ChunkCompression)
	*p = x
	return p
}

func (x ChunkCompression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkCompression) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[2].Descriptor()
}

func (ChunkCompression) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[2]
}

func (x ChunkCompression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkCompression.Descriptor instead.
func (ChunkCompression) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{2}
}

type OrderBy int32

const (
	OrderBy_UPDATEDTIME OrderBy = 0
	OrderBy_CREATEDTIME OrderBy = 1
	OrderBy_NAME        OrderBy = 2
	OrderBy_SIZE        OrderBy = 3
)

// Enum value maps for OrderBy.
var (
	OrderBy_name = map[int32]string{
		0: "UPDATEDTIME",
		1: "CREATEDTIME",
		2: "NAME",
		3: "SIZE",
	}
	OrderBy_value = map[string]int32{
		"UPDATEDTIME": 0,
		"CREATEDTIME": 1,
		"NAME":        2,
		"SIZE":        3,
	}
)

func (x OrderBy) Enum() *OrderBy {
	p := new(OrderBy)
	*p = x
	return p
}

func (x OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[3].Descriptor()
}

func (OrderBy) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[3]
}

func (x OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy.Descriptor instead.
func (OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{3}
}

type SecretType int32

const (
	SecretType_PASSWORD    SecretType = 0
	SecretType_CARD        SecretType = 1
	SecretType_NOTE        SecretType = 2
	SecretType_IDENTITY    SecretType = 3
	SecretType_KEYVALUES   SecretType = 4
	SecretType_KEYS        SecretType = 5
	SecretType_CERTIFICATE SecretType = 6
	SecretType_PRIVATEKEY  SecretType = 7
)

// Enum value maps for SecretType.
var (
	SecretType_name = map[int32]string{
		0: "PASSWORD",
		1: "CARD",
		2: "NOTE",
		3: "IDENTITY",
		4: "KEYVALUES",
		5: "KEYS",
		6: "CERTIFICATE",
		7: "PRIVATEKEY",
	}
	SecretType_value = map[string]int32{
		"PASSWORD":    0,
		"CARD":        1,
		"NOTE":        2,
		"IDENTITY":    3,
		"KEYVALUES":   4,
		"KEYS":        5,
		"CERTIFICATE": 6,
		"PRIVATEKEY":  7,
	}
)

func (x SecretType) Enum() *SecretType {
	p := new(SecretType)
	*p = x
	return p
}

func (x SecretType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretType) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[4].Descriptor()
}

func (SecretType) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[4]
}

func (x SecretType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretType.Descriptor instead.
func (SecretType) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{4}
}

type TypeOfUser int32

const (
	TypeOfUser_INDIVIDUAL_USER   TypeOfUser = 0
	TypeOfUser_ORGANIZATION_USER TypeOfUser = 1
	TypeOfUser_ORGANIZATION      TypeOfUser = 2
)

// Enum value maps for TypeOfUser.
var (
	TypeOfUser_name = map[int32]string{
		0: "INDIVIDUAL_USER",
		1: "ORGANIZATION_USER",
		2: "ORGANIZATION",
	}
	TypeOfUser_value = map[string]int32{
		"INDIVIDUAL_USER":   0,
		"ORGANIZATION_USER": 1,
		"ORGANIZATION":      2,
	}
)

func (x TypeOfUser) Enum() *TypeOfUser {
	p := new(TypeOfUser)
	*p = x
	return p
}

func (x TypeOfUser) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeOfUser) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[5].Descriptor()
}

func (TypeOfUser) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[5]
}

func (x TypeOfUser) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeOfUser.Descriptor instead.
func (TypeOfUser) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{5}
}

type AddUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Organization *string `protobuf:"bytes,7,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	Status       Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	// UserMode mode = 3;
	Message                 *string `protobuf:"bytes,4,opt,name=message,proto3,oneof" json:"message,omitempty"`
	TotpUri                 *string `protobuf:"bytes,5,opt,name=totp_uri,json=totpUri,proto3,oneof" json:"totp_uri,omitempty"`
	EmailVerificationNeeded *bool   `protobuf:"varint,6,opt,name=email_verification_needed,json=emailVerificationNeeded,proto3,oneof" json:"email_verification_needed,omitempty"`
}

func (x *AddUser) Reset() {
	*x = AddUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUser) ProtoMessage() {}

func (x *AddUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUser.ProtoReflect.Descriptor instead.
func (*AddUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{0}
}

func (x *AddUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddUser) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *AddUser) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *AddUser) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *AddUser) GetTotpUri() string {
	if x != nil && x.TotpUri != nil {
		return *x.TotpUri
	}
	return ""
}

func (x *AddUser) GetEmailVerificationNeeded() bool {
	if x != nil && x.EmailVerificationNeeded != nil {
		return *x.EmailVerificationNeeded
	}
	return false
}

type VerifyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *VerifyUser) Reset() {
	*x = VerifyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUser) ProtoMessage() {}

func (x *VerifyUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUser.ProtoReflect.Descriptor instead.
func (*VerifyUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *VerifyUser) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *VerifyUser) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// TODO
type RemoveUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *RemoveUser) Reset() {
	*x = RemoveUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUser) ProtoMessage() {}

func (x *RemoveUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUser.ProtoReflect.Descriptor instead.
func (*RemoveUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RemoveUser) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *RemoveUser) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	Email        string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Firstname    string `protobuf:"bytes,4,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname     string `protobuf:"bytes,5,opt,name=lastname,proto3" json:"lastname,omitempty"`
	// string password = 6;
	Role               string `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
	Location           string `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Phone              string `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Address            string `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	ProfilePictureName string `protobuf:"bytes,11,opt,name=profile_picture_name,json=profilePictureName,proto3" json:"profile_picture_name,omitempty"`
	UserId             []byte `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId     []byte `protobuf:"bytes,12,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// bytes totp_key = 13;
	Plan           int32   `protobuf:"varint,15,opt,name=plan,proto3" json:"plan,omitempty"`
	PaymentOrderId *string `protobuf:"bytes,16,opt,name=payment_order_id,json=paymentOrderId,proto3,oneof" json:"payment_order_id,omitempty"`
	PasswordReset  bool    `protobuf:"varint,17,opt,name=password_reset,json=passwordReset,proto3" json:"password_reset,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *User) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *User) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *User) GetProfilePictureName() string {
	if x != nil {
		return x.ProfilePictureName
	}
	return ""
}

func (x *User) GetUserId() []byte {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *User) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

func (x *User) GetPlan() int32 {
	if x != nil {
		return x.Plan
	}
	return 0
}

func (x *User) GetPaymentOrderId() string {
	if x != nil && x.PaymentOrderId != nil {
		return *x.PaymentOrderId
	}
	return ""
}

func (x *User) GetPasswordReset() bool {
	if x != nil {
		return x.PasswordReset
	}
	return false
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email          string  `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Phone          string  `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Address        string  `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	TaxId          string  `protobuf:"bytes,5,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	VatId          string  `protobuf:"bytes,6,opt,name=vat_id,json=vatId,proto3" json:"vat_id,omitempty"`
	RegistrationId string  `protobuf:"bytes,7,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	Employees      uint32  `protobuf:"varint,8,opt,name=employees,proto3" json:"employees,omitempty"`
	Logo           []byte  `protobuf:"bytes,9,opt,name=logo,proto3" json:"logo,omitempty"`
	OrganizationId []byte  `protobuf:"bytes,10,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	TotpKey        []byte  `protobuf:"bytes,11,opt,name=totp_key,json=totpKey,proto3" json:"totp_key,omitempty"`
	Plan           int32   `protobuf:"varint,12,opt,name=plan,proto3" json:"plan,omitempty"`
	PaymentOrderId *string `protobuf:"bytes,16,opt,name=payment_order_id,json=paymentOrderId,proto3,oneof" json:"payment_order_id,omitempty"` // string password = 13;
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{4}
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Organization) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Organization) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Organization) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *Organization) GetVatId() string {
	if x != nil {
		return x.VatId
	}
	return ""
}

func (x *Organization) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *Organization) GetEmployees() uint32 {
	if x != nil {
		return x.Employees
	}
	return 0
}

func (x *Organization) GetLogo() []byte {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *Organization) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

func (x *Organization) GetTotpKey() []byte {
	if x != nil {
		return x.TotpKey
	}
	return nil
}

func (x *Organization) GetPlan() int32 {
	if x != nil {
		return x.Plan
	}
	return 0
}

func (x *Organization) GetPaymentOrderId() string {
	if x != nil && x.PaymentOrderId != nil {
		return *x.PaymentOrderId
	}
	return ""
}

type UserMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to User:
	//
	//	*UserMeta_UserObj
	//	*UserMeta_OrganizationObj
	User isUserMeta_User `protobuf_oneof:"user"`
}

func (x *UserMeta) Reset() {
	*x = UserMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMeta) ProtoMessage() {}

func (x *UserMeta) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMeta.ProtoReflect.Descriptor instead.
func (*UserMeta) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{5}
}

func (m *UserMeta) GetUser() isUserMeta_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *UserMeta) GetUserObj() *User {
	if x, ok := x.GetUser().(*UserMeta_UserObj); ok {
		return x.UserObj
	}
	return nil
}

func (x *UserMeta) GetOrganizationObj() *Organization {
	if x, ok := x.GetUser().(*UserMeta_OrganizationObj); ok {
		return x.OrganizationObj
	}
	return nil
}

type isUserMeta_User interface {
	isUserMeta_User()
}

type UserMeta_UserObj struct {
	UserObj *User `protobuf:"bytes,1,opt,name=userObj,proto3,oneof"`
}

type UserMeta_OrganizationObj struct {
	OrganizationObj *Organization `protobuf:"bytes,2,opt,name=organizationObj,proto3,oneof"`
}

func (*UserMeta_UserObj) isUserMeta_User() {}

func (*UserMeta_OrganizationObj) isUserMeta_User() {}

// TODO
type GetUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status    `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string   `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	User    *UserMeta `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUser) Reset() {
	*x = GetUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUser) ProtoMessage() {}

func (x *GetUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUser.ProtoReflect.Descriptor instead.
func (*GetUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{6}
}

func (x *GetUser) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetUser) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetUser) GetUser() *UserMeta {
	if x != nil {
		return x.User
	}
	return nil
}

// TODO
type PasswordReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *PasswordReset) Reset() {
	*x = PasswordReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordReset) ProtoMessage() {}

func (x *PasswordReset) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordReset.ProtoReflect.Descriptor instead.
func (*PasswordReset) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{7}
}

func (x *PasswordReset) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PasswordReset) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *PasswordReset) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// TODO
type ChangePassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	TotpKey []byte  `protobuf:"bytes,4,opt,name=totp_key,json=totpKey,proto3,oneof" json:"totp_key,omitempty"`
}

func (x *ChangePassword) Reset() {
	*x = ChangePassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePassword) ProtoMessage() {}

func (x *ChangePassword) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePassword.ProtoReflect.Descriptor instead.
func (*ChangePassword) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{8}
}

func (x *ChangePassword) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ChangePassword) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ChangePassword) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ChangePassword) GetTotpKey() []byte {
	if x != nil {
		return x.TotpKey
	}
	return nil
}

type AddOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization            *string `protobuf:"bytes,6,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	Email                   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status                  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message                 *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	TotpKey                 *string `protobuf:"bytes,4,opt,name=totp_key,json=totpKey,proto3,oneof" json:"totp_key,omitempty"`
	EmailVerificationNeeded *bool   `protobuf:"varint,5,opt,name=email_verification_needed,json=emailVerificationNeeded,proto3,oneof" json:"email_verification_needed,omitempty"`
}

func (x *AddOrganization) Reset() {
	*x = AddOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrganization) ProtoMessage() {}

func (x *AddOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrganization.ProtoReflect.Descriptor instead.
func (*AddOrganization) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{9}
}

func (x *AddOrganization) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *AddOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddOrganization) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *AddOrganization) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *AddOrganization) GetTotpKey() string {
	if x != nil && x.TotpKey != nil {
		return *x.TotpKey
	}
	return ""
}

func (x *AddOrganization) GetEmailVerificationNeeded() bool {
	if x != nil && x.EmailVerificationNeeded != nil {
		return *x.EmailVerificationNeeded
	}
	return false
}

type VerifyOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *VerifyOrganization) Reset() {
	*x = VerifyOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOrganization) ProtoMessage() {}

func (x *VerifyOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOrganization.ProtoReflect.Descriptor instead.
func (*VerifyOrganization) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *VerifyOrganization) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *VerifyOrganization) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type RemoveOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *RemoveOrganization) Reset() {
	*x = RemoveOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOrganization) ProtoMessage() {}

func (x *RemoveOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOrganization.ProtoReflect.Descriptor instead.
func (*RemoveOrganization) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RemoveOrganization) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *RemoveOrganization) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type GetOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *GetOrganization) Reset() {
	*x = GetOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganization) ProtoMessage() {}

func (x *GetOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganization.ProtoReflect.Descriptor instead.
func (*GetOrganization) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetOrganization) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetOrganization) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type InviteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization string  `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	Email        string  `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Status       Status  `protobuf:"varint,4,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message      *string `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *InviteUser) Reset() {
	*x = InviteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUser) ProtoMessage() {}

func (x *InviteUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUser.ProtoReflect.Descriptor instead.
func (*InviteUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{13}
}

func (x *InviteUser) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *InviteUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InviteUser) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *InviteUser) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ResetTOTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	TotpUri string `protobuf:"bytes,2,opt,name=totp_uri,json=totpUri,proto3" json:"totp_uri,omitempty"`
}

func (x *ResetTOTP) Reset() {
	*x = ResetTOTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetTOTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetTOTP) ProtoMessage() {}

func (x *ResetTOTP) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetTOTP.ProtoReflect.Descriptor instead.
func (*ResetTOTP) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{14}
}

func (x *ResetTOTP) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ResetTOTP) GetTotpUri() string {
	if x != nil {
		return x.TotpUri
	}
	return ""
}

type InitiatePayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email       string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status      Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message     *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	OrderId     *string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	RazorpayKey *string `protobuf:"bytes,5,opt,name=razorpay_key,json=razorpayKey,proto3,oneof" json:"razorpay_key,omitempty"`
	Amount      *uint32 `protobuf:"varint,6,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Currency    *string `protobuf:"bytes,7,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
}

func (x *InitiatePayment) Reset() {
	*x = InitiatePayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiatePayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatePayment) ProtoMessage() {}

func (x *InitiatePayment) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatePayment.ProtoReflect.Descriptor instead.
func (*InitiatePayment) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{15}
}

func (x *InitiatePayment) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InitiatePayment) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *InitiatePayment) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *InitiatePayment) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *InitiatePayment) GetRazorpayKey() string {
	if x != nil && x.RazorpayKey != nil {
		return *x.RazorpayKey
	}
	return ""
}

func (x *InitiatePayment) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *InitiatePayment) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

type PaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email       string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status      Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message     *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	OrderId     *string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	OrderStatus *string `protobuf:"bytes,5,opt,name=order_status,json=orderStatus,proto3,oneof" json:"order_status,omitempty"`
}

func (x *PaymentResponse) Reset() {
	*x = PaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentResponse) ProtoMessage() {}

func (x *PaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentResponse.ProtoReflect.Descriptor instead.
func (*PaymentResponse) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{16}
}

func (x *PaymentResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PaymentResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *PaymentResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PaymentResponse) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *PaymentResponse) GetOrderStatus() string {
	if x != nil && x.OrderStatus != nil {
		return *x.OrderStatus
	}
	return ""
}

type SignIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email       string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Orgnization *string `protobuf:"bytes,4,opt,name=orgnization,proto3,oneof" json:"orgnization,omitempty"`
	Status      Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message     *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *SignIn) Reset() {
	*x = SignIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignIn) ProtoMessage() {}

func (x *SignIn) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignIn.ProtoReflect.Descriptor instead.
func (*SignIn) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{17}
}

func (x *SignIn) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SignIn) GetOrgnization() string {
	if x != nil && x.Orgnization != nil {
		return *x.Orgnization
	}
	return ""
}

func (x *SignIn) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *SignIn) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type SignOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status  Status  `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *SignOut) Reset() {
	*x = SignOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOut) ProtoMessage() {}

func (x *SignOut) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOut.ProtoReflect.Descriptor instead.
func (*SignOut) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{18}
}

func (x *SignOut) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SignOut) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *SignOut) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type AddPin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Status     Status  `protobuf:"varint,3,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message    *string `protobuf:"bytes,4,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data       []byte  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IdToClient []byte  `protobuf:"bytes,5,opt,name=id_to_client,json=idToClient,proto3" json:"id_to_client,omitempty"`
}

func (x *AddPin) Reset() {
	*x = AddPin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPin) ProtoMessage() {}

func (x *AddPin) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPin.ProtoReflect.Descriptor instead.
func (*AddPin) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{19}
}

func (x *AddPin) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddPin) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *AddPin) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *AddPin) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AddPin) GetIdToClient() []byte {
	if x != nil {
		return x.IdToClient
	}
	return nil
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //uuid
	Size   uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// optional bytes iv = 4; //only visible inside enclave remove while senindg to clients
	// optional bytes tag = 5; //same as above
	Hash []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"` // sha256
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{20}
}

func (x *Chunk) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Chunk) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Chunk) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Chunk) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ResetVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *ResetVersion) Reset() {
	*x = ResetVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetVersion) ProtoMessage() {}

func (x *ResetVersion) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetVersion.ProtoReflect.Descriptor instead.
func (*ResetVersion) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{21}
}

func (x *ResetVersion) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type FileVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //random for non perm use snapshot id for perm
	ChunkIds     [][]byte `protobuf:"bytes,2,rep,name=chunk_ids,json=chunkIds,proto3" json:"chunk_ids,omitempty"`
	CreationDate uint64   `protobuf:"varint,3,opt,name=creationDate,proto3" json:"creationDate,omitempty"` // bool is_perm = 4;
}

func (x *FileVersion) Reset() {
	*x = FileVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileVersion) ProtoMessage() {}

func (x *FileVersion) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileVersion.ProtoReflect.Descriptor instead.
func (*FileVersion) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{22}
}

func (x *FileVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileVersion) GetChunkIds() [][]byte {
	if x != nil {
		return x.ChunkIds
	}
	return nil
}

func (x *FileVersion) GetCreationDate() uint64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentFolder                  string   `protobuf:"bytes,2,opt,name=parent_folder,json=parentFolder,proto3" json:"parent_folder,omitempty"`
	Uuid                          []byte   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"` //ID
	Owner                         string   `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	CreationDate                  uint64   `protobuf:"varint,5,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	LastModifiedDate              uint64   `protobuf:"varint,6,opt,name=lastModifiedDate,proto3" json:"lastModifiedDate,omitempty"`
	CurrentVersion                []byte   `protobuf:"bytes,7,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	Versions                      [][]byte `protobuf:"bytes,8,rep,name=versions,proto3" json:"versions,omitempty"`
	Sizes                         []uint64 `protobuf:"varint,9,rep,packed,name=sizes,proto3" json:"sizes,omitempty"`
	VersionCreationDates          []uint64 `protobuf:"varint,10,rep,packed,name=versionCreationDates,proto3" json:"versionCreationDates,omitempty"`
	CurrentVersionCompressionType int32    `protobuf:"varint,11,opt,name=current_version_compression_type,json=currentVersionCompressionType,proto3" json:"current_version_compression_type,omitempty"`
	CurrentVersionChunkSize       uint64   `protobuf:"varint,12,opt,name=current_version_chunk_size,json=currentVersionChunkSize,proto3" json:"current_version_chunk_size,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{23}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *File) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *File) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *File) GetCreationDate() uint64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *File) GetLastModifiedDate() uint64 {
	if x != nil {
		return x.LastModifiedDate
	}
	return 0
}

func (x *File) GetCurrentVersion() []byte {
	if x != nil {
		return x.CurrentVersion
	}
	return nil
}

func (x *File) GetVersions() [][]byte {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *File) GetSizes() []uint64 {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *File) GetVersionCreationDates() []uint64 {
	if x != nil {
		return x.VersionCreationDates
	}
	return nil
}

func (x *File) GetCurrentVersionCompressionType() int32 {
	if x != nil {
		return x.CurrentVersionCompressionType
	}
	return 0
}

func (x *File) GetCurrentVersionChunkSize() uint64 {
	if x != nil {
		return x.CurrentVersionChunkSize
	}
	return 0
}

type GetFileHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	File   *File  `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *GetFileHead) Reset() {
	*x = GetFileHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileHead) ProtoMessage() {}

func (x *GetFileHead) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileHead.ProtoReflect.Descriptor instead.
func (*GetFileHead) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{24}
}

func (x *GetFileHead) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetFileHead) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type GetChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          Status            `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Offset          *uint64           `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	ChunkOffset     *uint64           `protobuf:"varint,8,opt,name=chunk_offset,json=chunkOffset,proto3,oneof" json:"chunk_offset,omitempty"`
	Size            *uint64           `protobuf:"varint,3,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Hash            []byte            `protobuf:"bytes,4,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
	CompressionType *ChunkCompression `protobuf:"varint,5,opt,name=compressionType,proto3,enum=response.ChunkCompression,oneof" json:"compressionType,omitempty"`
	Data            []byte            `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	IsLast          bool              `protobuf:"varint,7,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
}

func (x *GetChunk) Reset() {
	*x = GetChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunk) ProtoMessage() {}

func (x *GetChunk) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunk.ProtoReflect.Descriptor instead.
func (*GetChunk) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{25}
}

func (x *GetChunk) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetChunk) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetChunk) GetChunkOffset() uint64 {
	if x != nil && x.ChunkOffset != nil {
		return *x.ChunkOffset
	}
	return 0
}

func (x *GetChunk) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *GetChunk) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetChunk) GetCompressionType() ChunkCompression {
	if x != nil && x.CompressionType != nil {
		return *x.CompressionType
	}
	return ChunkCompression_None
}

func (x *GetChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetChunk) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

type StartWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Uuid   []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"` //return new version id
}

func (x *StartWrite) Reset() {
	*x = StartWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWrite) ProtoMessage() {}

func (x *StartWrite) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWrite.ProtoReflect.Descriptor instead.
func (*StartWrite) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{26}
}

func (x *StartWrite) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *StartWrite) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type PutChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Uuid   []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Chunk  *Chunk `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *PutChunk) Reset() {
	*x = PutChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChunk) ProtoMessage() {}

func (x *PutChunk) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChunk.ProtoReflect.Descriptor instead.
func (*PutChunk) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{27}
}

func (x *PutChunk) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *PutChunk) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *PutChunk) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type FinalizeWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Uuid   []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *FinalizeWrite) Reset() {
	*x = FinalizeWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeWrite) ProtoMessage() {}

func (x *FinalizeWrite) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeWrite.ProtoReflect.Descriptor instead.
func (*FinalizeWrite) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{28}
}

func (x *FinalizeWrite) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *FinalizeWrite) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags uint64 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *Echo) Reset() {
	*x = Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo.ProtoReflect.Descriptor instead.
func (*Echo) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{29}
}

func (x *Echo) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Echo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFolder bool   `protobuf:"varint,1,opt,name=is_folder,json=isFolder,proto3" json:"is_folder,omitempty"`
	Uuid     []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Child) Reset() {
	*x = Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Child) ProtoMessage() {}

func (x *Child) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Child.ProtoReflect.Descriptor instead.
func (*Child) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{30}
}

func (x *Child) GetIsFolder() bool {
	if x != nil {
		return x.IsFolder
	}
	return false
}

func (x *Child) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type FolderSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// repeated Child children = 2; // abs_path of files + folders
	UuidOfClone  []byte `protobuf:"bytes,2,opt,name=uuid_of_clone,json=uuidOfClone,proto3" json:"uuid_of_clone,omitempty"`
	CreationDate uint64 `protobuf:"varint,3,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
}

func (x *FolderSnapshot) Reset() {
	*x = FolderSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderSnapshot) ProtoMessage() {}

func (x *FolderSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderSnapshot.ProtoReflect.Descriptor instead.
func (*FolderSnapshot) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{31}
}

func (x *FolderSnapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FolderSnapshot) GetUuidOfClone() []byte {
	if x != nil {
		return x.UuidOfClone
	}
	return nil
}

func (x *FolderSnapshot) GetCreationDate() uint64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

type PageToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl          uint64 `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Creationtime uint64 `protobuf:"varint,6,opt,name=creationtime,proto3" json:"creationtime,omitempty"`
	// creationtime+ttl shouldn't exceed blah blah
	PageSize uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// int64 lastSerialNumber=3;
	// optional bytes parent_uuid=4;
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// bool trashed=7;
	NumberOfChildren uint64  `protobuf:"varint,8,opt,name=NumberOfChildren,proto3" json:"NumberOfChildren,omitempty"`
	Orderby          OrderBy `protobuf:"varint,9,opt,name=orderby,proto3,enum=response.OrderBy" json:"orderby,omitempty"`
	// optional uint64 lastModifiedDate=10;
	//
	// Types that are assignable to LastValue:
	//
	//	*PageToken_LastSerialNumber
	//	*PageToken_LastName
	//	*PageToken_LastModifiedDate
	//	*PageToken_LastSize
	LastValue           isPageToken_LastValue `protobuf_oneof:"last_value"`
	TieLastSerialNumber *uint64               `protobuf:"varint,14,opt,name=tie_lastSerialNumber,json=tieLastSerialNumber,proto3,oneof" json:"tie_lastSerialNumber,omitempty"` //thisn will be used aLso tie breaker and it will be none in case of orderby is creationTime
}

func (x *PageToken) Reset() {
	*x = PageToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageToken) ProtoMessage() {}

func (x *PageToken) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageToken.ProtoReflect.Descriptor instead.
func (*PageToken) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{32}
}

func (x *PageToken) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *PageToken) GetCreationtime() uint64 {
	if x != nil {
		return x.Creationtime
	}
	return 0
}

func (x *PageToken) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageToken) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PageToken) GetNumberOfChildren() uint64 {
	if x != nil {
		return x.NumberOfChildren
	}
	return 0
}

func (x *PageToken) GetOrderby() OrderBy {
	if x != nil {
		return x.Orderby
	}
	return OrderBy_UPDATEDTIME
}

func (m *PageToken) GetLastValue() isPageToken_LastValue {
	if m != nil {
		return m.LastValue
	}
	return nil
}

func (x *PageToken) GetLastSerialNumber() uint64 {
	if x, ok := x.GetLastValue().(*PageToken_LastSerialNumber); ok {
		return x.LastSerialNumber
	}
	return 0
}

func (x *PageToken) GetLastName() string {
	if x, ok := x.GetLastValue().(*PageToken_LastName); ok {
		return x.LastName
	}
	return ""
}

func (x *PageToken) GetLastModifiedDate() uint64 {
	if x, ok := x.GetLastValue().(*PageToken_LastModifiedDate); ok {
		return x.LastModifiedDate
	}
	return 0
}

func (x *PageToken) GetLastSize() uint64 {
	if x, ok := x.GetLastValue().(*PageToken_LastSize); ok {
		return x.LastSize
	}
	return 0
}

func (x *PageToken) GetTieLastSerialNumber() uint64 {
	if x != nil && x.TieLastSerialNumber != nil {
		return *x.TieLastSerialNumber
	}
	return 0
}

type isPageToken_LastValue interface {
	isPageToken_LastValue()
}

type PageToken_LastSerialNumber struct {
	LastSerialNumber uint64 `protobuf:"varint,10,opt,name=lastSerialNumber,proto3,oneof"`
}

type PageToken_LastName struct {
	LastName string `protobuf:"bytes,11,opt,name=lastName,proto3,oneof"`
}

type PageToken_LastModifiedDate struct {
	LastModifiedDate uint64 `protobuf:"varint,12,opt,name=lastModifiedDate,proto3,oneof"`
}

type PageToken_LastSize struct {
	LastSize uint64 `protobuf:"varint,13,opt,name=lastSize,proto3,oneof"`
}

func (*PageToken_LastSerialNumber) isPageToken_LastValue() {}

func (*PageToken_LastName) isPageToken_LastValue() {}

func (*PageToken_LastModifiedDate) isPageToken_LastValue() {}

func (*PageToken_LastSize) isPageToken_LastValue() {}

type PinInList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreationTime  uint64  `protobuf:"varint,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Ttl           uint64  `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	AllowedPinOps []int32 `protobuf:"varint,4,rep,packed,name=allowed_pin_ops,json=allowedPinOps,proto3" json:"allowed_pin_ops,omitempty"`
	Client        string  `protobuf:"bytes,5,opt,name=client,proto3" json:"client,omitempty"`
	IdToClient    []byte  `protobuf:"bytes,6,opt,name=id_to_client,json=idToClient,proto3" json:"id_to_client,omitempty"`
}

func (x *PinInList) Reset() {
	*x = PinInList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinInList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinInList) ProtoMessage() {}

func (x *PinInList) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinInList.ProtoReflect.Descriptor instead.
func (*PinInList) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{33}
}

func (x *PinInList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PinInList) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *PinInList) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *PinInList) GetAllowedPinOps() []int32 {
	if x != nil {
		return x.AllowedPinOps
	}
	return nil
}

func (x *PinInList) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *PinInList) GetIdToClient() []byte {
	if x != nil {
		return x.IdToClient
	}
	return nil
}

type MetaObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Meta:
	//
	//	*MetaObj_FileMeta
	//	*MetaObj_FolderMeta
	//	*MetaObj_ChunkMeta
	//	*MetaObj_AuditLogMeta
	Meta isMetaObj_Meta `protobuf_oneof:"meta"`
}

func (x *MetaObj) Reset() {
	*x = MetaObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaObj) ProtoMessage() {}

func (x *MetaObj) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaObj.ProtoReflect.Descriptor instead.
func (*MetaObj) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{34}
}

func (m *MetaObj) GetMeta() isMetaObj_Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (x *MetaObj) GetFileMeta() *File {
	if x, ok := x.GetMeta().(*MetaObj_FileMeta); ok {
		return x.FileMeta
	}
	return nil
}

func (x *MetaObj) GetFolderMeta() *Folder {
	if x, ok := x.GetMeta().(*MetaObj_FolderMeta); ok {
		return x.FolderMeta
	}
	return nil
}

func (x *MetaObj) GetChunkMeta() *Chunk {
	if x, ok := x.GetMeta().(*MetaObj_ChunkMeta); ok {
		return x.ChunkMeta
	}
	return nil
}

func (x *MetaObj) GetAuditLogMeta() *AuditLog {
	if x, ok := x.GetMeta().(*MetaObj_AuditLogMeta); ok {
		return x.AuditLogMeta
	}
	return nil
}

type isMetaObj_Meta interface {
	isMetaObj_Meta()
}

type MetaObj_FileMeta struct {
	FileMeta *File `protobuf:"bytes,1,opt,name=file_meta,json=fileMeta,proto3,oneof"`
}

type MetaObj_FolderMeta struct {
	FolderMeta *Folder `protobuf:"bytes,2,opt,name=folder_meta,json=folderMeta,proto3,oneof"`
}

type MetaObj_ChunkMeta struct {
	ChunkMeta *Chunk `protobuf:"bytes,3,opt,name=chunk_meta,json=chunkMeta,proto3,oneof"`
}

type MetaObj_AuditLogMeta struct {
	AuditLogMeta *AuditLog `protobuf:"bytes,4,opt,name=audit_log_meta,json=auditLogMeta,proto3,oneof"` // PinInList pin_in_list =5;
}

func (*MetaObj_FileMeta) isMetaObj_Meta() {}

func (*MetaObj_FolderMeta) isMetaObj_Meta() {}

func (*MetaObj_ChunkMeta) isMetaObj_Meta() {}

func (*MetaObj_AuditLogMeta) isMetaObj_Meta() {}

type GetMetaFromPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Meta   *MetaObj `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GetMetaFromPath) Reset() {
	*x = GetMetaFromPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetaFromPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetaFromPath) ProtoMessage() {}

func (x *GetMetaFromPath) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetaFromPath.ProtoReflect.Descriptor instead.
func (*GetMetaFromPath) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{35}
}

func (x *GetMetaFromPath) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetMetaFromPath) GetMeta() *MetaObj {
	if x != nil {
		return x.Meta
	}
	return nil
}

type AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartTime     *uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime       *uint64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	Size          *uint64 `protobuf:"varint,4,opt,name=size,proto3,oneof" json:"size,omitempty"`
	LogHash       []byte  `protobuf:"bytes,5,opt,name=log_hash,json=logHash,proto3,oneof" json:"log_hash,omitempty"`
	SignedLogHash []byte  `protobuf:"bytes,6,opt,name=signed_log_hash,json=signedLogHash,proto3,oneof" json:"signed_log_hash,omitempty"`
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{36}
}

func (x *AuditLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuditLog) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *AuditLog) GetEndTime() uint64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *AuditLog) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *AuditLog) GetLogHash() []byte {
	if x != nil {
		return x.LogHash
	}
	return nil
}

func (x *AuditLog) GetSignedLogHash() []byte {
	if x != nil {
		return x.SignedLogHash
	}
	return nil
}

type Folder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentFolder     string   `protobuf:"bytes,2,opt,name=parent_folder,json=parentFolder,proto3" json:"parent_folder,omitempty"`
	Uuid             []byte   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"` //ID
	Owner            string   `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	CreationDate     uint64   `protobuf:"varint,5,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	LastModifiedDate uint64   `protobuf:"varint,6,opt,name=lastModifiedDate,proto3" json:"lastModifiedDate,omitempty"`
	CurrentVersion   []byte   `protobuf:"bytes,7,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	Versions         [][]byte `protobuf:"bytes,8,rep,name=versions,proto3" json:"versions,omitempty"`
	Size             uint64   `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	Policy           []byte   `protobuf:"bytes,10,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *Folder) Reset() {
	*x = Folder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Folder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Folder) ProtoMessage() {}

func (x *Folder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Folder.ProtoReflect.Descriptor instead.
func (*Folder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{37}
}

func (x *Folder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Folder) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *Folder) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Folder) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Folder) GetCreationDate() uint64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Folder) GetLastModifiedDate() uint64 {
	if x != nil {
		return x.LastModifiedDate
	}
	return 0
}

func (x *Folder) GetCurrentVersion() []byte {
	if x != nil {
		return x.CurrentVersion
	}
	return nil
}

func (x *Folder) GetVersions() [][]byte {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *Folder) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Folder) GetPolicy() []byte {
	if x != nil {
		return x.Policy
	}
	return nil
}

type RenameFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *RenameFile) Reset() {
	*x = RenameFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFile) ProtoMessage() {}

func (x *RenameFile) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFile.ProtoReflect.Descriptor instead.
func (*RenameFile) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{38}
}

func (x *RenameFile) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type RenameFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *RenameFolder) Reset() {
	*x = RenameFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFolder) ProtoMessage() {}

func (x *RenameFolder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFolder.ProtoReflect.Descriptor instead.
func (*RenameFolder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{39}
}

func (x *RenameFolder) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type ListFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status    `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Files   []*File   `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	Folders []*Folder `protobuf:"bytes,3,rep,name=folders,proto3" json:"folders,omitempty"`
	// optinal keyword cannot be used with repeated?
	PageToken []byte `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *ListFiles) Reset() {
	*x = ListFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFiles) ProtoMessage() {}

func (x *ListFiles) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFiles.ProtoReflect.Descriptor instead.
func (*ListFiles) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{40}
}

func (x *ListFiles) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ListFiles) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListFiles) GetFolders() []*Folder {
	if x != nil {
		return x.Folders
	}
	return nil
}

func (x *ListFiles) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

type Remove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *Remove) Reset() {
	*x = Remove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Remove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remove) ProtoMessage() {}

func (x *Remove) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remove.ProtoReflect.Descriptor instead.
func (*Remove) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{41}
}

func (x *Remove) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type Copy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *Copy) Reset() {
	*x = Copy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Copy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Copy) ProtoMessage() {}

func (x *Copy) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Copy.ProtoReflect.Descriptor instead.
func (*Copy) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{42}
}

func (x *Copy) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *Move) Reset() {
	*x = Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Move) ProtoMessage() {}

func (x *Move) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Move.ProtoReflect.Descriptor instead.
func (*Move) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{43}
}

func (x *Move) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type FileLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *FileLock) Reset() {
	*x = FileLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLock) ProtoMessage() {}

func (x *FileLock) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLock.ProtoReflect.Descriptor instead.
func (*FileLock) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{44}
}

func (x *FileLock) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type FileUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *FileUnlock) Reset() {
	*x = FileUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUnlock) ProtoMessage() {}

func (x *FileUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUnlock.ProtoReflect.Descriptor instead.
func (*FileUnlock) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{45}
}

func (x *FileUnlock) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type GetFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Folder *Folder `protobuf:"bytes,2,opt,name=folder,proto3" json:"folder,omitempty"`
}

func (x *GetFolder) Reset() {
	*x = GetFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFolder) ProtoMessage() {}

func (x *GetFolder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFolder.ProtoReflect.Descriptor instead.
func (*GetFolder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{46}
}

func (x *GetFolder) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetFolder) GetFolder() *Folder {
	if x != nil {
		return x.Folder
	}
	return nil
}

type CreateFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *CreateFolder) Reset() {
	*x = CreateFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolder) ProtoMessage() {}

func (x *CreateFolder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolder.ProtoReflect.Descriptor instead.
func (*CreateFolder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{47}
}

func (x *CreateFolder) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type CreateSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         Status          `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	FolderSnapshot *FolderSnapshot `protobuf:"bytes,2,opt,name=folderSnapshot,proto3" json:"folderSnapshot,omitempty"`
}

func (x *CreateSnapshot) Reset() {
	*x = CreateSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshot) ProtoMessage() {}

func (x *CreateSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshot.ProtoReflect.Descriptor instead.
func (*CreateSnapshot) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{48}
}

func (x *CreateSnapshot) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *CreateSnapshot) GetFolderSnapshot() *FolderSnapshot {
	if x != nil {
		return x.FolderSnapshot
	}
	return nil
}

type VerifyPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *VerifyPayment) Reset() {
	*x = VerifyPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPayment) ProtoMessage() {}

func (x *VerifyPayment) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPayment.ProtoReflect.Descriptor instead.
func (*VerifyPayment) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{49}
}

func (x *VerifyPayment) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *VerifyPayment) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type GetSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    []byte  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSecret) Reset() {
	*x = GetSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecret) ProtoMessage() {}

func (x *GetSecret) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecret.ProtoReflect.Descriptor instead.
func (*GetSecret) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{50}
}

func (x *GetSecret) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetSecret) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetSecret) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *AddSecret) Reset() {
	*x = AddSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecret) ProtoMessage() {}

func (x *AddSecret) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecret.ProtoReflect.Descriptor instead.
func (*AddSecret) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{51}
}

func (x *AddSecret) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *AddSecret) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type DeleteSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *DeleteSecret) Reset() {
	*x = DeleteSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecret) ProtoMessage() {}

func (x *DeleteSecret) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecret.ProtoReflect.Descriptor instead.
func (*DeleteSecret) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteSecret) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *DeleteSecret) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type DestroySecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *DestroySecret) Reset() {
	*x = DestroySecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroySecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroySecret) ProtoMessage() {}

func (x *DestroySecret) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroySecret.ProtoReflect.Descriptor instead.
func (*DestroySecret) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{53}
}

func (x *DestroySecret) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *DestroySecret) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type UpdateSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *UpdateSecret) Reset() {
	*x = UpdateSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecret) ProtoMessage() {}

func (x *UpdateSecret) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecret.ProtoReflect.Descriptor instead.
func (*UpdateSecret) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{54}
}

func (x *UpdateSecret) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *UpdateSecret) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ListSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status    `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string   `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Secrets []*Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *ListSecrets) Reset() {
	*x = ListSecrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecrets) ProtoMessage() {}

func (x *ListSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecrets.ProtoReflect.Descriptor instead.
func (*ListSecrets) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{55}
}

func (x *ListSecrets) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ListSecrets) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListSecrets) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type QuickSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Expiry uint64 `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *QuickSecret) Reset() {
	*x = QuickSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickSecret) ProtoMessage() {}

func (x *QuickSecret) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickSecret.ProtoReflect.Descriptor instead.
func (*QuickSecret) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{56}
}

func (x *QuickSecret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *QuickSecret) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type QuickListSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       Status         `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message      *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	QuickSecrets []*QuickSecret `protobuf:"bytes,3,rep,name=quickSecrets,proto3" json:"quickSecrets,omitempty"`
}

func (x *QuickListSecrets) Reset() {
	*x = QuickListSecrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickListSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickListSecrets) ProtoMessage() {}

func (x *QuickListSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickListSecrets.ProtoReflect.Descriptor instead.
func (*QuickListSecrets) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{57}
}

func (x *QuickListSecrets) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *QuickListSecrets) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *QuickListSecrets) GetQuickSecrets() []*QuickSecret {
	if x != nil {
		return x.QuickSecrets
	}
	return nil
}

type ListSecretSubkeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string  `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Subkeys []string `protobuf:"bytes,3,rep,name=subkeys,proto3" json:"subkeys,omitempty"`
}

func (x *ListSecretSubkeys) Reset() {
	*x = ListSecretSubkeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretSubkeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretSubkeys) ProtoMessage() {}

func (x *ListSecretSubkeys) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretSubkeys.ProtoReflect.Descriptor instead.
func (*ListSecretSubkeys) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{58}
}

func (x *ListSecretSubkeys) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ListSecretSubkeys) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListSecretSubkeys) GetSubkeys() []string {
	if x != nil {
		return x.Subkeys
	}
	return nil
}

type UndeleteSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *UndeleteSecret) Reset() {
	*x = UndeleteSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeleteSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteSecret) ProtoMessage() {}

func (x *UndeleteSecret) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteSecret.ProtoReflect.Descriptor instead.
func (*UndeleteSecret) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{59}
}

func (x *UndeleteSecret) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *UndeleteSecret) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Password struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Url        string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	TotpSecret string `protobuf:"bytes,6,opt,name=totp_secret,json=totpSecret,proto3" json:"totp_secret,omitempty"`
	Notes      string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Password) Reset() {
	*x = Password{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Password) ProtoMessage() {}

func (x *Password) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Password.ProtoReflect.Descriptor instead.
func (*Password) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{60}
}

func (x *Password) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Password) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Password) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Password) GetTotpSecret() string {
	if x != nil {
		return x.TotpSecret
	}
	return ""
}

func (x *Password) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Cvv    string `protobuf:"bytes,3,opt,name=cvv,proto3" json:"cvv,omitempty"`
	Expiry string `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Notes  string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{61}
}

func (x *Card) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Card) GetCvv() string {
	if x != nil {
		return x.Cvv
	}
	return ""
}

func (x *Card) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

func (x *Card) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{62}
}

func (x *Note) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Notes  string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{63}
}

func (x *Identity) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Identity) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// Using this to store multiple key value stores
type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{64}
}

func (x *KeyValue) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValue) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Format:
	//
	//	*Key_Random
	//	*Key_Alphanumeric
	Format  isKey_Format `protobuf_oneof:"Format"`
	MinSize *int32       `protobuf:"varint,4,opt,name=min_size,json=minSize,proto3,oneof" json:"min_size,omitempty"`
	MaxSize *int32       `protobuf:"varint,5,opt,name=max_size,json=maxSize,proto3,oneof" json:"max_size,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{65}
}

func (m *Key) GetFormat() isKey_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (x *Key) GetRandom() []byte {
	if x, ok := x.GetFormat().(*Key_Random); ok {
		return x.Random
	}
	return nil
}

func (x *Key) GetAlphanumeric() []byte {
	if x, ok := x.GetFormat().(*Key_Alphanumeric); ok {
		return x.Alphanumeric
	}
	return nil
}

func (x *Key) GetMinSize() int32 {
	if x != nil && x.MinSize != nil {
		return *x.MinSize
	}
	return 0
}

func (x *Key) GetMaxSize() int32 {
	if x != nil && x.MaxSize != nil {
		return *x.MaxSize
	}
	return 0
}

type isKey_Format interface {
	isKey_Format()
}

type Key_Random struct {
	Random []byte `protobuf:"bytes,2,opt,name=random,proto3,oneof"`
}

type Key_Alphanumeric struct {
	Alphanumeric []byte `protobuf:"bytes,3,opt,name=alphanumeric,proto3,oneof"`
}

func (*Key_Random) isKey_Format() {}

func (*Key_Alphanumeric) isKey_Format() {}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{66}
}

func (x *Certificate) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PrivateKey) Reset() {
	*x = PrivateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKey) ProtoMessage() {}

func (x *PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKey.ProtoReflect.Descriptor instead.
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{67}
}

func (x *PrivateKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SecretData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SecretType `protobuf:"varint,1,opt,name=type,proto3,enum=response.SecretType" json:"type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*SecretData_Password
	//	*SecretData_Card
	//	*SecretData_Note
	//	*SecretData_Identity
	//	*SecretData_KeyValue
	//	*SecretData_Key
	//	*SecretData_Certificate
	//	*SecretData_Privatekey
	Data isSecretData_Data `protobuf_oneof:"Data"`
}

func (x *SecretData) Reset() {
	*x = SecretData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData) ProtoMessage() {}

func (x *SecretData) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData.ProtoReflect.Descriptor instead.
func (*SecretData) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{68}
}

func (x *SecretData) GetType() SecretType {
	if x != nil {
		return x.Type
	}
	return SecretType_PASSWORD
}

func (m *SecretData) GetData() isSecretData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SecretData) GetPassword() *Password {
	if x, ok := x.GetData().(*SecretData_Password); ok {
		return x.Password
	}
	return nil
}

func (x *SecretData) GetCard() *Card {
	if x, ok := x.GetData().(*SecretData_Card); ok {
		return x.Card
	}
	return nil
}

func (x *SecretData) GetNote() *Note {
	if x, ok := x.GetData().(*SecretData_Note); ok {
		return x.Note
	}
	return nil
}

func (x *SecretData) GetIdentity() *Identity {
	if x, ok := x.GetData().(*SecretData_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *SecretData) GetKeyValue() *KeyValue {
	if x, ok := x.GetData().(*SecretData_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (x *SecretData) GetKey() *Key {
	if x, ok := x.GetData().(*SecretData_Key); ok {
		return x.Key
	}
	return nil
}

func (x *SecretData) GetCertificate() *Certificate {
	if x, ok := x.GetData().(*SecretData_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (x *SecretData) GetPrivatekey() *PrivateKey {
	if x, ok := x.GetData().(*SecretData_Privatekey); ok {
		return x.Privatekey
	}
	return nil
}

type isSecretData_Data interface {
	isSecretData_Data()
}

type SecretData_Password struct {
	Password *Password `protobuf:"bytes,5,opt,name=password,proto3,oneof"`
}

type SecretData_Card struct {
	Card *Card `protobuf:"bytes,6,opt,name=card,proto3,oneof"`
}

type SecretData_Note struct {
	Note *Note `protobuf:"bytes,7,opt,name=note,proto3,oneof"`
}

type SecretData_Identity struct {
	Identity *Identity `protobuf:"bytes,8,opt,name=identity,proto3,oneof"`
}

type SecretData_KeyValue struct {
	KeyValue *KeyValue `protobuf:"bytes,9,opt,name=keyValue,proto3,oneof"`
}

type SecretData_Key struct {
	Key *Key `protobuf:"bytes,10,opt,name=key,proto3,oneof"`
}

type SecretData_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,11,opt,name=certificate,proto3,oneof"`
}

type SecretData_Privatekey struct {
	Privatekey *PrivateKey `protobuf:"bytes,12,opt,name=privatekey,proto3,oneof"`
}

func (*SecretData_Password) isSecretData_Data() {}

func (*SecretData_Card) isSecretData_Data() {}

func (*SecretData_Note) isSecretData_Data() {}

func (*SecretData_Identity) isSecretData_Data() {}

func (*SecretData_KeyValue) isSecretData_Data() {}

func (*SecretData_Key) isSecretData_Data() {}

func (*SecretData_Certificate) isSecretData_Data() {}

func (*SecretData_Privatekey) isSecretData_Data() {}

type SecretVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // this will be an incrementing counter
	CreationTime uint64      `protobuf:"varint,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	SecretData   *SecretData `protobuf:"bytes,3,opt,name=secret_data,json=secretData,proto3" json:"secret_data,omitempty"`
}

func (x *SecretVersion) Reset() {
	*x = SecretVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretVersion) ProtoMessage() {}

func (x *SecretVersion) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretVersion.ProtoReflect.Descriptor instead.
func (*SecretVersion) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{69}
}

func (x *SecretVersion) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecretVersion) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *SecretVersion) GetSecretData() *SecretData {
	if x != nil {
		return x.SecretData
	}
	return nil
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string name = 1;
	Path      string           `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Uuid      []byte           `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Expiry    uint64           `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Versions  []*SecretVersion `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
	IsExpired bool             `protobuf:"varint,6,opt,name=is_expired,json=isExpired,proto3" json:"is_expired,omitempty"`
	// bool is_deleted = 7;
	RotateInterval  uint64 `protobuf:"varint,8,opt,name=rotate_interval,json=rotateInterval,proto3" json:"rotate_interval,omitempty"`
	LastRotatedTime uint64 `protobuf:"varint,9,opt,name=last_rotated_time,json=lastRotatedTime,proto3" json:"last_rotated_time,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{70}
}

func (x *Secret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Secret) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Secret) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Secret) GetVersions() []*SecretVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *Secret) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *Secret) GetRotateInterval() uint64 {
	if x != nil {
		return x.RotateInterval
	}
	return 0
}

func (x *Secret) GetLastRotatedTime() uint64 {
	if x != nil {
		return x.LastRotatedTime
	}
	return 0
}

type GetRandomBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message     *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	RandomBytes []byte  `protobuf:"bytes,3,opt,name=random_bytes,json=randomBytes,proto3" json:"random_bytes,omitempty"`
}

func (x *GetRandomBytes) Reset() {
	*x = GetRandomBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomBytes) ProtoMessage() {}

func (x *GetRandomBytes) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomBytes.ProtoReflect.Descriptor instead.
func (*GetRandomBytes) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{71}
}

func (x *GetRandomBytes) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetRandomBytes) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetRandomBytes) GetRandomBytes() []byte {
	if x != nil {
		return x.RandomBytes
	}
	return nil
}

type AddRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *AddRole) Reset() {
	*x = AddRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRole) ProtoMessage() {}

func (x *AddRole) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRole.ProtoReflect.Descriptor instead.
func (*AddRole) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{72}
}

func (x *AddRole) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *AddRole) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type RemoveRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *RemoveRole) Reset() {
	*x = RemoveRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRole) ProtoMessage() {}

func (x *RemoveRole) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRole.ProtoReflect.Descriptor instead.
func (*RemoveRole) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{73}
}

func (x *RemoveRole) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *RemoveRole) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type UpdateRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *UpdateRole) Reset() {
	*x = UpdateRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRole) ProtoMessage() {}

func (x *UpdateRole) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRole.ProtoReflect.Descriptor instead.
func (*UpdateRole) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{74}
}

func (x *UpdateRole) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *UpdateRole) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ListRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string  `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Roles   []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ListRoles) Reset() {
	*x = ListRoles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoles) ProtoMessage() {}

func (x *ListRoles) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoles.ProtoReflect.Descriptor instead.
func (*ListRoles) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{75}
}

func (x *ListRoles) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ListRoles) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListRoles) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type GetRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Role    []byte  `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GetRole) Reset() {
	*x = GetRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRole) ProtoMessage() {}

func (x *GetRole) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRole.ProtoReflect.Descriptor instead.
func (*GetRole) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{76}
}

func (x *GetRole) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetRole) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetRole) GetRole() []byte {
	if x != nil {
		return x.Role
	}
	return nil
}

type AddTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *AddTeam) Reset() {
	*x = AddTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTeam) ProtoMessage() {}

func (x *AddTeam) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTeam.ProtoReflect.Descriptor instead.
func (*AddTeam) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{77}
}

func (x *AddTeam) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *AddTeam) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type RemoveTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *RemoveTeam) Reset() {
	*x = RemoveTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTeam) ProtoMessage() {}

func (x *RemoveTeam) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTeam.ProtoReflect.Descriptor instead.
func (*RemoveTeam) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{78}
}

func (x *RemoveTeam) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *RemoveTeam) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type UpdateTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *UpdateTeam) Reset() {
	*x = UpdateTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeam) ProtoMessage() {}

func (x *UpdateTeam) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeam.ProtoReflect.Descriptor instead.
func (*UpdateTeam) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateTeam) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *UpdateTeam) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ListTeams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string  `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Teams   []string `protobuf:"bytes,3,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *ListTeams) Reset() {
	*x = ListTeams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeams) ProtoMessage() {}

func (x *ListTeams) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeams.ProtoReflect.Descriptor instead.
func (*ListTeams) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{80}
}

func (x *ListTeams) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ListTeams) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListTeams) GetTeams() []string {
	if x != nil {
		return x.Teams
	}
	return nil
}

type GetTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Team    []byte  `protobuf:"bytes,3,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *GetTeam) Reset() {
	*x = GetTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeam) ProtoMessage() {}

func (x *GetTeam) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeam.ProtoReflect.Descriptor instead.
func (*GetTeam) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{81}
}

func (x *GetTeam) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetTeam) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetTeam) GetTeam() []byte {
	if x != nil {
		return x.Team
	}
	return nil
}

type IsOperationAllowed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *IsOperationAllowed) Reset() {
	*x = IsOperationAllowed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOperationAllowed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOperationAllowed) ProtoMessage() {}

func (x *IsOperationAllowed) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOperationAllowed.ProtoReflect.Descriptor instead.
func (*IsOperationAllowed) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{82}
}

func (x *IsOperationAllowed) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *IsOperationAllowed) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type MoveFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *MoveFile) Reset() {
	*x = MoveFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFile) ProtoMessage() {}

func (x *MoveFile) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFile.ProtoReflect.Descriptor instead.
func (*MoveFile) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{83}
}

func (x *MoveFile) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type MoveFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *MoveFolder) Reset() {
	*x = MoveFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFolder) ProtoMessage() {}

func (x *MoveFolder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFolder.ProtoReflect.Descriptor instead.
func (*MoveFolder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{84}
}

func (x *MoveFolder) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type CopyFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *CopyFile) Reset() {
	*x = CopyFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFile) ProtoMessage() {}

func (x *CopyFile) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFile.ProtoReflect.Descriptor instead.
func (*CopyFile) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{85}
}

func (x *CopyFile) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type CopyFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                   Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	PathsOfFilesFailedToCopy []string `protobuf:"bytes,5,rep,name=paths_of_files_failed_to_copy,json=pathsOfFilesFailedToCopy,proto3" json:"paths_of_files_failed_to_copy,omitempty"` //this will be empty if all files are copied successfully
}

func (x *CopyFolder) Reset() {
	*x = CopyFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFolder) ProtoMessage() {}

func (x *CopyFolder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFolder.ProtoReflect.Descriptor instead.
func (*CopyFolder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{86}
}

func (x *CopyFolder) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *CopyFolder) GetPathsOfFilesFailedToCopy() []string {
	if x != nil {
		return x.PathsOfFilesFailedToCopy
	}
	return nil
}

type RestoreVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *RestoreVersion) Reset() {
	*x = RestoreVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreVersion) ProtoMessage() {}

func (x *RestoreVersion) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreVersion.ProtoReflect.Descriptor instead.
func (*RestoreVersion) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{87}
}

func (x *RestoreVersion) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type RemoveFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *RemoveFile) Reset() {
	*x = RemoveFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFile) ProtoMessage() {}

func (x *RemoveFile) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFile.ProtoReflect.Descriptor instead.
func (*RemoveFile) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{88}
}

func (x *RemoveFile) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type RemoveFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *RemoveFolder) Reset() {
	*x = RemoveFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFolder) ProtoMessage() {}

func (x *RemoveFolder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFolder.ProtoReflect.Descriptor instead.
func (*RemoveFolder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{89}
}

func (x *RemoveFolder) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type UntrashFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *UntrashFile) Reset() {
	*x = UntrashFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UntrashFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UntrashFile) ProtoMessage() {}

func (x *UntrashFile) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UntrashFile.ProtoReflect.Descriptor instead.
func (*UntrashFile) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{90}
}

func (x *UntrashFile) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type UntrashFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *UntrashFolder) Reset() {
	*x = UntrashFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UntrashFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UntrashFolder) ProtoMessage() {}

func (x *UntrashFolder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UntrashFolder.ProtoReflect.Descriptor instead.
func (*UntrashFolder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{91}
}

func (x *UntrashFolder) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type UndoStartWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *UndoStartWrite) Reset() {
	*x = UndoStartWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoStartWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoStartWrite) ProtoMessage() {}

func (x *UndoStartWrite) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoStartWrite.ProtoReflect.Descriptor instead.
func (*UndoStartWrite) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{92}
}

func (x *UndoStartWrite) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type DetachClonedFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *DetachClonedFolder) Reset() {
	*x = DetachClonedFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachClonedFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachClonedFolder) ProtoMessage() {}

func (x *DetachClonedFolder) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachClonedFolder.ProtoReflect.Descriptor instead.
func (*DetachClonedFolder) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{93}
}

func (x *DetachClonedFolder) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type AuditLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	LogFile *string `protobuf:"bytes,2,opt,name=log_file,json=logFile,proto3,oneof" json:"log_file,omitempty"`
}

func (x *AuditLogMessage) Reset() {
	*x = AuditLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogMessage) ProtoMessage() {}

func (x *AuditLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogMessage.ProtoReflect.Descriptor instead.
func (*AuditLogMessage) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{94}
}

func (x *AuditLogMessage) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *AuditLogMessage) GetLogFile() string {
	if x != nil && x.LogFile != nil {
		return *x.LogFile
	}
	return ""
}

type GetLedgerRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	LogNames []string `protobuf:"bytes,2,rep,name=log_names,json=logNames,proto3" json:"log_names,omitempty"`
}

func (x *GetLedgerRange) Reset() {
	*x = GetLedgerRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLedgerRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLedgerRange) ProtoMessage() {}

func (x *GetLedgerRange) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLedgerRange.ProtoReflect.Descriptor instead.
func (*GetLedgerRange) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{95}
}

func (x *GetLedgerRange) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetLedgerRange) GetLogNames() []string {
	if x != nil {
		return x.LogNames
	}
	return nil
}

type VerifyAuditLogMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *VerifyAuditLogMeta) Reset() {
	*x = VerifyAuditLogMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAuditLogMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAuditLogMeta) ProtoMessage() {}

func (x *VerifyAuditLogMeta) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAuditLogMeta.ProtoReflect.Descriptor instead.
func (*VerifyAuditLogMeta) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{96}
}

func (x *VerifyAuditLogMeta) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *VerifyAuditLogMeta) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *VerifyAuditLogMeta) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsLast  bool   `protobuf:"varint,3,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetAuditLog) Reset() {
	*x = GetAuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLog) ProtoMessage() {}

func (x *GetAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLog.ProtoReflect.Descriptor instead.
func (*GetAuditLog) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{97}
}

func (x *GetAuditLog) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetAuditLog) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAuditLog) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *GetAuditLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteAuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteAuditLog) Reset() {
	*x = DeleteAuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuditLog) ProtoMessage() {}

func (x *DeleteAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuditLog.ProtoReflect.Descriptor instead.
func (*DeleteAuditLog) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{98}
}

func (x *DeleteAuditLog) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *DeleteAuditLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListPins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     Status       `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	TotalCount *uint64      `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	PinObjects []*PinInList `protobuf:"bytes,3,rep,name=pin_objects,json=pinObjects,proto3" json:"pin_objects,omitempty"`
	IsLast     bool         `protobuf:"varint,4,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	PageToken  []byte       `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *ListPins) Reset() {
	*x = ListPins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPins) ProtoMessage() {}

func (x *ListPins) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPins.ProtoReflect.Descriptor instead.
func (*ListPins) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{99}
}

func (x *ListPins) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ListPins) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *ListPins) GetPinObjects() []*PinInList {
	if x != nil {
		return x.PinObjects
	}
	return nil
}

func (x *ListPins) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *ListPins) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     Status     `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	TotalCount *uint64    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	Objects    []*MetaObj `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty"`
	PageToken  []byte     `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	IsLast     bool       `protobuf:"varint,5,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{100}
}

func (x *List) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *List) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *List) GetObjects() []*MetaObj {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *List) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *List) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

type SetUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
}

func (x *SetUser) Reset() {
	*x = SetUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUser) ProtoMessage() {}

func (x *SetUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUser.ProtoReflect.Descriptor instead.
func (*SetUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{101}
}

func (x *SetUser) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

type FinalizeProfileWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Uuid   []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *FinalizeProfileWrite) Reset() {
	*x = FinalizeProfileWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeProfileWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeProfileWrite) ProtoMessage() {}

func (x *FinalizeProfileWrite) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeProfileWrite.ProtoReflect.Descriptor instead.
func (*FinalizeProfileWrite) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{102}
}

func (x *FinalizeProfileWrite) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *FinalizeProfileWrite) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type GetProfileFileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	VersionUuid []byte `protobuf:"bytes,3,opt,name=version_uuid,json=versionUuid,proto3" json:"version_uuid,omitempty"`
	FileUuid    []byte `protobuf:"bytes,2,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`
}

func (x *GetProfileFileMeta) Reset() {
	*x = GetProfileFileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileFileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileFileMeta) ProtoMessage() {}

func (x *GetProfileFileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileFileMeta.ProtoReflect.Descriptor instead.
func (*GetProfileFileMeta) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{103}
}

func (x *GetProfileFileMeta) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetProfileFileMeta) GetVersionUuid() []byte {
	if x != nil {
		return x.VersionUuid
	}
	return nil
}

func (x *GetProfileFileMeta) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

type ProfileChunkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	TotalCount *uint64  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	Objects    []*Chunk `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty"`
	PageToken  []byte   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	IsLast     bool     `protobuf:"varint,5,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
}

func (x *ProfileChunkList) Reset() {
	*x = ProfileChunkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileChunkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileChunkList) ProtoMessage() {}

func (x *ProfileChunkList) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileChunkList.ProtoReflect.Descriptor instead.
func (*ProfileChunkList) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{104}
}

func (x *ProfileChunkList) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ProfileChunkList) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *ProfileChunkList) GetObjects() []*Chunk {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ProfileChunkList) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *ProfileChunkList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

type GetUserType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    TypeOfUser `protobuf:"varint,1,opt,name=type,proto3,enum=response.TypeOfUser" json:"type,omitempty"`
	Status  Status     `protobuf:"varint,2,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string    `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *GetUserType) Reset() {
	*x = GetUserType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserType) ProtoMessage() {}

func (x *GetUserType) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserType.ProtoReflect.Descriptor instead.
func (*GetUserType) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{105}
}

func (x *GetUserType) GetType() TypeOfUser {
	if x != nil {
		return x.Type
	}
	return TypeOfUser_INDIVIDUAL_USER
}

func (x *GetUserType) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetUserType) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{106}
}

func (x *Share) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *Share) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Unshare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Unshare) Reset() {
	*x = Unshare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unshare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unshare) ProtoMessage() {}

func (x *Unshare) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unshare.ProtoReflect.Descriptor instead.
func (*Unshare) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{107}
}

func (x *Unshare) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *Unshare) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateShare) Reset() {
	*x = UpdateShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShare) ProtoMessage() {}

func (x *UpdateShare) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShare.ProtoReflect.Descriptor instead.
func (*UpdateShare) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{108}
}

func (x *UpdateShare) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *UpdateShare) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListShares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Acl     []byte `protobuf:"bytes,3,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *ListShares) Reset() {
	*x = ListShares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShares) ProtoMessage() {}

func (x *ListShares) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShares.ProtoReflect.Descriptor instead.
func (*ListShares) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{109}
}

func (x *ListShares) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ListShares) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListShares) GetAcl() []byte {
	if x != nil {
		return x.Acl
	}
	return nil
}

type SetRolesTeamsToUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *SetRolesTeamsToUser) Reset() {
	*x = SetRolesTeamsToUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRolesTeamsToUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRolesTeamsToUser) ProtoMessage() {}

func (x *SetRolesTeamsToUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRolesTeamsToUser.ProtoReflect.Descriptor instead.
func (*SetRolesTeamsToUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{110}
}

func (x *SetRolesTeamsToUser) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *SetRolesTeamsToUser) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type UpdatePinOps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *UpdatePinOps) Reset() {
	*x = UpdatePinOps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePinOps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePinOps) ProtoMessage() {}

func (x *UpdatePinOps) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePinOps.ProtoReflect.Descriptor instead.
func (*UpdatePinOps) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{111}
}

func (x *UpdatePinOps) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *UpdatePinOps) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type DeletePin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status  `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *DeletePin) Reset() {
	*x = DeletePin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePin) ProtoMessage() {}

func (x *DeletePin) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePin.ProtoReflect.Descriptor instead.
func (*DeletePin) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{112}
}

func (x *DeletePin) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *DeletePin) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type GetRolesAndTeamsOfUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message     *string  `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	NameOfRoles []string `protobuf:"bytes,3,rep,name=name_of_roles,json=nameOfRoles,proto3" json:"name_of_roles,omitempty"`
	NameOfTeams []string `protobuf:"bytes,4,rep,name=name_of_teams,json=nameOfTeams,proto3" json:"name_of_teams,omitempty"`
}

func (x *GetRolesAndTeamsOfUser) Reset() {
	*x = GetRolesAndTeamsOfUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRolesAndTeamsOfUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRolesAndTeamsOfUser) ProtoMessage() {}

func (x *GetRolesAndTeamsOfUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRolesAndTeamsOfUser.ProtoReflect.Descriptor instead.
func (*GetRolesAndTeamsOfUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{113}
}

func (x *GetRolesAndTeamsOfUser) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetRolesAndTeamsOfUser) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetRolesAndTeamsOfUser) GetNameOfRoles() []string {
	if x != nil {
		return x.NameOfRoles
	}
	return nil
}

func (x *GetRolesAndTeamsOfUser) GetNameOfTeams() []string {
	if x != nil {
		return x.NameOfTeams
	}
	return nil
}

type UserMetaForList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email       string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	TeamsOfUser []string `protobuf:"bytes,2,rep,name=teams_of_user,json=teamsOfUser,proto3" json:"teams_of_user,omitempty"`
	RolesOfUser []string `protobuf:"bytes,3,rep,name=roles_of_user,json=rolesOfUser,proto3" json:"roles_of_user,omitempty"`
}

func (x *UserMetaForList) Reset() {
	*x = UserMetaForList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetaForList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetaForList) ProtoMessage() {}

func (x *UserMetaForList) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetaForList.ProtoReflect.Descriptor instead.
func (*UserMetaForList) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{114}
}

func (x *UserMetaForList) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserMetaForList) GetTeamsOfUser() []string {
	if x != nil {
		return x.TeamsOfUser
	}
	return nil
}

func (x *UserMetaForList) GetRolesOfUser() []string {
	if x != nil {
		return x.RolesOfUser
	}
	return nil
}

type PageTokenListUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSerialNumber uint64 `protobuf:"varint,1,opt,name=last_serial_number,json=lastSerialNumber,proto3" json:"last_serial_number,omitempty"` //this will be used to fetch next page
	PageSize         uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                           //this is the number of users to be returned in this request
}

func (x *PageTokenListUser) Reset() {
	*x = PageTokenListUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageTokenListUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageTokenListUser) ProtoMessage() {}

func (x *PageTokenListUser) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageTokenListUser.ProtoReflect.Descriptor instead.
func (*PageTokenListUser) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{115}
}

func (x *PageTokenListUser) GetLastSerialNumber() uint64 {
	if x != nil {
		return x.LastSerialNumber
	}
	return 0
}

func (x *PageTokenListUser) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            Status             `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message           *string            `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Users             []*UserMetaForList `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	PageTokenListUser []byte             `protobuf:"bytes,4,opt,name=page_token_list_user,json=pageTokenListUser,proto3,oneof" json:"page_token_list_user,omitempty"` //when the last_serial_number is 0 then it means this is the lasst page
}

func (x *ListUsers) Reset() {
	*x = ListUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsers) ProtoMessage() {}

func (x *ListUsers) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsers.ProtoReflect.Descriptor instead.
func (*ListUsers) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{116}
}

func (x *ListUsers) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *ListUsers) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListUsers) GetUsers() []*UserMetaForList {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListUsers) GetPageTokenListUser() []byte {
	if x != nil {
		return x.PageTokenListUser
	}
	return nil
}

type RestartPutChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RestartPutChunk) Reset() {
	*x = RestartPutChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartPutChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartPutChunk) ProtoMessage() {}

func (x *RestartPutChunk) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartPutChunk.ProtoReflect.Descriptor instead.
func (*RestartPutChunk) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{117}
}

func (x *RestartPutChunk) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *RestartPutChunk) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPolicyFromName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPolicyFromName) Reset() {
	*x = GetPolicyFromName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyFromName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyFromName) ProtoMessage() {}

func (x *GetPolicyFromName) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyFromName.ProtoReflect.Descriptor instead.
func (*GetPolicyFromName) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{118}
}

func (x *GetPolicyFromName) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetPolicyFromName) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetMetaFromSharedPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status   `protobuf:"varint,1,opt,name=status,proto3,enum=response.Status" json:"status,omitempty"`
	Meta   *MetaObj `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GetMetaFromSharedPath) Reset() {
	*x = GetMetaFromSharedPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetaFromSharedPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetaFromSharedPath) ProtoMessage() {}

func (x *GetMetaFromSharedPath) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetaFromSharedPath.ProtoReflect.Descriptor instead.
func (*GetMetaFromSharedPath) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{119}
}

func (x *GetMetaFromSharedPath) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCESS
}

func (x *GetMetaFromSharedPath) GetMeta() *MetaObj {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint64 version = 101;
	Id *uint64 `protobuf:"varint,100,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Types that are assignable to Operation:
	//
	//	*Response_AddUser
	//	*Response_VerifyUser
	//	*Response_RemoveUser
	//	*Response_PasswordReset
	//	*Response_ChangePassword
	//	*Response_AddOrganization
	//	*Response_InitiatePayment
	//	*Response_PaymentResponse
	//	*Response_SignIn
	//	*Response_SignOut
	//	*Response_InviteUser
	//	*Response_GetUser
	//	*Response_ListUsers
	//	*Response_RemoveOrganization
	//	*Response_VerifyOrganization
	//	*Response_GetOrganization
	//	*Response_AddPin
	//	*Response_Echo
	//	*Response_GetFileHead
	//	*Response_GetChunk
	//	*Response_StartWrite
	//	*Response_PutChunk
	//	*Response_FinalizeWrite
	//	*Response_ListFiles
	//	*Response_Remove
	//	*Response_FileLock
	//	*Response_FileUnlock
	//	*Response_GetFolder
	//	*Response_CreateFolder
	//	*Response_CreateSnapshot
	//	*Response_VerifyPayment
	//	*Response_GetSecret
	//	*Response_AddSecret
	//	*Response_DeleteSecret
	//	*Response_UpdateSecret
	//	*Response_ListSecrets
	//	*Response_ListSecretSubkeys
	//	*Response_QuickListSecrets
	//	*Response_UndeleteSecret
	//	*Response_DestroySecret
	//	*Response_AddRole
	//	*Response_RemoveRole
	//	*Response_UpdateRole
	//	*Response_ListRoles
	//	*Response_GetRole
	//	*Response_AddTeam
	//	*Response_RemoveTeam
	//	*Response_UpdateTeam
	//	*Response_ListTeams
	//	*Response_GetTeam
	//	*Response_IsOperationAllowed
	//	*Response_MoveFile
	//	*Response_MoveFolder
	//	*Response_CopyFile
	//	*Response_CopyFolder
	//	*Response_RestoreVersion
	//	*Response_RemoveFile
	//	*Response_RemoveFolder
	//	*Response_UntrashFile
	//	*Response_UntrashFolder
	//	*Response_UndoStartWrite
	//	*Response_DetachClonedFolder
	//	*Response_GetMetaFromPath
	//	*Response_RenameFile
	//	*Response_RenameFolder
	//	*Response_List
	//	*Response_AuditLogMessage
	//	*Response_ResetVersion
	//	*Response_SetUser
	//	*Response_FinalizeProfileWrite
	//	*Response_GetProfileFileMeta
	//	*Response_ProfileChunkList
	//	*Response_GetUserType
	//	*Response_GetRandomBytes
	//	*Response_Share
	//	*Response_Unshare
	//	*Response_UpdateShare
	//	*Response_ListShares
	//	*Response_ResetTOTP
	//	*Response_SetRolesTeamsToUser
	//	*Response_UpdatePinOps
	//	*Response_DeletePin
	//	*Response_GetRolesAndTeamsOfUser
	//	*Response_RestartPutChunk
	//	*Response_VerifyAuditLogMeta
	//	*Response_GetAuditLog
	//	*Response_DeleteAuditLog
	//	*Response_GetLedgerRange
	//	*Response_ListPins
	//	*Response_GetMetaFromSharedPath
	Operation isResponse_Operation `protobuf_oneof:"Operation"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{120}
}

func (x *Response) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (m *Response) GetOperation() isResponse_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *Response) GetAddUser() *AddUser {
	if x, ok := x.GetOperation().(*Response_AddUser); ok {
		return x.AddUser
	}
	return nil
}

func (x *Response) GetVerifyUser() *VerifyUser {
	if x, ok := x.GetOperation().(*Response_VerifyUser); ok {
		return x.VerifyUser
	}
	return nil
}

func (x *Response) GetRemoveUser() *RemoveUser {
	if x, ok := x.GetOperation().(*Response_RemoveUser); ok {
		return x.RemoveUser
	}
	return nil
}

func (x *Response) GetPasswordReset() *PasswordReset {
	if x, ok := x.GetOperation().(*Response_PasswordReset); ok {
		return x.PasswordReset
	}
	return nil
}

func (x *Response) GetChangePassword() *ChangePassword {
	if x, ok := x.GetOperation().(*Response_ChangePassword); ok {
		return x.ChangePassword
	}
	return nil
}

func (x *Response) GetAddOrganization() *AddOrganization {
	if x, ok := x.GetOperation().(*Response_AddOrganization); ok {
		return x.AddOrganization
	}
	return nil
}

func (x *Response) GetInitiatePayment() *InitiatePayment {
	if x, ok := x.GetOperation().(*Response_InitiatePayment); ok {
		return x.InitiatePayment
	}
	return nil
}

func (x *Response) GetPaymentResponse() *PaymentResponse {
	if x, ok := x.GetOperation().(*Response_PaymentResponse); ok {
		return x.PaymentResponse
	}
	return nil
}

func (x *Response) GetSignIn() *SignIn {
	if x, ok := x.GetOperation().(*Response_SignIn); ok {
		return x.SignIn
	}
	return nil
}

func (x *Response) GetSignOut() *SignOut {
	if x, ok := x.GetOperation().(*Response_SignOut); ok {
		return x.SignOut
	}
	return nil
}

func (x *Response) GetInviteUser() *InviteUser {
	if x, ok := x.GetOperation().(*Response_InviteUser); ok {
		return x.InviteUser
	}
	return nil
}

func (x *Response) GetGetUser() *GetUser {
	if x, ok := x.GetOperation().(*Response_GetUser); ok {
		return x.GetUser
	}
	return nil
}

func (x *Response) GetListUsers() *ListUsers {
	if x, ok := x.GetOperation().(*Response_ListUsers); ok {
		return x.ListUsers
	}
	return nil
}

func (x *Response) GetRemoveOrganization() *RemoveOrganization {
	if x, ok := x.GetOperation().(*Response_RemoveOrganization); ok {
		return x.RemoveOrganization
	}
	return nil
}

func (x *Response) GetVerifyOrganization() *VerifyOrganization {
	if x, ok := x.GetOperation().(*Response_VerifyOrganization); ok {
		return x.VerifyOrganization
	}
	return nil
}

func (x *Response) GetGetOrganization() *GetOrganization {
	if x, ok := x.GetOperation().(*Response_GetOrganization); ok {
		return x.GetOrganization
	}
	return nil
}

func (x *Response) GetAddPin() *AddPin {
	if x, ok := x.GetOperation().(*Response_AddPin); ok {
		return x.AddPin
	}
	return nil
}

func (x *Response) GetEcho() *Echo {
	if x, ok := x.GetOperation().(*Response_Echo); ok {
		return x.Echo
	}
	return nil
}

func (x *Response) GetGetFileHead() *GetFileHead {
	if x, ok := x.GetOperation().(*Response_GetFileHead); ok {
		return x.GetFileHead
	}
	return nil
}

func (x *Response) GetGetChunk() *GetChunk {
	if x, ok := x.GetOperation().(*Response_GetChunk); ok {
		return x.GetChunk
	}
	return nil
}

func (x *Response) GetStartWrite() *StartWrite {
	if x, ok := x.GetOperation().(*Response_StartWrite); ok {
		return x.StartWrite
	}
	return nil
}

func (x *Response) GetPutChunk() *PutChunk {
	if x, ok := x.GetOperation().(*Response_PutChunk); ok {
		return x.PutChunk
	}
	return nil
}

func (x *Response) GetFinalizeWrite() *FinalizeWrite {
	if x, ok := x.GetOperation().(*Response_FinalizeWrite); ok {
		return x.FinalizeWrite
	}
	return nil
}

func (x *Response) GetListFiles() *ListFiles {
	if x, ok := x.GetOperation().(*Response_ListFiles); ok {
		return x.ListFiles
	}
	return nil
}

func (x *Response) GetRemove() *Remove {
	if x, ok := x.GetOperation().(*Response_Remove); ok {
		return x.Remove
	}
	return nil
}

func (x *Response) GetFileLock() *FileLock {
	if x, ok := x.GetOperation().(*Response_FileLock); ok {
		return x.FileLock
	}
	return nil
}

func (x *Response) GetFileUnlock() *FileUnlock {
	if x, ok := x.GetOperation().(*Response_FileUnlock); ok {
		return x.FileUnlock
	}
	return nil
}

func (x *Response) GetGetFolder() *GetFolder {
	if x, ok := x.GetOperation().(*Response_GetFolder); ok {
		return x.GetFolder
	}
	return nil
}

func (x *Response) GetCreateFolder() *CreateFolder {
	if x, ok := x.GetOperation().(*Response_CreateFolder); ok {
		return x.CreateFolder
	}
	return nil
}

func (x *Response) GetCreateSnapshot() *CreateSnapshot {
	if x, ok := x.GetOperation().(*Response_CreateSnapshot); ok {
		return x.CreateSnapshot
	}
	return nil
}

func (x *Response) GetVerifyPayment() *VerifyPayment {
	if x, ok := x.GetOperation().(*Response_VerifyPayment); ok {
		return x.VerifyPayment
	}
	return nil
}

func (x *Response) GetGetSecret() *GetSecret {
	if x, ok := x.GetOperation().(*Response_GetSecret); ok {
		return x.GetSecret
	}
	return nil
}

func (x *Response) GetAddSecret() *AddSecret {
	if x, ok := x.GetOperation().(*Response_AddSecret); ok {
		return x.AddSecret
	}
	return nil
}

func (x *Response) GetDeleteSecret() *DeleteSecret {
	if x, ok := x.GetOperation().(*Response_DeleteSecret); ok {
		return x.DeleteSecret
	}
	return nil
}

func (x *Response) GetUpdateSecret() *UpdateSecret {
	if x, ok := x.GetOperation().(*Response_UpdateSecret); ok {
		return x.UpdateSecret
	}
	return nil
}

func (x *Response) GetListSecrets() *ListSecrets {
	if x, ok := x.GetOperation().(*Response_ListSecrets); ok {
		return x.ListSecrets
	}
	return nil
}

func (x *Response) GetListSecretSubkeys() *ListSecretSubkeys {
	if x, ok := x.GetOperation().(*Response_ListSecretSubkeys); ok {
		return x.ListSecretSubkeys
	}
	return nil
}

func (x *Response) GetQuickListSecrets() *QuickListSecrets {
	if x, ok := x.GetOperation().(*Response_QuickListSecrets); ok {
		return x.QuickListSecrets
	}
	return nil
}

func (x *Response) GetUndeleteSecret() *UndeleteSecret {
	if x, ok := x.GetOperation().(*Response_UndeleteSecret); ok {
		return x.UndeleteSecret
	}
	return nil
}

func (x *Response) GetDestroySecret() *DestroySecret {
	if x, ok := x.GetOperation().(*Response_DestroySecret); ok {
		return x.DestroySecret
	}
	return nil
}

func (x *Response) GetAddRole() *AddRole {
	if x, ok := x.GetOperation().(*Response_AddRole); ok {
		return x.AddRole
	}
	return nil
}

func (x *Response) GetRemoveRole() *RemoveRole {
	if x, ok := x.GetOperation().(*Response_RemoveRole); ok {
		return x.RemoveRole
	}
	return nil
}

func (x *Response) GetUpdateRole() *UpdateRole {
	if x, ok := x.GetOperation().(*Response_UpdateRole); ok {
		return x.UpdateRole
	}
	return nil
}

func (x *Response) GetListRoles() *ListRoles {
	if x, ok := x.GetOperation().(*Response_ListRoles); ok {
		return x.ListRoles
	}
	return nil
}

func (x *Response) GetGetRole() *GetRole {
	if x, ok := x.GetOperation().(*Response_GetRole); ok {
		return x.GetRole
	}
	return nil
}

func (x *Response) GetAddTeam() *AddTeam {
	if x, ok := x.GetOperation().(*Response_AddTeam); ok {
		return x.AddTeam
	}
	return nil
}

func (x *Response) GetRemoveTeam() *RemoveTeam {
	if x, ok := x.GetOperation().(*Response_RemoveTeam); ok {
		return x.RemoveTeam
	}
	return nil
}

func (x *Response) GetUpdateTeam() *UpdateTeam {
	if x, ok := x.GetOperation().(*Response_UpdateTeam); ok {
		return x.UpdateTeam
	}
	return nil
}

func (x *Response) GetListTeams() *ListTeams {
	if x, ok := x.GetOperation().(*Response_ListTeams); ok {
		return x.ListTeams
	}
	return nil
}

func (x *Response) GetGetTeam() *GetTeam {
	if x, ok := x.GetOperation().(*Response_GetTeam); ok {
		return x.GetTeam
	}
	return nil
}

func (x *Response) GetIsOperationAllowed() *IsOperationAllowed {
	if x, ok := x.GetOperation().(*Response_IsOperationAllowed); ok {
		return x.IsOperationAllowed
	}
	return nil
}

func (x *Response) GetMoveFile() *MoveFile {
	if x, ok := x.GetOperation().(*Response_MoveFile); ok {
		return x.MoveFile
	}
	return nil
}

func (x *Response) GetMoveFolder() *MoveFolder {
	if x, ok := x.GetOperation().(*Response_MoveFolder); ok {
		return x.MoveFolder
	}
	return nil
}

func (x *Response) GetCopyFile() *CopyFile {
	if x, ok := x.GetOperation().(*Response_CopyFile); ok {
		return x.CopyFile
	}
	return nil
}

func (x *Response) GetCopyFolder() *CopyFolder {
	if x, ok := x.GetOperation().(*Response_CopyFolder); ok {
		return x.CopyFolder
	}
	return nil
}

func (x *Response) GetRestoreVersion() *RestoreVersion {
	if x, ok := x.GetOperation().(*Response_RestoreVersion); ok {
		return x.RestoreVersion
	}
	return nil
}

func (x *Response) GetRemoveFile() *RemoveFile {
	if x, ok := x.GetOperation().(*Response_RemoveFile); ok {
		return x.RemoveFile
	}
	return nil
}

func (x *Response) GetRemoveFolder() *RemoveFolder {
	if x, ok := x.GetOperation().(*Response_RemoveFolder); ok {
		return x.RemoveFolder
	}
	return nil
}

func (x *Response) GetUntrashFile() *UntrashFile {
	if x, ok := x.GetOperation().(*Response_UntrashFile); ok {
		return x.UntrashFile
	}
	return nil
}

func (x *Response) GetUntrashFolder() *UntrashFolder {
	if x, ok := x.GetOperation().(*Response_UntrashFolder); ok {
		return x.UntrashFolder
	}
	return nil
}

func (x *Response) GetUndoStartWrite() *UndoStartWrite {
	if x, ok := x.GetOperation().(*Response_UndoStartWrite); ok {
		return x.UndoStartWrite
	}
	return nil
}

func (x *Response) GetDetachClonedFolder() *DetachClonedFolder {
	if x, ok := x.GetOperation().(*Response_DetachClonedFolder); ok {
		return x.DetachClonedFolder
	}
	return nil
}

func (x *Response) GetGetMetaFromPath() *GetMetaFromPath {
	if x, ok := x.GetOperation().(*Response_GetMetaFromPath); ok {
		return x.GetMetaFromPath
	}
	return nil
}

func (x *Response) GetRenameFile() *RenameFile {
	if x, ok := x.GetOperation().(*Response_RenameFile); ok {
		return x.RenameFile
	}
	return nil
}

func (x *Response) GetRenameFolder() *RenameFolder {
	if x, ok := x.GetOperation().(*Response_RenameFolder); ok {
		return x.RenameFolder
	}
	return nil
}

func (x *Response) GetList() *List {
	if x, ok := x.GetOperation().(*Response_List); ok {
		return x.List
	}
	return nil
}

func (x *Response) GetAuditLogMessage() *AuditLogMessage {
	if x, ok := x.GetOperation().(*Response_AuditLogMessage); ok {
		return x.AuditLogMessage
	}
	return nil
}

func (x *Response) GetResetVersion() *ResetVersion {
	if x, ok := x.GetOperation().(*Response_ResetVersion); ok {
		return x.ResetVersion
	}
	return nil
}

func (x *Response) GetSetUser() *SetUser {
	if x, ok := x.GetOperation().(*Response_SetUser); ok {
		return x.SetUser
	}
	return nil
}

func (x *Response) GetFinalizeProfileWrite() *FinalizeProfileWrite {
	if x, ok := x.GetOperation().(*Response_FinalizeProfileWrite); ok {
		return x.FinalizeProfileWrite
	}
	return nil
}

func (x *Response) GetGetProfileFileMeta() *GetProfileFileMeta {
	if x, ok := x.GetOperation().(*Response_GetProfileFileMeta); ok {
		return x.GetProfileFileMeta
	}
	return nil
}

func (x *Response) GetProfileChunkList() *ProfileChunkList {
	if x, ok := x.GetOperation().(*Response_ProfileChunkList); ok {
		return x.ProfileChunkList
	}
	return nil
}

func (x *Response) GetGetUserType() *GetUserType {
	if x, ok := x.GetOperation().(*Response_GetUserType); ok {
		return x.GetUserType
	}
	return nil
}

func (x *Response) GetGetRandomBytes() *GetRandomBytes {
	if x, ok := x.GetOperation().(*Response_GetRandomBytes); ok {
		return x.GetRandomBytes
	}
	return nil
}

func (x *Response) GetShare() *Share {
	if x, ok := x.GetOperation().(*Response_Share); ok {
		return x.Share
	}
	return nil
}

func (x *Response) GetUnshare() *Unshare {
	if x, ok := x.GetOperation().(*Response_Unshare); ok {
		return x.Unshare
	}
	return nil
}

func (x *Response) GetUpdateShare() *UpdateShare {
	if x, ok := x.GetOperation().(*Response_UpdateShare); ok {
		return x.UpdateShare
	}
	return nil
}

func (x *Response) GetListShares() *ListShares {
	if x, ok := x.GetOperation().(*Response_ListShares); ok {
		return x.ListShares
	}
	return nil
}

func (x *Response) GetResetTOTP() *ResetTOTP {
	if x, ok := x.GetOperation().(*Response_ResetTOTP); ok {
		return x.ResetTOTP
	}
	return nil
}

func (x *Response) GetSetRolesTeamsToUser() *SetRolesTeamsToUser {
	if x, ok := x.GetOperation().(*Response_SetRolesTeamsToUser); ok {
		return x.SetRolesTeamsToUser
	}
	return nil
}

func (x *Response) GetUpdatePinOps() *UpdatePinOps {
	if x, ok := x.GetOperation().(*Response_UpdatePinOps); ok {
		return x.UpdatePinOps
	}
	return nil
}

func (x *Response) GetDeletePin() *DeletePin {
	if x, ok := x.GetOperation().(*Response_DeletePin); ok {
		return x.DeletePin
	}
	return nil
}

func (x *Response) GetGetRolesAndTeamsOfUser() *GetRolesAndTeamsOfUser {
	if x, ok := x.GetOperation().(*Response_GetRolesAndTeamsOfUser); ok {
		return x.GetRolesAndTeamsOfUser
	}
	return nil
}

func (x *Response) GetRestartPutChunk() *RestartPutChunk {
	if x, ok := x.GetOperation().(*Response_RestartPutChunk); ok {
		return x.RestartPutChunk
	}
	return nil
}

func (x *Response) GetVerifyAuditLogMeta() *VerifyAuditLogMeta {
	if x, ok := x.GetOperation().(*Response_VerifyAuditLogMeta); ok {
		return x.VerifyAuditLogMeta
	}
	return nil
}

func (x *Response) GetGetAuditLog() *GetAuditLog {
	if x, ok := x.GetOperation().(*Response_GetAuditLog); ok {
		return x.GetAuditLog
	}
	return nil
}

func (x *Response) GetDeleteAuditLog() *DeleteAuditLog {
	if x, ok := x.GetOperation().(*Response_DeleteAuditLog); ok {
		return x.DeleteAuditLog
	}
	return nil
}

func (x *Response) GetGetLedgerRange() *GetLedgerRange {
	if x, ok := x.GetOperation().(*Response_GetLedgerRange); ok {
		return x.GetLedgerRange
	}
	return nil
}

func (x *Response) GetListPins() *ListPins {
	if x, ok := x.GetOperation().(*Response_ListPins); ok {
		return x.ListPins
	}
	return nil
}

func (x *Response) GetGetMetaFromSharedPath() *GetMetaFromSharedPath {
	if x, ok := x.GetOperation().(*Response_GetMetaFromSharedPath); ok {
		return x.GetMetaFromSharedPath
	}
	return nil
}

type isResponse_Operation interface {
	isResponse_Operation()
}

type Response_AddUser struct {
	AddUser *AddUser `protobuf:"bytes,1,opt,name=addUser,proto3,oneof"`
}

type Response_VerifyUser struct {
	VerifyUser *VerifyUser `protobuf:"bytes,2,opt,name=verifyUser,proto3,oneof"`
}

type Response_RemoveUser struct {
	RemoveUser *RemoveUser `protobuf:"bytes,3,opt,name=removeUser,proto3,oneof"`
}

type Response_PasswordReset struct {
	PasswordReset *PasswordReset `protobuf:"bytes,4,opt,name=passwordReset,proto3,oneof"`
}

type Response_ChangePassword struct {
	ChangePassword *ChangePassword `protobuf:"bytes,5,opt,name=changePassword,proto3,oneof"`
}

type Response_AddOrganization struct {
	AddOrganization *AddOrganization `protobuf:"bytes,6,opt,name=addOrganization,proto3,oneof"`
}

type Response_InitiatePayment struct {
	InitiatePayment *InitiatePayment `protobuf:"bytes,7,opt,name=initiatePayment,proto3,oneof"`
}

type Response_PaymentResponse struct {
	PaymentResponse *PaymentResponse `protobuf:"bytes,8,opt,name=paymentResponse,proto3,oneof"`
}

type Response_SignIn struct {
	SignIn *SignIn `protobuf:"bytes,9,opt,name=signIn,proto3,oneof"`
}

type Response_SignOut struct {
	SignOut *SignOut `protobuf:"bytes,10,opt,name=signOut,proto3,oneof"`
}

type Response_InviteUser struct {
	InviteUser *InviteUser `protobuf:"bytes,11,opt,name=inviteUser,proto3,oneof"`
}

type Response_GetUser struct {
	GetUser *GetUser `protobuf:"bytes,12,opt,name=getUser,proto3,oneof"`
}

type Response_ListUsers struct {
	ListUsers *ListUsers `protobuf:"bytes,13,opt,name=listUsers,proto3,oneof"`
}

type Response_RemoveOrganization struct {
	RemoveOrganization *RemoveOrganization `protobuf:"bytes,14,opt,name=removeOrganization,proto3,oneof"`
}

type Response_VerifyOrganization struct {
	VerifyOrganization *VerifyOrganization `protobuf:"bytes,15,opt,name=verifyOrganization,proto3,oneof"`
}

type Response_GetOrganization struct {
	GetOrganization *GetOrganization `protobuf:"bytes,16,opt,name=getOrganization,proto3,oneof"`
}

type Response_AddPin struct {
	AddPin *AddPin `protobuf:"bytes,17,opt,name=addPin,proto3,oneof"`
}

type Response_Echo struct {
	Echo *Echo `protobuf:"bytes,18,opt,name=echo,proto3,oneof"`
}

type Response_GetFileHead struct {
	GetFileHead *GetFileHead `protobuf:"bytes,19,opt,name=getFileHead,proto3,oneof"`
}

type Response_GetChunk struct {
	GetChunk *GetChunk `protobuf:"bytes,22,opt,name=getChunk,proto3,oneof"`
}

type Response_StartWrite struct {
	StartWrite *StartWrite `protobuf:"bytes,23,opt,name=startWrite,proto3,oneof"`
}

type Response_PutChunk struct {
	PutChunk *PutChunk `protobuf:"bytes,24,opt,name=putChunk,proto3,oneof"`
}

type Response_FinalizeWrite struct {
	FinalizeWrite *FinalizeWrite `protobuf:"bytes,25,opt,name=finalizeWrite,proto3,oneof"`
}

type Response_ListFiles struct {
	ListFiles *ListFiles `protobuf:"bytes,26,opt,name=listFiles,proto3,oneof"`
}

type Response_Remove struct {
	Remove *Remove `protobuf:"bytes,27,opt,name=remove,proto3,oneof"`
}

type Response_FileLock struct {
	// Copy copy = 28;
	// Move move = 29;
	FileLock *FileLock `protobuf:"bytes,30,opt,name=fileLock,proto3,oneof"`
}

type Response_FileUnlock struct {
	FileUnlock *FileUnlock `protobuf:"bytes,31,opt,name=fileUnlock,proto3,oneof"`
}

type Response_GetFolder struct {
	GetFolder *GetFolder `protobuf:"bytes,32,opt,name=getFolder,proto3,oneof"`
}

type Response_CreateFolder struct {
	CreateFolder *CreateFolder `protobuf:"bytes,33,opt,name=createFolder,proto3,oneof"`
}

type Response_CreateSnapshot struct {
	CreateSnapshot *CreateSnapshot `protobuf:"bytes,34,opt,name=CreateSnapshot,proto3,oneof"`
}

type Response_VerifyPayment struct {
	VerifyPayment *VerifyPayment `protobuf:"bytes,35,opt,name=verifyPayment,proto3,oneof"`
}

type Response_GetSecret struct {
	GetSecret *GetSecret `protobuf:"bytes,36,opt,name=getSecret,proto3,oneof"`
}

type Response_AddSecret struct {
	AddSecret *AddSecret `protobuf:"bytes,37,opt,name=addSecret,proto3,oneof"`
}

type Response_DeleteSecret struct {
	DeleteSecret *DeleteSecret `protobuf:"bytes,38,opt,name=deleteSecret,proto3,oneof"`
}

type Response_UpdateSecret struct {
	UpdateSecret *UpdateSecret `protobuf:"bytes,39,opt,name=updateSecret,proto3,oneof"`
}

type Response_ListSecrets struct {
	ListSecrets *ListSecrets `protobuf:"bytes,40,opt,name=listSecrets,proto3,oneof"`
}

type Response_ListSecretSubkeys struct {
	ListSecretSubkeys *ListSecretSubkeys `protobuf:"bytes,41,opt,name=listSecretSubkeys,proto3,oneof"`
}

type Response_QuickListSecrets struct {
	QuickListSecrets *QuickListSecrets `protobuf:"bytes,83,opt,name=quickListSecrets,proto3,oneof"`
}

type Response_UndeleteSecret struct {
	UndeleteSecret *UndeleteSecret `protobuf:"bytes,42,opt,name=undeleteSecret,proto3,oneof"`
}

type Response_DestroySecret struct {
	DestroySecret *DestroySecret `protobuf:"bytes,43,opt,name=destroySecret,proto3,oneof"`
}

type Response_AddRole struct {
	AddRole *AddRole `protobuf:"bytes,44,opt,name=addRole,proto3,oneof"`
}

type Response_RemoveRole struct {
	RemoveRole *RemoveRole `protobuf:"bytes,45,opt,name=removeRole,proto3,oneof"`
}

type Response_UpdateRole struct {
	UpdateRole *UpdateRole `protobuf:"bytes,46,opt,name=updateRole,proto3,oneof"`
}

type Response_ListRoles struct {
	ListRoles *ListRoles `protobuf:"bytes,47,opt,name=listRoles,proto3,oneof"`
}

type Response_GetRole struct {
	GetRole *GetRole `protobuf:"bytes,81,opt,name=getRole,proto3,oneof"`
}

type Response_AddTeam struct {
	AddTeam *AddTeam `protobuf:"bytes,48,opt,name=addTeam,proto3,oneof"`
}

type Response_RemoveTeam struct {
	RemoveTeam *RemoveTeam `protobuf:"bytes,49,opt,name=removeTeam,proto3,oneof"`
}

type Response_UpdateTeam struct {
	UpdateTeam *UpdateTeam `protobuf:"bytes,50,opt,name=updateTeam,proto3,oneof"`
}

type Response_ListTeams struct {
	ListTeams *ListTeams `protobuf:"bytes,51,opt,name=listTeams,proto3,oneof"`
}

type Response_GetTeam struct {
	GetTeam *GetTeam `protobuf:"bytes,80,opt,name=getTeam,proto3,oneof"`
}

type Response_IsOperationAllowed struct {
	IsOperationAllowed *IsOperationAllowed `protobuf:"bytes,52,opt,name=isOperationAllowed,proto3,oneof"`
}

type Response_MoveFile struct {
	MoveFile *MoveFile `protobuf:"bytes,53,opt,name=moveFile,proto3,oneof"`
}

type Response_MoveFolder struct {
	MoveFolder *MoveFolder `protobuf:"bytes,54,opt,name=moveFolder,proto3,oneof"`
}

type Response_CopyFile struct {
	CopyFile *CopyFile `protobuf:"bytes,55,opt,name=copyFile,proto3,oneof"`
}

type Response_CopyFolder struct {
	CopyFolder *CopyFolder `protobuf:"bytes,56,opt,name=copyFolder,proto3,oneof"`
}

type Response_RestoreVersion struct {
	RestoreVersion *RestoreVersion `protobuf:"bytes,57,opt,name=restoreVersion,proto3,oneof"`
}

type Response_RemoveFile struct {
	RemoveFile *RemoveFile `protobuf:"bytes,58,opt,name=removeFile,proto3,oneof"`
}

type Response_RemoveFolder struct {
	RemoveFolder *RemoveFolder `protobuf:"bytes,59,opt,name=removeFolder,proto3,oneof"`
}

type Response_UntrashFile struct {
	UntrashFile *UntrashFile `protobuf:"bytes,60,opt,name=untrashFile,proto3,oneof"`
}

type Response_UntrashFolder struct {
	UntrashFolder *UntrashFolder `protobuf:"bytes,61,opt,name=untrashFolder,proto3,oneof"`
}

type Response_UndoStartWrite struct {
	UndoStartWrite *UndoStartWrite `protobuf:"bytes,62,opt,name=undoStartWrite,proto3,oneof"`
}

type Response_DetachClonedFolder struct {
	DetachClonedFolder *DetachClonedFolder `protobuf:"bytes,63,opt,name=detachClonedFolder,proto3,oneof"`
}

type Response_GetMetaFromPath struct {
	GetMetaFromPath *GetMetaFromPath `protobuf:"bytes,64,opt,name=getMetaFromPath,proto3,oneof"`
}

type Response_RenameFile struct {
	RenameFile *RenameFile `protobuf:"bytes,65,opt,name=renameFile,proto3,oneof"`
}

type Response_RenameFolder struct {
	RenameFolder *RenameFolder `protobuf:"bytes,66,opt,name=renameFolder,proto3,oneof"`
}

type Response_List struct {
	List *List `protobuf:"bytes,67,opt,name=list,proto3,oneof"`
}

type Response_AuditLogMessage struct {
	AuditLogMessage *AuditLogMessage `protobuf:"bytes,68,opt,name=auditLogMessage,proto3,oneof"`
}

type Response_ResetVersion struct {
	ResetVersion *ResetVersion `protobuf:"bytes,69,opt,name=resetVersion,proto3,oneof"`
}

type Response_SetUser struct {
	SetUser *SetUser `protobuf:"bytes,70,opt,name=setUser,proto3,oneof"`
}

type Response_FinalizeProfileWrite struct {
	FinalizeProfileWrite *FinalizeProfileWrite `protobuf:"bytes,71,opt,name=finalizeProfileWrite,proto3,oneof"`
}

type Response_GetProfileFileMeta struct {
	GetProfileFileMeta *GetProfileFileMeta `protobuf:"bytes,72,opt,name=getProfileFileMeta,proto3,oneof"`
}

type Response_ProfileChunkList struct {
	ProfileChunkList *ProfileChunkList `protobuf:"bytes,73,opt,name=profileChunkList,proto3,oneof"`
}

type Response_GetUserType struct {
	GetUserType *GetUserType `protobuf:"bytes,74,opt,name=getUserType,proto3,oneof"`
}

type Response_GetRandomBytes struct {
	GetRandomBytes *GetRandomBytes `protobuf:"bytes,75,opt,name=getRandomBytes,proto3,oneof"`
}

type Response_Share struct {
	Share *Share `protobuf:"bytes,76,opt,name=share,proto3,oneof"`
}

type Response_Unshare struct {
	Unshare *Unshare `protobuf:"bytes,77,opt,name=unshare,proto3,oneof"`
}

type Response_UpdateShare struct {
	UpdateShare *UpdateShare `protobuf:"bytes,78,opt,name=updateShare,proto3,oneof"`
}

type Response_ListShares struct {
	ListShares *ListShares `protobuf:"bytes,79,opt,name=listShares,proto3,oneof"`
}

type Response_ResetTOTP struct {
	ResetTOTP *ResetTOTP `protobuf:"bytes,82,opt,name=resetTOTP,proto3,oneof"`
}

type Response_SetRolesTeamsToUser struct {
	// AssignRoleToUser assignRoleToUser = 83;
	// DeleteRoleFromUser deleteRoleFromUser = 84;
	// AssignTeamToUser assignTeamToUser = 85;
	// DeleteTeamFromUser deleteTeamFromUser = 86;
	SetRolesTeamsToUser *SetRolesTeamsToUser `protobuf:"bytes,86,opt,name=setRolesTeamsToUser,proto3,oneof"`
}

type Response_UpdatePinOps struct {
	UpdatePinOps *UpdatePinOps `protobuf:"bytes,87,opt,name=updatePinOps,proto3,oneof"`
}

type Response_DeletePin struct {
	DeletePin *DeletePin `protobuf:"bytes,88,opt,name=deletePin,proto3,oneof"`
}

type Response_GetRolesAndTeamsOfUser struct {
	GetRolesAndTeamsOfUser *GetRolesAndTeamsOfUser `protobuf:"bytes,89,opt,name=getRolesAndTeamsOfUser,proto3,oneof"`
}

type Response_RestartPutChunk struct {
	RestartPutChunk *RestartPutChunk `protobuf:"bytes,90,opt,name=restartPutChunk,proto3,oneof"`
}

type Response_VerifyAuditLogMeta struct {
	VerifyAuditLogMeta *VerifyAuditLogMeta `protobuf:"bytes,91,opt,name=verifyAuditLogMeta,proto3,oneof"`
}

type Response_GetAuditLog struct {
	GetAuditLog *GetAuditLog `protobuf:"bytes,92,opt,name=getAuditLog,proto3,oneof"`
}

type Response_DeleteAuditLog struct {
	DeleteAuditLog *DeleteAuditLog `protobuf:"bytes,93,opt,name=deleteAuditLog,proto3,oneof"`
}

type Response_GetLedgerRange struct {
	GetLedgerRange *GetLedgerRange `protobuf:"bytes,94,opt,name=getLedgerRange,proto3,oneof"`
}

type Response_ListPins struct {
	ListPins *ListPins `protobuf:"bytes,95,opt,name=listPins,proto3,oneof"`
}

type Response_GetMetaFromSharedPath struct {
	// GetPolicyFromName getPolicyFromName= 94;
	GetMetaFromSharedPath *GetMetaFromSharedPath `protobuf:"bytes,96,opt,name=GetMetaFromSharedPath,proto3,oneof"`
}

func (*Response_AddUser) isResponse_Operation() {}

func (*Response_VerifyUser) isResponse_Operation() {}

func (*Response_RemoveUser) isResponse_Operation() {}

func (*Response_PasswordReset) isResponse_Operation() {}

func (*Response_ChangePassword) isResponse_Operation() {}

func (*Response_AddOrganization) isResponse_Operation() {}

func (*Response_InitiatePayment) isResponse_Operation() {}

func (*Response_PaymentResponse) isResponse_Operation() {}

func (*Response_SignIn) isResponse_Operation() {}

func (*Response_SignOut) isResponse_Operation() {}

func (*Response_InviteUser) isResponse_Operation() {}

func (*Response_GetUser) isResponse_Operation() {}

func (*Response_ListUsers) isResponse_Operation() {}

func (*Response_RemoveOrganization) isResponse_Operation() {}

func (*Response_VerifyOrganization) isResponse_Operation() {}

func (*Response_GetOrganization) isResponse_Operation() {}

func (*Response_AddPin) isResponse_Operation() {}

func (*Response_Echo) isResponse_Operation() {}

func (*Response_GetFileHead) isResponse_Operation() {}

func (*Response_GetChunk) isResponse_Operation() {}

func (*Response_StartWrite) isResponse_Operation() {}

func (*Response_PutChunk) isResponse_Operation() {}

func (*Response_FinalizeWrite) isResponse_Operation() {}

func (*Response_ListFiles) isResponse_Operation() {}

func (*Response_Remove) isResponse_Operation() {}

func (*Response_FileLock) isResponse_Operation() {}

func (*Response_FileUnlock) isResponse_Operation() {}

func (*Response_GetFolder) isResponse_Operation() {}

func (*Response_CreateFolder) isResponse_Operation() {}

func (*Response_CreateSnapshot) isResponse_Operation() {}

func (*Response_VerifyPayment) isResponse_Operation() {}

func (*Response_GetSecret) isResponse_Operation() {}

func (*Response_AddSecret) isResponse_Operation() {}

func (*Response_DeleteSecret) isResponse_Operation() {}

func (*Response_UpdateSecret) isResponse_Operation() {}

func (*Response_ListSecrets) isResponse_Operation() {}

func (*Response_ListSecretSubkeys) isResponse_Operation() {}

func (*Response_QuickListSecrets) isResponse_Operation() {}

func (*Response_UndeleteSecret) isResponse_Operation() {}

func (*Response_DestroySecret) isResponse_Operation() {}

func (*Response_AddRole) isResponse_Operation() {}

func (*Response_RemoveRole) isResponse_Operation() {}

func (*Response_UpdateRole) isResponse_Operation() {}

func (*Response_ListRoles) isResponse_Operation() {}

func (*Response_GetRole) isResponse_Operation() {}

func (*Response_AddTeam) isResponse_Operation() {}

func (*Response_RemoveTeam) isResponse_Operation() {}

func (*Response_UpdateTeam) isResponse_Operation() {}

func (*Response_ListTeams) isResponse_Operation() {}

func (*Response_GetTeam) isResponse_Operation() {}

func (*Response_IsOperationAllowed) isResponse_Operation() {}

func (*Response_MoveFile) isResponse_Operation() {}

func (*Response_MoveFolder) isResponse_Operation() {}

func (*Response_CopyFile) isResponse_Operation() {}

func (*Response_CopyFolder) isResponse_Operation() {}

func (*Response_RestoreVersion) isResponse_Operation() {}

func (*Response_RemoveFile) isResponse_Operation() {}

func (*Response_RemoveFolder) isResponse_Operation() {}

func (*Response_UntrashFile) isResponse_Operation() {}

func (*Response_UntrashFolder) isResponse_Operation() {}

func (*Response_UndoStartWrite) isResponse_Operation() {}

func (*Response_DetachClonedFolder) isResponse_Operation() {}

func (*Response_GetMetaFromPath) isResponse_Operation() {}

func (*Response_RenameFile) isResponse_Operation() {}

func (*Response_RenameFolder) isResponse_Operation() {}

func (*Response_List) isResponse_Operation() {}

func (*Response_AuditLogMessage) isResponse_Operation() {}

func (*Response_ResetVersion) isResponse_Operation() {}

func (*Response_SetUser) isResponse_Operation() {}

func (*Response_FinalizeProfileWrite) isResponse_Operation() {}

func (*Response_GetProfileFileMeta) isResponse_Operation() {}

func (*Response_ProfileChunkList) isResponse_Operation() {}

func (*Response_GetUserType) isResponse_Operation() {}

func (*Response_GetRandomBytes) isResponse_Operation() {}

func (*Response_Share) isResponse_Operation() {}

func (*Response_Unshare) isResponse_Operation() {}

func (*Response_UpdateShare) isResponse_Operation() {}

func (*Response_ListShares) isResponse_Operation() {}

func (*Response_ResetTOTP) isResponse_Operation() {}

func (*Response_SetRolesTeamsToUser) isResponse_Operation() {}

func (*Response_UpdatePinOps) isResponse_Operation() {}

func (*Response_DeletePin) isResponse_Operation() {}

func (*Response_GetRolesAndTeamsOfUser) isResponse_Operation() {}

func (*Response_RestartPutChunk) isResponse_Operation() {}

func (*Response_VerifyAuditLogMeta) isResponse_Operation() {}

func (*Response_GetAuditLog) isResponse_Operation() {}

func (*Response_DeleteAuditLog) isResponse_Operation() {}

func (*Response_GetLedgerRange) isResponse_Operation() {}

func (*Response_ListPins) isResponse_Operation() {}

func (*Response_GetMetaFromSharedPath) isResponse_Operation() {}

var File_response_proto protoreflect.FileDescriptor

var file_response_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x70, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x19, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x17, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x77, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x03, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x2d,
	0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x86,
	0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x70, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xc2,
	0x02, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x6f,
	0x74, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07,
	0x74, 0x6f, 0x74, 0x70, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x17, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x74,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x22, 0x7f, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x50, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x4f, 0x54, 0x50, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x70,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x70,
	0x55, 0x72, 0x69, 0x22, 0xb8, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x61, 0x7a, 0x6f, 0x72, 0x70,
	0x61, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x72, 0x61, 0x7a, 0x6f, 0x72, 0x70, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x7a, 0x6f, 0x72, 0x70,
	0x61, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xe2,
	0x01, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x72, 0x67,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x67, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x74, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x50, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x64, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x57, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x38, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xce, 0x03, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x4d, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x68, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75, 0x75, 0x69, 0x64,
	0x4f, 0x66, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x09,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2b, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x36, 0x0a, 0x14, 0x74, 0x69, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x01, 0x52, 0x13, 0x74, 0x69, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x69, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xb8, 0x01, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x4f,
	0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x69, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a,
	0x07, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x22, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x62, 0x6a,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x8e, 0x02, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0xac, 0x02, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x36, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38,
	0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x04, 0x43, 0x6f, 0x70,
	0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x04, 0x4d,
	0x6f, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7c, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x22, 0x64, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x60, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x63, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0xa2,
	0x01, 0x0a, 0x10, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x8b, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x5e, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x76, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x76, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x20, 0x0a,
	0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x38, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x01,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12,
	0x24, 0x0a, 0x0c, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22,
	0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x6b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x0d, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf1, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x76, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x12, 0x49,
	0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x0a,
	0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x0a, 0x43, 0x6f,
	0x70, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3f, 0x0a, 0x1d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x6f, 0x70, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x43,
	0x6f, 0x70, 0x79, 0x22, 0x3a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x36, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x37, 0x0a, 0x0b, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x55, 0x6e,
	0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3e, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x68, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x7e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0a, 0x70, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x4f, 0x62, 0x6a, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x33, 0x0a, 0x07, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54,
	0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x4b, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x07,
	0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x62,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61,
	0x63, 0x6c, 0x22, 0x6a, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x63,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x73, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x22, 0x5e,
	0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe0,
	0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x14, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x11, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x55, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x75, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xf5, 0x2a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x61,
	0x64, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x2d, 0x0a, 0x07,
	0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x67,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x06, 0x61, 0x64, 0x64, 0x50, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x64, 0x64, 0x50, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x65, 0x63,
	0x68, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f,
	0x12, 0x39, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x36, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x67,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x33, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x11,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07,
	0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x2d, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x4e,
	0x0a, 0x12, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6f, 0x70, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f,
	0x70, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c,
	0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b,
	0x75, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x74,
	0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x74, 0x72,
	0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x6e, 0x74, 0x72, 0x61,
	0x73, 0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x73,
	0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x74, 0x72, 0x61,
	0x73, 0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x6f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x64, 0x6f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e,
	0x64, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x12,
	0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x75,
	0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x4f, 0x54, 0x50, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x54, 0x4f, 0x54, 0x50, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x4f,
	0x54, 0x50, 0x12, 0x51, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x13, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x6e, 0x4f, 0x70, 0x73, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e,
	0x4f, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e,
	0x4f, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e,
	0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x4e, 0x0a, 0x12, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x67, 0x65,
	0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x67, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x73, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x69, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x73,
	0x12, 0x57, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x2a, 0xa8, 0x03,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x08, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x12, 0x0a,
	0x0e, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x10, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x64, 0x2a, 0x24, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x72, 0x6f, 0x10, 0x02, 0x2a, 0x63,
	0x0a, 0x10, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x5a, 0x49, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x5a, 0x34, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x5a, 0x34,
	0x48, 0x43, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x5a, 0x4d, 0x41, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x5a, 0x49, 0x50, 0x32, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x4c, 0x49,
	0x42, 0x10, 0x07, 0x2a, 0x3f, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x4b, 0x45, 0x59, 0x10, 0x07, 0x2a, 0x4a, 0x0a, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e,
	0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x11, 0x5a, 0x0f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_response_proto_rawDescOnce sync.Once
	file_response_proto_rawDescData = file_response_proto_rawDesc
)

func file_response_proto_rawDescGZIP() []byte {
	file_response_proto_rawDescOnce.Do(func() {
		file_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_response_proto_rawDescData)
	})
	return file_response_proto_rawDescData
}

var file_response_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_response_proto_msgTypes = make([]protoimpl.MessageInfo, 121)
var file_response_proto_goTypes = []interface{}{
	(Status)(0),                    // 0: response.Status
	(Plan)(0),                      // 1: response.Plan
	(ChunkCompression)(0),          // 2: response.ChunkCompression
	(OrderBy)(0),                   // 3: response.OrderBy
	(SecretType)(0),                // 4: response.SecretType
	(TypeOfUser)(0),                // 5: response.TypeOfUser
	(*AddUser)(nil),                // 6: response.AddUser
	(*VerifyUser)(nil),             // 7: response.VerifyUser
	(*RemoveUser)(nil),             // 8: response.RemoveUser
	(*User)(nil),                   // 9: response.User
	(*Organization)(nil),           // 10: response.Organization
	(*UserMeta)(nil),               // 11: response.UserMeta
	(*GetUser)(nil),                // 12: response.GetUser
	(*PasswordReset)(nil),          // 13: response.PasswordReset
	(*ChangePassword)(nil),         // 14: response.ChangePassword
	(*AddOrganization)(nil),        // 15: response.AddOrganization
	(*VerifyOrganization)(nil),     // 16: response.VerifyOrganization
	(*RemoveOrganization)(nil),     // 17: response.RemoveOrganization
	(*GetOrganization)(nil),        // 18: response.GetOrganization
	(*InviteUser)(nil),             // 19: response.InviteUser
	(*ResetTOTP)(nil),              // 20: response.ResetTOTP
	(*InitiatePayment)(nil),        // 21: response.InitiatePayment
	(*PaymentResponse)(nil),        // 22: response.PaymentResponse
	(*SignIn)(nil),                 // 23: response.SignIn
	(*SignOut)(nil),                // 24: response.SignOut
	(*AddPin)(nil),                 // 25: response.AddPin
	(*Chunk)(nil),                  // 26: response.Chunk
	(*ResetVersion)(nil),           // 27: response.ResetVersion
	(*FileVersion)(nil),            // 28: response.FileVersion
	(*File)(nil),                   // 29: response.File
	(*GetFileHead)(nil),            // 30: response.GetFileHead
	(*GetChunk)(nil),               // 31: response.GetChunk
	(*StartWrite)(nil),             // 32: response.StartWrite
	(*PutChunk)(nil),               // 33: response.PutChunk
	(*FinalizeWrite)(nil),          // 34: response.FinalizeWrite
	(*Echo)(nil),                   // 35: response.Echo
	(*Child)(nil),                  // 36: response.Child
	(*FolderSnapshot)(nil),         // 37: response.FolderSnapshot
	(*PageToken)(nil),              // 38: response.PageToken
	(*PinInList)(nil),              // 39: response.PinInList
	(*MetaObj)(nil),                // 40: response.MetaObj
	(*GetMetaFromPath)(nil),        // 41: response.GetMetaFromPath
	(*AuditLog)(nil),               // 42: response.AuditLog
	(*Folder)(nil),                 // 43: response.Folder
	(*RenameFile)(nil),             // 44: response.RenameFile
	(*RenameFolder)(nil),           // 45: response.RenameFolder
	(*ListFiles)(nil),              // 46: response.ListFiles
	(*Remove)(nil),                 // 47: response.Remove
	(*Copy)(nil),                   // 48: response.Copy
	(*Move)(nil),                   // 49: response.Move
	(*FileLock)(nil),               // 50: response.FileLock
	(*FileUnlock)(nil),             // 51: response.FileUnlock
	(*GetFolder)(nil),              // 52: response.GetFolder
	(*CreateFolder)(nil),           // 53: response.CreateFolder
	(*CreateSnapshot)(nil),         // 54: response.CreateSnapshot
	(*VerifyPayment)(nil),          // 55: response.VerifyPayment
	(*GetSecret)(nil),              // 56: response.GetSecret
	(*AddSecret)(nil),              // 57: response.AddSecret
	(*DeleteSecret)(nil),           // 58: response.DeleteSecret
	(*DestroySecret)(nil),          // 59: response.DestroySecret
	(*UpdateSecret)(nil),           // 60: response.UpdateSecret
	(*ListSecrets)(nil),            // 61: response.ListSecrets
	(*QuickSecret)(nil),            // 62: response.QuickSecret
	(*QuickListSecrets)(nil),       // 63: response.QuickListSecrets
	(*ListSecretSubkeys)(nil),      // 64: response.ListSecretSubkeys
	(*UndeleteSecret)(nil),         // 65: response.UndeleteSecret
	(*Password)(nil),               // 66: response.Password
	(*Card)(nil),                   // 67: response.Card
	(*Note)(nil),                   // 68: response.Note
	(*Identity)(nil),               // 69: response.Identity
	(*KeyValue)(nil),               // 70: response.KeyValue
	(*Key)(nil),                    // 71: response.Key
	(*Certificate)(nil),            // 72: response.Certificate
	(*PrivateKey)(nil),             // 73: response.PrivateKey
	(*SecretData)(nil),             // 74: response.SecretData
	(*SecretVersion)(nil),          // 75: response.SecretVersion
	(*Secret)(nil),                 // 76: response.Secret
	(*GetRandomBytes)(nil),         // 77: response.GetRandomBytes
	(*AddRole)(nil),                // 78: response.AddRole
	(*RemoveRole)(nil),             // 79: response.RemoveRole
	(*UpdateRole)(nil),             // 80: response.UpdateRole
	(*ListRoles)(nil),              // 81: response.ListRoles
	(*GetRole)(nil),                // 82: response.GetRole
	(*AddTeam)(nil),                // 83: response.AddTeam
	(*RemoveTeam)(nil),             // 84: response.RemoveTeam
	(*UpdateTeam)(nil),             // 85: response.UpdateTeam
	(*ListTeams)(nil),              // 86: response.ListTeams
	(*GetTeam)(nil),                // 87: response.GetTeam
	(*IsOperationAllowed)(nil),     // 88: response.IsOperationAllowed
	(*MoveFile)(nil),               // 89: response.MoveFile
	(*MoveFolder)(nil),             // 90: response.MoveFolder
	(*CopyFile)(nil),               // 91: response.CopyFile
	(*CopyFolder)(nil),             // 92: response.CopyFolder
	(*RestoreVersion)(nil),         // 93: response.RestoreVersion
	(*RemoveFile)(nil),             // 94: response.RemoveFile
	(*RemoveFolder)(nil),           // 95: response.RemoveFolder
	(*UntrashFile)(nil),            // 96: response.UntrashFile
	(*UntrashFolder)(nil),          // 97: response.UntrashFolder
	(*UndoStartWrite)(nil),         // 98: response.UndoStartWrite
	(*DetachClonedFolder)(nil),     // 99: response.DetachClonedFolder
	(*AuditLogMessage)(nil),        // 100: response.AuditLogMessage
	(*GetLedgerRange)(nil),         // 101: response.GetLedgerRange
	(*VerifyAuditLogMeta)(nil),     // 102: response.VerifyAuditLogMeta
	(*GetAuditLog)(nil),            // 103: response.GetAuditLog
	(*DeleteAuditLog)(nil),         // 104: response.DeleteAuditLog
	(*ListPins)(nil),               // 105: response.ListPins
	(*List)(nil),                   // 106: response.List
	(*SetUser)(nil),                // 107: response.SetUser
	(*FinalizeProfileWrite)(nil),   // 108: response.FinalizeProfileWrite
	(*GetProfileFileMeta)(nil),     // 109: response.GetProfileFileMeta
	(*ProfileChunkList)(nil),       // 110: response.ProfileChunkList
	(*GetUserType)(nil),            // 111: response.GetUserType
	(*Share)(nil),                  // 112: response.Share
	(*Unshare)(nil),                // 113: response.Unshare
	(*UpdateShare)(nil),            // 114: response.UpdateShare
	(*ListShares)(nil),             // 115: response.ListShares
	(*SetRolesTeamsToUser)(nil),    // 116: response.SetRolesTeamsToUser
	(*UpdatePinOps)(nil),           // 117: response.UpdatePinOps
	(*DeletePin)(nil),              // 118: response.DeletePin
	(*GetRolesAndTeamsOfUser)(nil), // 119: response.GetRolesAndTeamsOfUser
	(*UserMetaForList)(nil),        // 120: response.UserMetaForList
	(*PageTokenListUser)(nil),      // 121: response.pageTokenListUser
	(*ListUsers)(nil),              // 122: response.ListUsers
	(*RestartPutChunk)(nil),        // 123: response.RestartPutChunk
	(*GetPolicyFromName)(nil),      // 124: response.GetPolicyFromName
	(*GetMetaFromSharedPath)(nil),  // 125: response.GetMetaFromSharedPath
	(*Response)(nil),               // 126: response.Response
}
var file_response_proto_depIdxs = []int32{
	0,   // 0: response.AddUser.status:type_name -> response.Status
	0,   // 1: response.VerifyUser.status:type_name -> response.Status
	0,   // 2: response.RemoveUser.status:type_name -> response.Status
	9,   // 3: response.UserMeta.userObj:type_name -> response.User
	10,  // 4: response.UserMeta.organizationObj:type_name -> response.Organization
	0,   // 5: response.GetUser.status:type_name -> response.Status
	11,  // 6: response.GetUser.user:type_name -> response.UserMeta
	0,   // 7: response.PasswordReset.status:type_name -> response.Status
	0,   // 8: response.ChangePassword.status:type_name -> response.Status
	0,   // 9: response.AddOrganization.status:type_name -> response.Status
	0,   // 10: response.VerifyOrganization.status:type_name -> response.Status
	0,   // 11: response.RemoveOrganization.status:type_name -> response.Status
	0,   // 12: response.GetOrganization.status:type_name -> response.Status
	0,   // 13: response.InviteUser.status:type_name -> response.Status
	0,   // 14: response.ResetTOTP.status:type_name -> response.Status
	0,   // 15: response.InitiatePayment.status:type_name -> response.Status
	0,   // 16: response.PaymentResponse.status:type_name -> response.Status
	0,   // 17: response.SignIn.status:type_name -> response.Status
	0,   // 18: response.SignOut.status:type_name -> response.Status
	0,   // 19: response.AddPin.status:type_name -> response.Status
	0,   // 20: response.ResetVersion.status:type_name -> response.Status
	0,   // 21: response.GetFileHead.status:type_name -> response.Status
	29,  // 22: response.GetFileHead.file:type_name -> response.File
	0,   // 23: response.GetChunk.status:type_name -> response.Status
	2,   // 24: response.GetChunk.compressionType:type_name -> response.ChunkCompression
	0,   // 25: response.StartWrite.status:type_name -> response.Status
	0,   // 26: response.PutChunk.status:type_name -> response.Status
	26,  // 27: response.PutChunk.chunk:type_name -> response.Chunk
	0,   // 28: response.FinalizeWrite.status:type_name -> response.Status
	3,   // 29: response.PageToken.orderby:type_name -> response.OrderBy
	29,  // 30: response.MetaObj.file_meta:type_name -> response.File
	43,  // 31: response.MetaObj.folder_meta:type_name -> response.Folder
	26,  // 32: response.MetaObj.chunk_meta:type_name -> response.Chunk
	42,  // 33: response.MetaObj.audit_log_meta:type_name -> response.AuditLog
	0,   // 34: response.GetMetaFromPath.status:type_name -> response.Status
	40,  // 35: response.GetMetaFromPath.meta:type_name -> response.MetaObj
	0,   // 36: response.RenameFile.status:type_name -> response.Status
	0,   // 37: response.RenameFolder.status:type_name -> response.Status
	0,   // 38: response.ListFiles.status:type_name -> response.Status
	29,  // 39: response.ListFiles.files:type_name -> response.File
	43,  // 40: response.ListFiles.folders:type_name -> response.Folder
	0,   // 41: response.Remove.status:type_name -> response.Status
	0,   // 42: response.Copy.status:type_name -> response.Status
	0,   // 43: response.Move.status:type_name -> response.Status
	0,   // 44: response.FileLock.status:type_name -> response.Status
	0,   // 45: response.FileUnlock.status:type_name -> response.Status
	0,   // 46: response.GetFolder.status:type_name -> response.Status
	43,  // 47: response.GetFolder.folder:type_name -> response.Folder
	0,   // 48: response.CreateFolder.status:type_name -> response.Status
	0,   // 49: response.CreateSnapshot.status:type_name -> response.Status
	37,  // 50: response.CreateSnapshot.folderSnapshot:type_name -> response.FolderSnapshot
	0,   // 51: response.VerifyPayment.status:type_name -> response.Status
	0,   // 52: response.GetSecret.status:type_name -> response.Status
	0,   // 53: response.AddSecret.status:type_name -> response.Status
	0,   // 54: response.DeleteSecret.status:type_name -> response.Status
	0,   // 55: response.DestroySecret.status:type_name -> response.Status
	0,   // 56: response.UpdateSecret.status:type_name -> response.Status
	0,   // 57: response.ListSecrets.status:type_name -> response.Status
	76,  // 58: response.ListSecrets.secrets:type_name -> response.Secret
	0,   // 59: response.QuickListSecrets.status:type_name -> response.Status
	62,  // 60: response.QuickListSecrets.quickSecrets:type_name -> response.QuickSecret
	0,   // 61: response.ListSecretSubkeys.status:type_name -> response.Status
	0,   // 62: response.UndeleteSecret.status:type_name -> response.Status
	4,   // 63: response.SecretData.type:type_name -> response.SecretType
	66,  // 64: response.SecretData.password:type_name -> response.Password
	67,  // 65: response.SecretData.card:type_name -> response.Card
	68,  // 66: response.SecretData.note:type_name -> response.Note
	69,  // 67: response.SecretData.identity:type_name -> response.Identity
	70,  // 68: response.SecretData.keyValue:type_name -> response.KeyValue
	71,  // 69: response.SecretData.key:type_name -> response.Key
	72,  // 70: response.SecretData.certificate:type_name -> response.Certificate
	73,  // 71: response.SecretData.privatekey:type_name -> response.PrivateKey
	74,  // 72: response.SecretVersion.secret_data:type_name -> response.SecretData
	75,  // 73: response.Secret.versions:type_name -> response.SecretVersion
	0,   // 74: response.GetRandomBytes.status:type_name -> response.Status
	0,   // 75: response.AddRole.status:type_name -> response.Status
	0,   // 76: response.RemoveRole.status:type_name -> response.Status
	0,   // 77: response.UpdateRole.status:type_name -> response.Status
	0,   // 78: response.ListRoles.status:type_name -> response.Status
	0,   // 79: response.GetRole.status:type_name -> response.Status
	0,   // 80: response.AddTeam.status:type_name -> response.Status
	0,   // 81: response.RemoveTeam.status:type_name -> response.Status
	0,   // 82: response.UpdateTeam.status:type_name -> response.Status
	0,   // 83: response.ListTeams.status:type_name -> response.Status
	0,   // 84: response.GetTeam.status:type_name -> response.Status
	0,   // 85: response.IsOperationAllowed.status:type_name -> response.Status
	0,   // 86: response.MoveFile.status:type_name -> response.Status
	0,   // 87: response.MoveFolder.status:type_name -> response.Status
	0,   // 88: response.CopyFile.status:type_name -> response.Status
	0,   // 89: response.CopyFolder.status:type_name -> response.Status
	0,   // 90: response.RestoreVersion.status:type_name -> response.Status
	0,   // 91: response.RemoveFile.status:type_name -> response.Status
	0,   // 92: response.RemoveFolder.status:type_name -> response.Status
	0,   // 93: response.UntrashFile.status:type_name -> response.Status
	0,   // 94: response.UntrashFolder.status:type_name -> response.Status
	0,   // 95: response.UndoStartWrite.status:type_name -> response.Status
	0,   // 96: response.DetachClonedFolder.status:type_name -> response.Status
	0,   // 97: response.AuditLogMessage.status:type_name -> response.Status
	0,   // 98: response.GetLedgerRange.status:type_name -> response.Status
	0,   // 99: response.VerifyAuditLogMeta.status:type_name -> response.Status
	0,   // 100: response.GetAuditLog.status:type_name -> response.Status
	0,   // 101: response.DeleteAuditLog.status:type_name -> response.Status
	0,   // 102: response.ListPins.status:type_name -> response.Status
	39,  // 103: response.ListPins.pin_objects:type_name -> response.PinInList
	0,   // 104: response.List.status:type_name -> response.Status
	40,  // 105: response.List.objects:type_name -> response.MetaObj
	0,   // 106: response.SetUser.status:type_name -> response.Status
	0,   // 107: response.FinalizeProfileWrite.status:type_name -> response.Status
	0,   // 108: response.GetProfileFileMeta.status:type_name -> response.Status
	0,   // 109: response.ProfileChunkList.status:type_name -> response.Status
	26,  // 110: response.ProfileChunkList.objects:type_name -> response.Chunk
	5,   // 111: response.GetUserType.type:type_name -> response.TypeOfUser
	0,   // 112: response.GetUserType.status:type_name -> response.Status
	0,   // 113: response.Share.status:type_name -> response.Status
	0,   // 114: response.Unshare.status:type_name -> response.Status
	0,   // 115: response.UpdateShare.status:type_name -> response.Status
	0,   // 116: response.ListShares.status:type_name -> response.Status
	0,   // 117: response.SetRolesTeamsToUser.status:type_name -> response.Status
	0,   // 118: response.UpdatePinOps.status:type_name -> response.Status
	0,   // 119: response.DeletePin.status:type_name -> response.Status
	0,   // 120: response.GetRolesAndTeamsOfUser.status:type_name -> response.Status
	0,   // 121: response.ListUsers.status:type_name -> response.Status
	120, // 122: response.ListUsers.users:type_name -> response.UserMetaForList
	0,   // 123: response.RestartPutChunk.status:type_name -> response.Status
	0,   // 124: response.GetPolicyFromName.status:type_name -> response.Status
	0,   // 125: response.GetMetaFromSharedPath.status:type_name -> response.Status
	40,  // 126: response.GetMetaFromSharedPath.meta:type_name -> response.MetaObj
	6,   // 127: response.Response.addUser:type_name -> response.AddUser
	7,   // 128: response.Response.verifyUser:type_name -> response.VerifyUser
	8,   // 129: response.Response.removeUser:type_name -> response.RemoveUser
	13,  // 130: response.Response.passwordReset:type_name -> response.PasswordReset
	14,  // 131: response.Response.changePassword:type_name -> response.ChangePassword
	15,  // 132: response.Response.addOrganization:type_name -> response.AddOrganization
	21,  // 133: response.Response.initiatePayment:type_name -> response.InitiatePayment
	22,  // 134: response.Response.paymentResponse:type_name -> response.PaymentResponse
	23,  // 135: response.Response.signIn:type_name -> response.SignIn
	24,  // 136: response.Response.signOut:type_name -> response.SignOut
	19,  // 137: response.Response.inviteUser:type_name -> response.InviteUser
	12,  // 138: response.Response.getUser:type_name -> response.GetUser
	122, // 139: response.Response.listUsers:type_name -> response.ListUsers
	17,  // 140: response.Response.removeOrganization:type_name -> response.RemoveOrganization
	16,  // 141: response.Response.verifyOrganization:type_name -> response.VerifyOrganization
	18,  // 142: response.Response.getOrganization:type_name -> response.GetOrganization
	25,  // 143: response.Response.addPin:type_name -> response.AddPin
	35,  // 144: response.Response.echo:type_name -> response.Echo
	30,  // 145: response.Response.getFileHead:type_name -> response.GetFileHead
	31,  // 146: response.Response.getChunk:type_name -> response.GetChunk
	32,  // 147: response.Response.startWrite:type_name -> response.StartWrite
	33,  // 148: response.Response.putChunk:type_name -> response.PutChunk
	34,  // 149: response.Response.finalizeWrite:type_name -> response.FinalizeWrite
	46,  // 150: response.Response.listFiles:type_name -> response.ListFiles
	47,  // 151: response.Response.remove:type_name -> response.Remove
	50,  // 152: response.Response.fileLock:type_name -> response.FileLock
	51,  // 153: response.Response.fileUnlock:type_name -> response.FileUnlock
	52,  // 154: response.Response.getFolder:type_name -> response.GetFolder
	53,  // 155: response.Response.createFolder:type_name -> response.CreateFolder
	54,  // 156: response.Response.CreateSnapshot:type_name -> response.CreateSnapshot
	55,  // 157: response.Response.verifyPayment:type_name -> response.VerifyPayment
	56,  // 158: response.Response.getSecret:type_name -> response.GetSecret
	57,  // 159: response.Response.addSecret:type_name -> response.AddSecret
	58,  // 160: response.Response.deleteSecret:type_name -> response.DeleteSecret
	60,  // 161: response.Response.updateSecret:type_name -> response.UpdateSecret
	61,  // 162: response.Response.listSecrets:type_name -> response.ListSecrets
	64,  // 163: response.Response.listSecretSubkeys:type_name -> response.ListSecretSubkeys
	63,  // 164: response.Response.quickListSecrets:type_name -> response.QuickListSecrets
	65,  // 165: response.Response.undeleteSecret:type_name -> response.UndeleteSecret
	59,  // 166: response.Response.destroySecret:type_name -> response.DestroySecret
	78,  // 167: response.Response.addRole:type_name -> response.AddRole
	79,  // 168: response.Response.removeRole:type_name -> response.RemoveRole
	80,  // 169: response.Response.updateRole:type_name -> response.UpdateRole
	81,  // 170: response.Response.listRoles:type_name -> response.ListRoles
	82,  // 171: response.Response.getRole:type_name -> response.GetRole
	83,  // 172: response.Response.addTeam:type_name -> response.AddTeam
	84,  // 173: response.Response.removeTeam:type_name -> response.RemoveTeam
	85,  // 174: response.Response.updateTeam:type_name -> response.UpdateTeam
	86,  // 175: response.Response.listTeams:type_name -> response.ListTeams
	87,  // 176: response.Response.getTeam:type_name -> response.GetTeam
	88,  // 177: response.Response.isOperationAllowed:type_name -> response.IsOperationAllowed
	89,  // 178: response.Response.moveFile:type_name -> response.MoveFile
	90,  // 179: response.Response.moveFolder:type_name -> response.MoveFolder
	91,  // 180: response.Response.copyFile:type_name -> response.CopyFile
	92,  // 181: response.Response.copyFolder:type_name -> response.CopyFolder
	93,  // 182: response.Response.restoreVersion:type_name -> response.RestoreVersion
	94,  // 183: response.Response.removeFile:type_name -> response.RemoveFile
	95,  // 184: response.Response.removeFolder:type_name -> response.RemoveFolder
	96,  // 185: response.Response.untrashFile:type_name -> response.UntrashFile
	97,  // 186: response.Response.untrashFolder:type_name -> response.UntrashFolder
	98,  // 187: response.Response.undoStartWrite:type_name -> response.UndoStartWrite
	99,  // 188: response.Response.detachClonedFolder:type_name -> response.DetachClonedFolder
	41,  // 189: response.Response.getMetaFromPath:type_name -> response.GetMetaFromPath
	44,  // 190: response.Response.renameFile:type_name -> response.RenameFile
	45,  // 191: response.Response.renameFolder:type_name -> response.RenameFolder
	106, // 192: response.Response.list:type_name -> response.List
	100, // 193: response.Response.auditLogMessage:type_name -> response.AuditLogMessage
	27,  // 194: response.Response.resetVersion:type_name -> response.ResetVersion
	107, // 195: response.Response.setUser:type_name -> response.SetUser
	108, // 196: response.Response.finalizeProfileWrite:type_name -> response.FinalizeProfileWrite
	109, // 197: response.Response.getProfileFileMeta:type_name -> response.GetProfileFileMeta
	110, // 198: response.Response.profileChunkList:type_name -> response.ProfileChunkList
	111, // 199: response.Response.getUserType:type_name -> response.GetUserType
	77,  // 200: response.Response.getRandomBytes:type_name -> response.GetRandomBytes
	112, // 201: response.Response.share:type_name -> response.Share
	113, // 202: response.Response.unshare:type_name -> response.Unshare
	114, // 203: response.Response.updateShare:type_name -> response.UpdateShare
	115, // 204: response.Response.listShares:type_name -> response.ListShares
	20,  // 205: response.Response.resetTOTP:type_name -> response.ResetTOTP
	116, // 206: response.Response.setRolesTeamsToUser:type_name -> response.SetRolesTeamsToUser
	117, // 207: response.Response.updatePinOps:type_name -> response.UpdatePinOps
	118, // 208: response.Response.deletePin:type_name -> response.DeletePin
	119, // 209: response.Response.getRolesAndTeamsOfUser:type_name -> response.GetRolesAndTeamsOfUser
	123, // 210: response.Response.restartPutChunk:type_name -> response.RestartPutChunk
	102, // 211: response.Response.verifyAuditLogMeta:type_name -> response.VerifyAuditLogMeta
	103, // 212: response.Response.getAuditLog:type_name -> response.GetAuditLog
	104, // 213: response.Response.deleteAuditLog:type_name -> response.DeleteAuditLog
	101, // 214: response.Response.getLedgerRange:type_name -> response.GetLedgerRange
	105, // 215: response.Response.listPins:type_name -> response.ListPins
	125, // 216: response.Response.GetMetaFromSharedPath:type_name -> response.GetMetaFromSharedPath
	217, // [217:217] is the sub-list for method output_type
	217, // [217:217] is the sub-list for method input_type
	217, // [217:217] is the sub-list for extension type_name
	217, // [217:217] is the sub-list for extension extendee
	0,   // [0:217] is the sub-list for field type_name
}

func init() { file_response_proto_init() }
func file_response_proto_init() {
	if File_response_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_response_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetTOTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiatePayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinInList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetaFromPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Folder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Remove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Copy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroySecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickListSecrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretSubkeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndeleteSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Password); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRandomBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOperationAllowed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UntrashFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UntrashFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoStartWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachClonedFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLedgerRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAuditLogMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeProfileWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileFileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileChunkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unshare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRolesTeamsToUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePinOps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRolesAndTeamsOfUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetaForList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageTokenListUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartPutChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyFromName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetaFromSharedPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_response_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UserMeta_UserObj)(nil),
		(*UserMeta_OrganizationObj)(nil),
	}
	file_response_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*PageToken_LastSerialNumber)(nil),
		(*PageToken_LastName)(nil),
		(*PageToken_LastModifiedDate)(nil),
		(*PageToken_LastSize)(nil),
	}
	file_response_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*MetaObj_FileMeta)(nil),
		(*MetaObj_FolderMeta)(nil),
		(*MetaObj_ChunkMeta)(nil),
		(*MetaObj_AuditLogMeta)(nil),
	}
	file_response_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*Key_Random)(nil),
		(*Key_Alphanumeric)(nil),
	}
	file_response_proto_msgTypes[68].OneofWrappers = []interface{}{
		(*SecretData_Password)(nil),
		(*SecretData_Card)(nil),
		(*SecretData_Note)(nil),
		(*SecretData_Identity)(nil),
		(*SecretData_KeyValue)(nil),
		(*SecretData_Key)(nil),
		(*SecretData_Certificate)(nil),
		(*SecretData_Privatekey)(nil),
	}
	file_response_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[99].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[110].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[111].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[113].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[116].OneofWrappers = []interface{}{}
	file_response_proto_msgTypes[120].OneofWrappers = []interface{}{
		(*Response_AddUser)(nil),
		(*Response_VerifyUser)(nil),
		(*Response_RemoveUser)(nil),
		(*Response_PasswordReset)(nil),
		(*Response_ChangePassword)(nil),
		(*Response_AddOrganization)(nil),
		(*Response_InitiatePayment)(nil),
		(*Response_PaymentResponse)(nil),
		(*Response_SignIn)(nil),
		(*Response_SignOut)(nil),
		(*Response_InviteUser)(nil),
		(*Response_GetUser)(nil),
		(*Response_ListUsers)(nil),
		(*Response_RemoveOrganization)(nil),
		(*Response_VerifyOrganization)(nil),
		(*Response_GetOrganization)(nil),
		(*Response_AddPin)(nil),
		(*Response_Echo)(nil),
		(*Response_GetFileHead)(nil),
		(*Response_GetChunk)(nil),
		(*Response_StartWrite)(nil),
		(*Response_PutChunk)(nil),
		(*Response_FinalizeWrite)(nil),
		(*Response_ListFiles)(nil),
		(*Response_Remove)(nil),
		(*Response_FileLock)(nil),
		(*Response_FileUnlock)(nil),
		(*Response_GetFolder)(nil),
		(*Response_CreateFolder)(nil),
		(*Response_CreateSnapshot)(nil),
		(*Response_VerifyPayment)(nil),
		(*Response_GetSecret)(nil),
		(*Response_AddSecret)(nil),
		(*Response_DeleteSecret)(nil),
		(*Response_UpdateSecret)(nil),
		(*Response_ListSecrets)(nil),
		(*Response_ListSecretSubkeys)(nil),
		(*Response_QuickListSecrets)(nil),
		(*Response_UndeleteSecret)(nil),
		(*Response_DestroySecret)(nil),
		(*Response_AddRole)(nil),
		(*Response_RemoveRole)(nil),
		(*Response_UpdateRole)(nil),
		(*Response_ListRoles)(nil),
		(*Response_GetRole)(nil),
		(*Response_AddTeam)(nil),
		(*Response_RemoveTeam)(nil),
		(*Response_UpdateTeam)(nil),
		(*Response_ListTeams)(nil),
		(*Response_GetTeam)(nil),
		(*Response_IsOperationAllowed)(nil),
		(*Response_MoveFile)(nil),
		(*Response_MoveFolder)(nil),
		(*Response_CopyFile)(nil),
		(*Response_CopyFolder)(nil),
		(*Response_RestoreVersion)(nil),
		(*Response_RemoveFile)(nil),
		(*Response_RemoveFolder)(nil),
		(*Response_UntrashFile)(nil),
		(*Response_UntrashFolder)(nil),
		(*Response_UndoStartWrite)(nil),
		(*Response_DetachClonedFolder)(nil),
		(*Response_GetMetaFromPath)(nil),
		(*Response_RenameFile)(nil),
		(*Response_RenameFolder)(nil),
		(*Response_List)(nil),
		(*Response_AuditLogMessage)(nil),
		(*Response_ResetVersion)(nil),
		(*Response_SetUser)(nil),
		(*Response_FinalizeProfileWrite)(nil),
		(*Response_GetProfileFileMeta)(nil),
		(*Response_ProfileChunkList)(nil),
		(*Response_GetUserType)(nil),
		(*Response_GetRandomBytes)(nil),
		(*Response_Share)(nil),
		(*Response_Unshare)(nil),
		(*Response_UpdateShare)(nil),
		(*Response_ListShares)(nil),
		(*Response_ResetTOTP)(nil),
		(*Response_SetRolesTeamsToUser)(nil),
		(*Response_UpdatePinOps)(nil),
		(*Response_DeletePin)(nil),
		(*Response_GetRolesAndTeamsOfUser)(nil),
		(*Response_RestartPutChunk)(nil),
		(*Response_VerifyAuditLogMeta)(nil),
		(*Response_GetAuditLog)(nil),
		(*Response_DeleteAuditLog)(nil),
		(*Response_GetLedgerRange)(nil),
		(*Response_ListPins)(nil),
		(*Response_GetMetaFromSharedPath)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_response_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   121,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_response_proto_goTypes,
		DependencyIndexes: file_response_proto_depIdxs,
		EnumInfos:         file_response_proto_enumTypes,
		MessageInfos:      file_response_proto_msgTypes,
	}.Build()
	File_response_proto = out.File
	file_response_proto_rawDesc = nil
	file_response_proto_goTypes = nil
	file_response_proto_depIdxs = nil
}
