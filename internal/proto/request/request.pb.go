// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: request.proto

package request

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Plan int32

const (
	Plan_Free  Plan = 0
	Plan_Basic Plan = 1
	Plan_Pro   Plan = 2
)

// Enum value maps for Plan.
var (
	Plan_name = map[int32]string{
		0: "Free",
		1: "Basic",
		2: "Pro",
	}
	Plan_value = map[string]int32{
		"Free":  0,
		"Basic": 1,
		"Pro":   2,
	}
)

func (x Plan) Enum() *Plan {
	p := new(Plan)
	*p = x
	return p
}

func (x Plan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Plan) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[0].Descriptor()
}

func (Plan) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[0]
}

func (x Plan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Plan.Descriptor instead.
func (Plan) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0}
}

type ChunkFlags int32

const (
	ChunkFlags_NONE  ChunkFlags = 0
	ChunkFlags_START ChunkFlags = 1
	ChunkFlags_STOP  ChunkFlags = 2
)

// Enum value maps for ChunkFlags.
var (
	ChunkFlags_name = map[int32]string{
		0: "NONE",
		1: "START",
		2: "STOP",
	}
	ChunkFlags_value = map[string]int32{
		"NONE":  0,
		"START": 1,
		"STOP":  2,
	}
)

func (x ChunkFlags) Enum() *ChunkFlags {
	p := new(ChunkFlags)
	*p = x
	return p
}

func (x ChunkFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[1].Descriptor()
}

func (ChunkFlags) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[1]
}

func (x ChunkFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkFlags.Descriptor instead.
func (ChunkFlags) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{1}
}

type OrderBy int32

const (
	OrderBy_UPDATEDTIME OrderBy = 0
	OrderBy_CREATEDTIME OrderBy = 1
	OrderBy_NAME        OrderBy = 2
	OrderBy_SIZE        OrderBy = 3
)

// Enum value maps for OrderBy.
var (
	OrderBy_name = map[int32]string{
		0: "UPDATEDTIME",
		1: "CREATEDTIME",
		2: "NAME",
		3: "SIZE",
	}
	OrderBy_value = map[string]int32{
		"UPDATEDTIME": 0,
		"CREATEDTIME": 1,
		"NAME":        2,
		"SIZE":        3,
	}
)

func (x OrderBy) Enum() *OrderBy {
	p := new(OrderBy)
	*p = x
	return p
}

func (x OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[2].Descriptor()
}

func (OrderBy) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[2]
}

func (x OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy.Descriptor instead.
func (OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{2}
}

type SecretType int32

const (
	SecretType_PASSWORD    SecretType = 0
	SecretType_CARD        SecretType = 1
	SecretType_NOTE        SecretType = 2
	SecretType_IDENTITY    SecretType = 3
	SecretType_KEYVALUES   SecretType = 4
	SecretType_KEYS        SecretType = 5
	SecretType_CERTIFICATE SecretType = 6
	SecretType_PRIVATEKEY  SecretType = 7
)

// Enum value maps for SecretType.
var (
	SecretType_name = map[int32]string{
		0: "PASSWORD",
		1: "CARD",
		2: "NOTE",
		3: "IDENTITY",
		4: "KEYVALUES",
		5: "KEYS",
		6: "CERTIFICATE",
		7: "PRIVATEKEY",
	}
	SecretType_value = map[string]int32{
		"PASSWORD":    0,
		"CARD":        1,
		"NOTE":        2,
		"IDENTITY":    3,
		"KEYVALUES":   4,
		"KEYS":        5,
		"CERTIFICATE": 6,
		"PRIVATEKEY":  7,
	}
)

func (x SecretType) Enum() *SecretType {
	p := new(SecretType)
	*p = x
	return p
}

func (x SecretType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[3].Descriptor()
}

func (SecretType) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[3]
}

func (x SecretType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretType.Descriptor instead.
func (SecretType) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{3}
}

type AllowedPinOp int32

const (
	AllowedPinOp_Dummy                AllowedPinOp = 0 //this is just to make sure that the enum starts from 0
	AllowedPinOp_PinOpGetMetaFromPath AllowedPinOp = 17
	AllowedPinOp_PinOpGetChunk        AllowedPinOp = 21
	AllowedPinOp_PinOpListFiles       AllowedPinOp = 25
	AllowedPinOp_PinOpCopyFile        AllowedPinOp = 52
	AllowedPinOp_PinOpStartWrite      AllowedPinOp = 22
	AllowedPinOp_PinOpPutChunk        AllowedPinOp = 23
	AllowedPinOp_PinOpFinalizeWrite   AllowedPinOp = 24
	AllowedPinOp_PinOpResetVersion    AllowedPinOp = 66
	AllowedPinOp_PinOpMoveFile        AllowedPinOp = 50
	AllowedPinOp_PinOpRemoveFile      AllowedPinOp = 55
	AllowedPinOp_PinOpCreateFolder    AllowedPinOp = 30
	AllowedPinOp_PinOpMoveFolder      AllowedPinOp = 51
	AllowedPinOp_PinOpRemoveFolder    AllowedPinOp = 56
	// control operations
	AllowedPinOp_PinOpAddPin    AllowedPinOp = 15
	AllowedPinOp_PinOpUpdatePin AllowedPinOp = 84
	AllowedPinOp_PinOpDeletePin AllowedPinOp = 54
	AllowedPinOp_PinOpListPins  AllowedPinOp = 91
)

// Enum value maps for AllowedPinOp.
var (
	AllowedPinOp_name = map[int32]string{
		0:  "Dummy",
		17: "PinOpGetMetaFromPath",
		21: "PinOpGetChunk",
		25: "PinOpListFiles",
		52: "PinOpCopyFile",
		22: "PinOpStartWrite",
		23: "PinOpPutChunk",
		24: "PinOpFinalizeWrite",
		66: "PinOpResetVersion",
		50: "PinOpMoveFile",
		55: "PinOpRemoveFile",
		30: "PinOpCreateFolder",
		51: "PinOpMoveFolder",
		56: "PinOpRemoveFolder",
		15: "PinOpAddPin",
		84: "PinOpUpdatePin",
		54: "PinOpDeletePin",
		91: "PinOpListPins",
	}
	AllowedPinOp_value = map[string]int32{
		"Dummy":                0,
		"PinOpGetMetaFromPath": 17,
		"PinOpGetChunk":        21,
		"PinOpListFiles":       25,
		"PinOpCopyFile":        52,
		"PinOpStartWrite":      22,
		"PinOpPutChunk":        23,
		"PinOpFinalizeWrite":   24,
		"PinOpResetVersion":    66,
		"PinOpMoveFile":        50,
		"PinOpRemoveFile":      55,
		"PinOpCreateFolder":    30,
		"PinOpMoveFolder":      51,
		"PinOpRemoveFolder":    56,
		"PinOpAddPin":          15,
		"PinOpUpdatePin":       84,
		"PinOpDeletePin":       54,
		"PinOpListPins":        91,
	}
)

func (x AllowedPinOp) Enum() *AllowedPinOp {
	p := new(AllowedPinOp)
	*p = x
	return p
}

func (x AllowedPinOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedPinOp) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[4].Descriptor()
}

func (AllowedPinOp) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[4]
}

func (x AllowedPinOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedPinOp.Descriptor instead.
func (AllowedPinOp) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{4}
}

type ClientType int32

const (
	ClientType_APP     ClientType = 0
	ClientType_BROWSER ClientType = 1
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0: "APP",
		1: "BROWSER",
	}
	ClientType_value = map[string]int32{
		"APP":     0,
		"BROWSER": 1,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[5].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[5]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{5}
}

type Op int32

const (
	Op_OpAddUser                Op = 0
	Op_OpRemoveUser             Op = 2
	Op_OpPasswordReset          Op = 3
	Op_OpChangePassword         Op = 4
	Op_OpInitiatePayment        Op = 6
	Op_OpInviteUser             Op = 9
	Op_OpGetUser                Op = 10
	Op_OpListUsers              Op = 11
	Op_OpRemoveOrganization     Op = 12
	Op_OpVerifyOrganization     Op = 13
	Op_OpGetOrganization        Op = 14
	Op_OpAddPin                 Op = 15
	Op_OPDeletePin              Op = 54
	Op_OpVerifyUser             Op = 16
	Op_OpGetMetaFromPath        Op = 17
	Op_OpFileLock               Op = 19
	Op_OpFileUnlock             Op = 20
	Op_OpGetChunk               Op = 21
	Op_OpStartWrite             Op = 22
	Op_OpPutChunk               Op = 23
	Op_OpFinalizeWrite          Op = 24
	Op_OpListFiles              Op = 25
	Op_OpRemove                 Op = 26
	Op_OpCopy                   Op = 27
	Op_OpMove                   Op = 28
	Op_OpGetFolder              Op = 29
	Op_OpCreateFolder           Op = 30
	Op_OpCreateSnapshot         Op = 31
	Op_OpVerifyPayment          Op = 32
	Op_OpGetSecret              Op = 33
	Op_OpAddSecret              Op = 34
	Op_OpRemoveSecret           Op = 35
	Op_OpUpdateSecret           Op = 36
	Op_OpListSecrets            Op = 37
	Op_OpQuickListSecrets       Op = 87
	Op_OpListSecretSubkeys      Op = 38
	Op_OpUndeleteSecret         Op = 39
	Op_OpDestroySecret          Op = 40
	Op_OpAddRole                Op = 41
	Op_OpRemoveRole             Op = 42
	Op_OpUpdateRole             Op = 43
	Op_OpListRoles              Op = 44
	Op_OpGetRole                Op = 81
	Op_OpIsOperationAllowed     Op = 49
	Op_OpListTeams              Op = 45
	Op_OpAddTeam                Op = 46
	Op_OpRemoveTeam             Op = 47
	Op_OpUpdateTeam             Op = 48
	Op_OpGetTeam                Op = 80
	Op_OpMoveFile               Op = 50
	Op_OpMoveFolder             Op = 51
	Op_OpCopyFile               Op = 52
	Op_OpCopyFolder             Op = 53
	Op_OpRestoreVersion         Op = 82
	Op_OpRemoveFile             Op = 55
	Op_OpRemoveFolder           Op = 56
	Op_OpUntrashFile            Op = 57
	Op_OpUntrashFolder          Op = 58
	Op_OpUndoStartWrite         Op = 59
	Op_OpDetachClonedFolder     Op = 60
	Op_OpGetProfileFileMeta     Op = 69
	Op_OpRenameFile             Op = 62
	Op_OpRenameFolder           Op = 63
	Op_OpList                   Op = 64
	Op_OpAuditLogMessage        Op = 65
	Op_OpResetVersion           Op = 66
	Op_OpSetUser                Op = 67
	Op_OpFinalizeProfileWrite   Op = 68
	Op_OpGetUserType            Op = 71
	Op_OpGetRandomBytes         Op = 72
	Op_OpShare                  Op = 73
	Op_OpUnshare                Op = 74
	Op_OpUpdateShare            Op = 75
	Op_OpListShares             Op = 76
	Op_OpResetTOTP              Op = 77
	Op_OpSetRolesTeamsToUser    Op = 83
	Op_OpUpdatePinOps           Op = 84
	Op_OpGetRolesAndTeamsOfUser Op = 86
	Op_OpVerifyAuditLogMeta     Op = 88
	Op_OpGetAuditLog            Op = 89
	Op_OpDeleteAuditLog         Op = 90
	Op_OpListPins               Op = 91
)

// Enum value maps for Op.
var (
	Op_name = map[int32]string{
		0:  "OpAddUser",
		2:  "OpRemoveUser",
		3:  "OpPasswordReset",
		4:  "OpChangePassword",
		6:  "OpInitiatePayment",
		9:  "OpInviteUser",
		10: "OpGetUser",
		11: "OpListUsers",
		12: "OpRemoveOrganization",
		13: "OpVerifyOrganization",
		14: "OpGetOrganization",
		15: "OpAddPin",
		54: "OPDeletePin",
		16: "OpVerifyUser",
		17: "OpGetMetaFromPath",
		19: "OpFileLock",
		20: "OpFileUnlock",
		21: "OpGetChunk",
		22: "OpStartWrite",
		23: "OpPutChunk",
		24: "OpFinalizeWrite",
		25: "OpListFiles",
		26: "OpRemove",
		27: "OpCopy",
		28: "OpMove",
		29: "OpGetFolder",
		30: "OpCreateFolder",
		31: "OpCreateSnapshot",
		32: "OpVerifyPayment",
		33: "OpGetSecret",
		34: "OpAddSecret",
		35: "OpRemoveSecret",
		36: "OpUpdateSecret",
		37: "OpListSecrets",
		87: "OpQuickListSecrets",
		38: "OpListSecretSubkeys",
		39: "OpUndeleteSecret",
		40: "OpDestroySecret",
		41: "OpAddRole",
		42: "OpRemoveRole",
		43: "OpUpdateRole",
		44: "OpListRoles",
		81: "OpGetRole",
		49: "OpIsOperationAllowed",
		45: "OpListTeams",
		46: "OpAddTeam",
		47: "OpRemoveTeam",
		48: "OpUpdateTeam",
		80: "OpGetTeam",
		50: "OpMoveFile",
		51: "OpMoveFolder",
		52: "OpCopyFile",
		53: "OpCopyFolder",
		82: "OpRestoreVersion",
		55: "OpRemoveFile",
		56: "OpRemoveFolder",
		57: "OpUntrashFile",
		58: "OpUntrashFolder",
		59: "OpUndoStartWrite",
		60: "OpDetachClonedFolder",
		69: "OpGetProfileFileMeta",
		62: "OpRenameFile",
		63: "OpRenameFolder",
		64: "OpList",
		65: "OpAuditLogMessage",
		66: "OpResetVersion",
		67: "OpSetUser",
		68: "OpFinalizeProfileWrite",
		71: "OpGetUserType",
		72: "OpGetRandomBytes",
		73: "OpShare",
		74: "OpUnshare",
		75: "OpUpdateShare",
		76: "OpListShares",
		77: "OpResetTOTP",
		83: "OpSetRolesTeamsToUser",
		84: "OpUpdatePinOps",
		86: "OpGetRolesAndTeamsOfUser",
		88: "OpVerifyAuditLogMeta",
		89: "OpGetAuditLog",
		90: "OpDeleteAuditLog",
		91: "OpListPins",
	}
	Op_value = map[string]int32{
		"OpAddUser":                0,
		"OpRemoveUser":             2,
		"OpPasswordReset":          3,
		"OpChangePassword":         4,
		"OpInitiatePayment":        6,
		"OpInviteUser":             9,
		"OpGetUser":                10,
		"OpListUsers":              11,
		"OpRemoveOrganization":     12,
		"OpVerifyOrganization":     13,
		"OpGetOrganization":        14,
		"OpAddPin":                 15,
		"OPDeletePin":              54,
		"OpVerifyUser":             16,
		"OpGetMetaFromPath":        17,
		"OpFileLock":               19,
		"OpFileUnlock":             20,
		"OpGetChunk":               21,
		"OpStartWrite":             22,
		"OpPutChunk":               23,
		"OpFinalizeWrite":          24,
		"OpListFiles":              25,
		"OpRemove":                 26,
		"OpCopy":                   27,
		"OpMove":                   28,
		"OpGetFolder":              29,
		"OpCreateFolder":           30,
		"OpCreateSnapshot":         31,
		"OpVerifyPayment":          32,
		"OpGetSecret":              33,
		"OpAddSecret":              34,
		"OpRemoveSecret":           35,
		"OpUpdateSecret":           36,
		"OpListSecrets":            37,
		"OpQuickListSecrets":       87,
		"OpListSecretSubkeys":      38,
		"OpUndeleteSecret":         39,
		"OpDestroySecret":          40,
		"OpAddRole":                41,
		"OpRemoveRole":             42,
		"OpUpdateRole":             43,
		"OpListRoles":              44,
		"OpGetRole":                81,
		"OpIsOperationAllowed":     49,
		"OpListTeams":              45,
		"OpAddTeam":                46,
		"OpRemoveTeam":             47,
		"OpUpdateTeam":             48,
		"OpGetTeam":                80,
		"OpMoveFile":               50,
		"OpMoveFolder":             51,
		"OpCopyFile":               52,
		"OpCopyFolder":             53,
		"OpRestoreVersion":         82,
		"OpRemoveFile":             55,
		"OpRemoveFolder":           56,
		"OpUntrashFile":            57,
		"OpUntrashFolder":          58,
		"OpUndoStartWrite":         59,
		"OpDetachClonedFolder":     60,
		"OpGetProfileFileMeta":     69,
		"OpRenameFile":             62,
		"OpRenameFolder":           63,
		"OpList":                   64,
		"OpAuditLogMessage":        65,
		"OpResetVersion":           66,
		"OpSetUser":                67,
		"OpFinalizeProfileWrite":   68,
		"OpGetUserType":            71,
		"OpGetRandomBytes":         72,
		"OpShare":                  73,
		"OpUnshare":                74,
		"OpUpdateShare":            75,
		"OpListShares":             76,
		"OpResetTOTP":              77,
		"OpSetRolesTeamsToUser":    83,
		"OpUpdatePinOps":           84,
		"OpGetRolesAndTeamsOfUser": 86,
		"OpVerifyAuditLogMeta":     88,
		"OpGetAuditLog":            89,
		"OpDeleteAuditLog":         90,
		"OpListPins":               91,
	}
)

func (x Op) Enum() *Op {
	p := new(Op)
	*p = x
	return p
}

func (x Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[6].Descriptor()
}

func (Op) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[6]
}

func (x Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op.Descriptor instead.
func (Op) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{6}
}

type ListType int32

const (
	ListType_Chunks          ListType = 0
	ListType_FilesAndFolders ListType = 1
	ListType_Secrets         ListType = 2
	ListType_Roles           ListType = 3
	ListType_Teams           ListType = 4
	ListType_Users           ListType = 5
	ListType_AuditLogs       ListType = 6 // Pins = 7;//it returns all the pins created by specific user
)

// Enum value maps for ListType.
var (
	ListType_name = map[int32]string{
		0: "Chunks",
		1: "FilesAndFolders",
		2: "Secrets",
		3: "Roles",
		4: "Teams",
		5: "Users",
		6: "AuditLogs",
	}
	ListType_value = map[string]int32{
		"Chunks":          0,
		"FilesAndFolders": 1,
		"Secrets":         2,
		"Roles":           3,
		"Teams":           4,
		"Users":           5,
		"AuditLogs":       6,
	}
)

func (x ListType) Enum() *ListType {
	p := new(ListType)
	*p = x
	return p
}

func (x ListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[7].Descriptor()
}

func (ListType) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[7]
}

func (x ListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListType.Descriptor instead.
func (ListType) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{7}
}

type TypeOfPath int32

const (
	TypeOfPath_TShareUser TypeOfPath = 0
	TypeOfPath_TFolder    TypeOfPath = 1
	TypeOfPath_TShareTeam TypeOfPath = 2
)

// Enum value maps for TypeOfPath.
var (
	TypeOfPath_name = map[int32]string{
		0: "TShareUser",
		1: "TFolder",
		2: "TShareTeam",
	}
	TypeOfPath_value = map[string]int32{
		"TShareUser": 0,
		"TFolder":    1,
		"TShareTeam": 2,
	}
)

func (x TypeOfPath) Enum() *TypeOfPath {
	p := new(TypeOfPath)
	*p = x
	return p
}

func (x TypeOfPath) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeOfPath) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[8].Descriptor()
}

func (TypeOfPath) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[8]
}

func (x TypeOfPath) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeOfPath.Descriptor instead.
func (TypeOfPath) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{8}
}

type Action int32

const (
	Action_ALLOW Action = 0
	Action_DENY  Action = 1
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ALLOW",
		1: "DENY",
	}
	Action_value = map[string]int32{
		"ALLOW": 0,
		"DENY":  1,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[9].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[9]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{9}
}

type SubjectType int32

const (
	SubjectType_USER SubjectType = 0
	SubjectType_TEAM SubjectType = 1
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0: "USER",
		1: "TEAM",
	}
	SubjectType_value = map[string]int32{
		"USER": 0,
		"TEAM": 1,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[10].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[10]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{10}
}

type AddUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// optional Plan plan = 4;
	Organization *string `protobuf:"bytes,5,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	Token        *string `protobuf:"bytes,6,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (x *AddUser) Reset() {
	*x = AddUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUser) ProtoMessage() {}

func (x *AddUser) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUser.ProtoReflect.Descriptor instead.
func (*AddUser) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0}
}

func (x *AddUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddUser) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddUser) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *AddUser) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type AddPin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email  string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Pin    string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	Client string `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	// there has to another vec<allowed ops>
	AllowedOps []AllowedPinOp `protobuf:"varint,4,rep,packed,name=allowed_ops,json=allowedOps,proto3,enum=request.AllowedPinOp" json:"allowed_ops,omitempty"` //this is the list of operations that this pin can do
	Ttl        uint64         `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                                  //this is the time to live for this pin in seconds
	// the below are to support new usecases
	Name           *string  `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	TokenData      []byte   `protobuf:"bytes,7,opt,name=token_data,json=tokenData,proto3,oneof" json:"token_data,omitempty"`
	AllowedObjects [][]byte `protobuf:"bytes,8,rep,name=allowed_objects,json=allowedObjects,proto3" json:"allowed_objects,omitempty"` //Vec<ACL> should be empty if name isn't mentioned
}

func (x *AddPin) Reset() {
	*x = AddPin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPin) ProtoMessage() {}

func (x *AddPin) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPin.ProtoReflect.Descriptor instead.
func (*AddPin) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{1}
}

func (x *AddPin) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddPin) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *AddPin) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *AddPin) GetAllowedOps() []AllowedPinOp {
	if x != nil {
		return x.AllowedOps
	}
	return nil
}

func (x *AddPin) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *AddPin) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AddPin) GetTokenData() []byte {
	if x != nil {
		return x.TokenData
	}
	return nil
}

func (x *AddPin) GetAllowedObjects() [][]byte {
	if x != nil {
		return x.AllowedObjects
	}
	return nil
}

type UpdatePinOps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// string pin = 2;
	PinName        string         `protobuf:"bytes,2,opt,name=pin_name,json=pinName,proto3" json:"pin_name,omitempty"` //this pin name will be unique and updating pin ops is allowed only if the pin has name
	Data           []byte         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	AllowedOps     []AllowedPinOp `protobuf:"varint,4,rep,packed,name=allowed_ops,json=allowedOps,proto3,enum=request.AllowedPinOp" json:"allowed_ops,omitempty"`
	AllowedObjects [][]byte       `protobuf:"bytes,5,rep,name=allowed_objects,json=allowedObjects,proto3" json:"allowed_objects,omitempty"`
}

func (x *UpdatePinOps) Reset() {
	*x = UpdatePinOps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePinOps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePinOps) ProtoMessage() {}

func (x *UpdatePinOps) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePinOps.ProtoReflect.Descriptor instead.
func (*UpdatePinOps) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatePinOps) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdatePinOps) GetPinName() string {
	if x != nil {
		return x.PinName
	}
	return ""
}

func (x *UpdatePinOps) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdatePinOps) GetAllowedOps() []AllowedPinOp {
	if x != nil {
		return x.AllowedOps
	}
	return nil
}

func (x *UpdatePinOps) GetAllowedObjects() [][]byte {
	if x != nil {
		return x.AllowedObjects
	}
	return nil
}

type DeletePin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// string pin = 2;
	// string pin_name=2;
	IdSentToClient []byte `protobuf:"bytes,2,opt,name=id_sent_to_client,json=idSentToClient,proto3" json:"id_sent_to_client,omitempty"`
	Data           []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeletePin) Reset() {
	*x = DeletePin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePin) ProtoMessage() {}

func (x *DeletePin) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePin.ProtoReflect.Descriptor instead.
func (*DeletePin) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{3}
}

func (x *DeletePin) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DeletePin) GetIdSentToClient() []byte {
	if x != nil {
		return x.IdSentToClient
	}
	return nil
}

func (x *DeletePin) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Totp     string `protobuf:"bytes,2,opt,name=totp,proto3" json:"totp,omitempty"`
	EmailOtp string `protobuf:"bytes,3,opt,name=email_otp,json=emailOtp,proto3" json:"email_otp,omitempty"`
}

func (x *VerifyUser) Reset() {
	*x = VerifyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUser) ProtoMessage() {}

func (x *VerifyUser) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUser.ProtoReflect.Descriptor instead.
func (*VerifyUser) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{4}
}

func (x *VerifyUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *VerifyUser) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

func (x *VerifyUser) GetEmailOtp() string {
	if x != nil {
		return x.EmailOtp
	}
	return ""
}

// TODO: Chinnarao + Pavan
type RemoveUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Organization *string `protobuf:"bytes,5,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	Totp         string  `protobuf:"bytes,2,opt,name=totp,proto3" json:"totp,omitempty"`
}

func (x *RemoveUser) Reset() {
	*x = RemoveUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUser) ProtoMessage() {}

func (x *RemoveUser) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUser.ProtoReflect.Descriptor instead.
func (*RemoveUser) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RemoveUser) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *RemoveUser) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

// TODO Chinnarao + pavan
type PasswordReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Organization *string `protobuf:"bytes,5,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	Totp         string  `protobuf:"bytes,2,opt,name=totp,proto3" json:"totp,omitempty"`
}

func (x *PasswordReset) Reset() {
	*x = PasswordReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordReset) ProtoMessage() {}

func (x *PasswordReset) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordReset.ProtoReflect.Descriptor instead.
func (*PasswordReset) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{6}
}

func (x *PasswordReset) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PasswordReset) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *PasswordReset) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

// TODO ChinnRao + Pavan
type ChangePassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// optional string organization = 5;
	OldPassword *string `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3,oneof" json:"old_password,omitempty"`
	NewPassword string  `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	Totp        *string `protobuf:"bytes,4,opt,name=totp,proto3,oneof" json:"totp,omitempty"`   //this will be present for already signed in users,for forget password(through link) it will be NOne
	Token       []byte  `protobuf:"bytes,5,opt,name=token,proto3,oneof" json:"token,omitempty"` //this will be none for already signed in users,but some() for forgetpassword
}

func (x *ChangePassword) Reset() {
	*x = ChangePassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePassword) ProtoMessage() {}

func (x *ChangePassword) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePassword.ProtoReflect.Descriptor instead.
func (*ChangePassword) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{7}
}

func (x *ChangePassword) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ChangePassword) GetOldPassword() string {
	if x != nil && x.OldPassword != nil {
		return *x.OldPassword
	}
	return ""
}

func (x *ChangePassword) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *ChangePassword) GetTotp() string {
	if x != nil && x.Totp != nil {
		return *x.Totp
	}
	return ""
}

func (x *ChangePassword) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type AddOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	Password     string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"` // optional Plan plan = 4;
}

func (x *AddOrganization) Reset() {
	*x = AddOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrganization) ProtoMessage() {}

func (x *AddOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrganization.ProtoReflect.Descriptor instead.
func (*AddOrganization) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{8}
}

func (x *AddOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddOrganization) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *AddOrganization) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VerifyOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	Totp         string `protobuf:"bytes,3,opt,name=totp,proto3" json:"totp,omitempty"`
	EmailOtp     string `protobuf:"bytes,4,opt,name=email_otp,json=emailOtp,proto3" json:"email_otp,omitempty"`
}

func (x *VerifyOrganization) Reset() {
	*x = VerifyOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOrganization) ProtoMessage() {}

func (x *VerifyOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOrganization.ProtoReflect.Descriptor instead.
func (*VerifyOrganization) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *VerifyOrganization) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *VerifyOrganization) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

func (x *VerifyOrganization) GetEmailOtp() string {
	if x != nil {
		return x.EmailOtp
	}
	return ""
}

// TODO Chinnarao + Pavan
type RemoveOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	Totp         string `protobuf:"bytes,3,opt,name=totp,proto3" json:"totp,omitempty"`
}

func (x *RemoveOrganization) Reset() {
	*x = RemoveOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOrganization) ProtoMessage() {}

func (x *RemoveOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOrganization.ProtoReflect.Descriptor instead.
func (*RemoveOrganization) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RemoveOrganization) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *RemoveOrganization) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

// TODO Chinnarao + Pavan
type GetOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetOrganization) Reset() {
	*x = GetOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganization) ProtoMessage() {}

func (x *GetOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganization.ProtoReflect.Descriptor instead.
func (*GetOrganization) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ResetTOTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetTOTP) Reset() {
	*x = ResetTOTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetTOTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetTOTP) ProtoMessage() {}

func (x *ResetTOTP) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetTOTP.ProtoReflect.Descriptor instead.
func (*ResetTOTP) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{12}
}

type InviteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"` // UserMode mode = 3;
}

func (x *InviteUser) Reset() {
	*x = InviteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUser) ProtoMessage() {}

func (x *InviteUser) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUser.ProtoReflect.Descriptor instead.
func (*InviteUser) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{13}
}

func (x *InviteUser) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *InviteUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type InitiatePayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email             string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Organization      *string `protobuf:"bytes,2,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	Plan              Plan    `protobuf:"varint,3,opt,name=plan,proto3,enum=request.Plan" json:"plan,omitempty"`
	AdditionalStorage *uint32 `protobuf:"varint,4,opt,name=additional_storage,json=additionalStorage,proto3,oneof" json:"additional_storage,omitempty"` //additonal storage size in GB above the plan
}

func (x *InitiatePayment) Reset() {
	*x = InitiatePayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiatePayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatePayment) ProtoMessage() {}

func (x *InitiatePayment) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatePayment.ProtoReflect.Descriptor instead.
func (*InitiatePayment) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{14}
}

func (x *InitiatePayment) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InitiatePayment) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *InitiatePayment) GetPlan() Plan {
	if x != nil {
		return x.Plan
	}
	return Plan_Free
}

func (x *InitiatePayment) GetAdditionalStorage() uint32 {
	if x != nil && x.AdditionalStorage != nil {
		return *x.AdditionalStorage
	}
	return 0
}

// TODO Manoj + Pavan
type VerifyPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *VerifyPayment) Reset() {
	*x = VerifyPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPayment) ProtoMessage() {}

func (x *VerifyPayment) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPayment.ProtoReflect.Descriptor instead.
func (*VerifyPayment) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{15}
}

func (x *VerifyPayment) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type SignIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Organization *string `protobuf:"bytes,6,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	Password     *string `protobuf:"bytes,2,opt,name=password,proto3,oneof" json:"password,omitempty"`
	Totp         *string `protobuf:"bytes,3,opt,name=totp,proto3,oneof" json:"totp,omitempty"`
	Pin          *string `protobuf:"bytes,7,opt,name=pin,proto3,oneof" json:"pin,omitempty"`
	Data         []byte  `protobuf:"bytes,4,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *SignIn) Reset() {
	*x = SignIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignIn) ProtoMessage() {}

func (x *SignIn) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignIn.ProtoReflect.Descriptor instead.
func (*SignIn) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{16}
}

func (x *SignIn) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SignIn) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *SignIn) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SignIn) GetTotp() string {
	if x != nil && x.Totp != nil {
		return *x.Totp
	}
	return ""
}

func (x *SignIn) GetPin() string {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return ""
}

func (x *SignIn) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// TODO Manaoj + Pavan
type SignOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SignOut) Reset() {
	*x = SignOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOut) ProtoMessage() {}

func (x *SignOut) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOut.ProtoReflect.Descriptor instead.
func (*SignOut) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{17}
}

func (x *SignOut) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// TODO Chinnarao + Pavan
type GetUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetUser) Reset() {
	*x = GetUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUser) ProtoMessage() {}

func (x *GetUser) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUser.ProtoReflect.Descriptor instead.
func (*GetUser) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{18}
}

func (x *GetUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetFileHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string name = 1;
	Uuid    []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Trashed bool   `protobuf:"varint,2,opt,name=trashed,proto3" json:"trashed,omitempty"`
}

func (x *GetFileHead) Reset() {
	*x = GetFileHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileHead) ProtoMessage() {}

func (x *GetFileHead) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileHead.ProtoReflect.Descriptor instead.
func (*GetFileHead) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{19}
}

func (x *GetFileHead) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *GetFileHead) GetTrashed() bool {
	if x != nil {
		return x.Trashed
	}
	return false
}

type Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags uint64 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Echo) Reset() {
	*x = Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo.ProtoReflect.Descriptor instead.
func (*Echo) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{20}
}

func (x *Echo) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Echo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //uuid
	Size   uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Key    []byte `protobuf:"bytes,7,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Iv     []byte `protobuf:"bytes,4,opt,name=iv,proto3,oneof" json:"iv,omitempty"` //only visible inside enclave remove while senindg to clients
	Hash   []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`   // sha256
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{21}
}

func (x *Chunk) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Chunk) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Chunk) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Chunk) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Chunk) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *Chunk) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type FileVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //random for non perm use snapshot id for perm
	Chunks       []*Chunk `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	CreationDate uint64   `protobuf:"varint,3,opt,name=creationDate,proto3" json:"creationDate,omitempty"` // bool is_perm = 4;
}

func (x *FileVersion) Reset() {
	*x = FileVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileVersion) ProtoMessage() {}

func (x *FileVersion) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileVersion.ProtoReflect.Descriptor instead.
func (*FileVersion) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{22}
}

func (x *FileVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileVersion) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *FileVersion) GetCreationDate() uint64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// string parent_folder = 2;
	ParentUuid       []byte         `protobuf:"bytes,2,opt,name=parent_uuid,json=parentUuid,proto3,oneof" json:"parent_uuid,omitempty"` //None for root
	Uuid             []byte         `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`                                     //ID
	Owner            string         `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	CreationDate     uint64         `protobuf:"varint,5,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	LastModifiedDate uint64         `protobuf:"varint,6,opt,name=lastModifiedDate,proto3" json:"lastModifiedDate,omitempty"`
	Versions         []*FileVersion `protobuf:"bytes,7,rep,name=versions,proto3" json:"versions,omitempty"` //30 limit
	CurrentVersion   *FileVersion   `protobuf:"bytes,8,opt,name=currentVersion,proto3" json:"currentVersion,omitempty"`
	// repeated FileVersion permVersions = 9; //30 limit
	IsLocked   bool     `protobuf:"varint,10,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	LockReason *string  `protobuf:"bytes,11,opt,name=lockReason,proto3,oneof" json:"lockReason,omitempty"`
	Tags       []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	Filesize   uint64   `protobuf:"varint,13,opt,name=filesize,proto3" json:"filesize,omitempty"`              //this is the size of the latest version.
	IsClone    bool     `protobuf:"varint,14,opt,name=is_clone,json=isClone,proto3" json:"is_clone,omitempty"` //TODO add ACL
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{23}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetParentUuid() []byte {
	if x != nil {
		return x.ParentUuid
	}
	return nil
}

func (x *File) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *File) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *File) GetCreationDate() uint64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *File) GetLastModifiedDate() uint64 {
	if x != nil {
		return x.LastModifiedDate
	}
	return 0
}

func (x *File) GetVersions() []*FileVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *File) GetCurrentVersion() *FileVersion {
	if x != nil {
		return x.CurrentVersion
	}
	return nil
}

func (x *File) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *File) GetLockReason() string {
	if x != nil && x.LockReason != nil {
		return *x.LockReason
	}
	return ""
}

func (x *File) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *File) GetFilesize() uint64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *File) GetIsClone() bool {
	if x != nil {
		return x.IsClone
	}
	return false
}

type FileLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *FileLock) Reset() {
	*x = FileLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLock) ProtoMessage() {}

func (x *FileLock) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLock.ProtoReflect.Descriptor instead.
func (*FileLock) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{24}
}

func (x *FileLock) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type FileUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *FileUnlock) Reset() {
	*x = FileUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUnlock) ProtoMessage() {}

func (x *FileUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUnlock.ProtoReflect.Descriptor instead.
func (*FileUnlock) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{25}
}

func (x *FileUnlock) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type GetChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionUuid  []byte     `protobuf:"bytes,1,opt,name=version_uuid,json=versionUuid,proto3" json:"version_uuid,omitempty"`
	Uuid         []byte     `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	FileFullPath string     `protobuf:"bytes,3,opt,name=file_full_path,json=fileFullPath,proto3" json:"file_full_path,omitempty"`
	Flag         ChunkFlags `protobuf:"varint,4,opt,name=flag,proto3,enum=request.ChunkFlags" json:"flag,omitempty"`
	// bytes file_uuid = 7;
	TypeOfPath TypeOfPath `protobuf:"varint,8,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"`
}

func (x *GetChunk) Reset() {
	*x = GetChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunk) ProtoMessage() {}

func (x *GetChunk) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunk.ProtoReflect.Descriptor instead.
func (*GetChunk) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{26}
}

func (x *GetChunk) GetVersionUuid() []byte {
	if x != nil {
		return x.VersionUuid
	}
	return nil
}

func (x *GetChunk) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *GetChunk) GetFileFullPath() string {
	if x != nil {
		return x.FileFullPath
	}
	return ""
}

func (x *GetChunk) GetFlag() ChunkFlags {
	if x != nil {
		return x.Flag
	}
	return ChunkFlags_NONE
}

func (x *GetChunk) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

type StartWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid             []byte     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Filesize         uint64     `protobuf:"varint,2,opt,name=filesize,proto3" json:"filesize,omitempty"`
	ParentPath       string     `protobuf:"bytes,3,opt,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	Filename         *string    `protobuf:"bytes,4,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
	CompresstionType int32      `protobuf:"varint,5,opt,name=compresstion_type,json=compresstionType,proto3" json:"compresstion_type,omitempty"`
	ChunkSize        uint64     `protobuf:"varint,6,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	TypeOfPath       TypeOfPath `protobuf:"varint,8,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"`
}

func (x *StartWrite) Reset() {
	*x = StartWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWrite) ProtoMessage() {}

func (x *StartWrite) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWrite.ProtoReflect.Descriptor instead.
func (*StartWrite) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{27}
}

func (x *StartWrite) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *StartWrite) GetFilesize() uint64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *StartWrite) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *StartWrite) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *StartWrite) GetCompresstionType() int32 {
	if x != nil {
		return x.CompresstionType
	}
	return 0
}

func (x *StartWrite) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *StartWrite) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

type PutChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionUuid     []byte     `protobuf:"bytes,1,opt,name=version_uuid,json=versionUuid,proto3,oneof" json:"version_uuid,omitempty"`
	Uuid            []byte     `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	FileChunkOffset *uint64    `protobuf:"varint,3,opt,name=file_chunk_offset,json=fileChunkOffset,proto3,oneof" json:"file_chunk_offset,omitempty"`
	Data            []byte     `protobuf:"bytes,4,opt,name=data,proto3,oneof" json:"data,omitempty"`
	Hash            []byte     `protobuf:"bytes,5,opt,name=hash,proto3,oneof" json:"hash,omitempty"` //sha256
	Flag            ChunkFlags `protobuf:"varint,6,opt,name=flag,proto3,enum=request.ChunkFlags" json:"flag,omitempty"`
}

func (x *PutChunk) Reset() {
	*x = PutChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChunk) ProtoMessage() {}

func (x *PutChunk) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChunk.ProtoReflect.Descriptor instead.
func (*PutChunk) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{28}
}

func (x *PutChunk) GetVersionUuid() []byte {
	if x != nil {
		return x.VersionUuid
	}
	return nil
}

func (x *PutChunk) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *PutChunk) GetFileChunkOffset() uint64 {
	if x != nil && x.FileChunkOffset != nil {
		return *x.FileChunkOffset
	}
	return 0
}

func (x *PutChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PutChunk) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *PutChunk) GetFlag() ChunkFlags {
	if x != nil {
		return x.Flag
	}
	return ChunkFlags_NONE
}

type ResetVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	VersionId []byte `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *ResetVersion) Reset() {
	*x = ResetVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetVersion) ProtoMessage() {}

func (x *ResetVersion) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetVersion.ProtoReflect.Descriptor instead.
func (*ResetVersion) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{29}
}

func (x *ResetVersion) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ResetVersion) GetVersionId() []byte {
	if x != nil {
		return x.VersionId
	}
	return nil
}

type FinalizeWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        []byte  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` //this uuid of file
	VersionUuid []byte  `protobuf:"bytes,2,opt,name=version_uuid,json=versionUuid,proto3,oneof" json:"version_uuid,omitempty"`
	FileSize    *uint64 `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
}

func (x *FinalizeWrite) Reset() {
	*x = FinalizeWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeWrite) ProtoMessage() {}

func (x *FinalizeWrite) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeWrite.ProtoReflect.Descriptor instead.
func (*FinalizeWrite) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{30}
}

func (x *FinalizeWrite) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *FinalizeWrite) GetVersionUuid() []byte {
	if x != nil {
		return x.VersionUuid
	}
	return nil
}

func (x *FinalizeWrite) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type ListFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentUuid []byte  `protobuf:"bytes,1,opt,name=parent_uuid,json=parentUuid,proto3,oneof" json:"parent_uuid,omitempty"`
	SnapshotId *string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3,oneof" json:"snapshot_id,omitempty"`
	PageToken  []byte  `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Trashed    *bool   `protobuf:"varint,5,opt,name=trashed,proto3,oneof" json:"trashed,omitempty"` //this is some() in first request and non in subsequent requests
	// this pagetoken field will be none in the first request.
	PageSize *uint64  `protobuf:"varint,4,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
	OrderBy  *OrderBy `protobuf:"varint,6,opt,name=order_by,json=orderBy,proto3,enum=request.OrderBy,oneof" json:"order_by,omitempty"`
}

func (x *ListFiles) Reset() {
	*x = ListFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFiles) ProtoMessage() {}

func (x *ListFiles) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFiles.ProtoReflect.Descriptor instead.
func (*ListFiles) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{31}
}

func (x *ListFiles) GetParentUuid() []byte {
	if x != nil {
		return x.ParentUuid
	}
	return nil
}

func (x *ListFiles) GetSnapshotId() string {
	if x != nil && x.SnapshotId != nil {
		return *x.SnapshotId
	}
	return ""
}

func (x *ListFiles) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *ListFiles) GetTrashed() bool {
	if x != nil && x.Trashed != nil {
		return *x.Trashed
	}
	return false
}

func (x *ListFiles) GetPageSize() uint64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListFiles) GetOrderBy() OrderBy {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return OrderBy_UPDATEDTIME
}

type GetMetaFromPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Trashed    bool       `protobuf:"varint,2,opt,name=trashed,proto3" json:"trashed,omitempty"`
	TypeOfPath TypeOfPath `protobuf:"varint,3,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"`
}

func (x *GetMetaFromPath) Reset() {
	*x = GetMetaFromPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetaFromPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetaFromPath) ProtoMessage() {}

func (x *GetMetaFromPath) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetaFromPath.ProtoReflect.Descriptor instead.
func (*GetMetaFromPath) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{32}
}

func (x *GetMetaFromPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetMetaFromPath) GetTrashed() bool {
	if x != nil {
		return x.Trashed
	}
	return false
}

func (x *GetMetaFromPath) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

type GetProfileFileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProfileFileMeta) Reset() {
	*x = GetProfileFileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileFileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileFileMeta) ProtoMessage() {}

func (x *GetProfileFileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileFileMeta.ProtoReflect.Descriptor instead.
func (*GetProfileFileMeta) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{33}
}

func (x *GetProfileFileMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Manaoj + Pavan
type Remove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      []byte  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VersionId *string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"` //only non perm ones //will be snapshot id for folders
}

func (x *Remove) Reset() {
	*x = Remove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Remove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remove) ProtoMessage() {}

func (x *Remove) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remove.ProtoReflect.Descriptor instead.
func (*Remove) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{34}
}

func (x *Remove) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Remove) GetVersionId() string {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return ""
}

// Manaoj + Pavan
type Copy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        []byte  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DstUuid     []byte  `protobuf:"bytes,2,opt,name=dst_uuid,json=dstUuid,proto3" json:"dst_uuid,omitempty"`                    //must be folder
	KeepHistory *bool   `protobuf:"varint,3,opt,name=keep_history,json=keepHistory,proto3,oneof" json:"keep_history,omitempty"` //we have to do deep copy when true
	NewOwner    *string `protobuf:"bytes,4,opt,name=new_owner,json=newOwner,proto3,oneof" json:"new_owner,omitempty"`           //if not specified owner for dst files is signin user not original owner
}

func (x *Copy) Reset() {
	*x = Copy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Copy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Copy) ProtoMessage() {}

func (x *Copy) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Copy.ProtoReflect.Descriptor instead.
func (*Copy) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{35}
}

func (x *Copy) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Copy) GetDstUuid() []byte {
	if x != nil {
		return x.DstUuid
	}
	return nil
}

func (x *Copy) GetKeepHistory() bool {
	if x != nil && x.KeepHistory != nil {
		return *x.KeepHistory
	}
	return false
}

func (x *Copy) GetNewOwner() string {
	if x != nil && x.NewOwner != nil {
		return *x.NewOwner
	}
	return ""
}

// unlike move ,copy can have destination as root folder
type CopyFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// optional bytes dst_uuid = 2;
	NewOwner        *string    `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3,oneof" json:"new_owner,omitempty"`
	DestinationPath string     `protobuf:"bytes,4,opt,name=destination_path,json=destinationPath,proto3" json:"destination_path,omitempty"`
	TypeOfPath      TypeOfPath `protobuf:"varint,8,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"`
}

func (x *CopyFolder) Reset() {
	*x = CopyFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFolder) ProtoMessage() {}

func (x *CopyFolder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFolder.ProtoReflect.Descriptor instead.
func (*CopyFolder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{36}
}

func (x *CopyFolder) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *CopyFolder) GetNewOwner() string {
	if x != nil && x.NewOwner != nil {
		return *x.NewOwner
	}
	return ""
}

func (x *CopyFolder) GetDestinationPath() string {
	if x != nil {
		return x.DestinationPath
	}
	return ""
}

func (x *CopyFolder) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

type CopyFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFullPath          string     `protobuf:"bytes,1,opt,name=file_full_path,json=fileFullPath,proto3" json:"file_full_path,omitempty"` //with name
	DestinationParentPath string     `protobuf:"bytes,2,opt,name=destination_parent_path,json=destinationParentPath,proto3" json:"destination_parent_path,omitempty"`
	NewFileName           *string    `protobuf:"bytes,3,opt,name=new_file_name,json=newFileName,proto3,oneof" json:"new_file_name,omitempty"` //new name if any
	NewOwner              *string    `protobuf:"bytes,4,opt,name=new_owner,json=newOwner,proto3,oneof" json:"new_owner,omitempty"`
	VersionId             []byte     `protobuf:"bytes,5,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	TypeOfPath            TypeOfPath `protobuf:"varint,8,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"`
}

func (x *CopyFile) Reset() {
	*x = CopyFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFile) ProtoMessage() {}

func (x *CopyFile) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFile.ProtoReflect.Descriptor instead.
func (*CopyFile) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{37}
}

func (x *CopyFile) GetFileFullPath() string {
	if x != nil {
		return x.FileFullPath
	}
	return ""
}

func (x *CopyFile) GetDestinationParentPath() string {
	if x != nil {
		return x.DestinationParentPath
	}
	return ""
}

func (x *CopyFile) GetNewFileName() string {
	if x != nil && x.NewFileName != nil {
		return *x.NewFileName
	}
	return ""
}

func (x *CopyFile) GetNewOwner() string {
	if x != nil && x.NewOwner != nil {
		return *x.NewOwner
	}
	return ""
}

func (x *CopyFile) GetVersionId() []byte {
	if x != nil {
		return x.VersionId
	}
	return nil
}

func (x *CopyFile) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

type MoveFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFullPath          string  `protobuf:"bytes,1,opt,name=file_full_path,json=fileFullPath,proto3" json:"file_full_path,omitempty"`                            //with name
	DestinationParentPath string  `protobuf:"bytes,2,opt,name=destination_parent_path,json=destinationParentPath,proto3" json:"destination_parent_path,omitempty"` //only directory path
	NewFileName           *string `protobuf:"bytes,3,opt,name=new_file_name,json=newFileName,proto3,oneof" json:"new_file_name,omitempty"`                         //new name if any
	NewOwner              *string `protobuf:"bytes,4,opt,name=new_owner,json=newOwner,proto3,oneof" json:"new_owner,omitempty"`
}

func (x *MoveFile) Reset() {
	*x = MoveFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFile) ProtoMessage() {}

func (x *MoveFile) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFile.ProtoReflect.Descriptor instead.
func (*MoveFile) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{38}
}

func (x *MoveFile) GetFileFullPath() string {
	if x != nil {
		return x.FileFullPath
	}
	return ""
}

func (x *MoveFile) GetDestinationParentPath() string {
	if x != nil {
		return x.DestinationParentPath
	}
	return ""
}

func (x *MoveFile) GetNewFileName() string {
	if x != nil && x.NewFileName != nil {
		return *x.NewFileName
	}
	return ""
}

func (x *MoveFile) GetNewOwner() string {
	if x != nil && x.NewOwner != nil {
		return *x.NewOwner
	}
	return ""
}

type MoveFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFullPath          string  `protobuf:"bytes,1,opt,name=file_full_path,json=fileFullPath,proto3" json:"file_full_path,omitempty"` //with name
	DestinationParentPath string  `protobuf:"bytes,2,opt,name=destination_parent_path,json=destinationParentPath,proto3" json:"destination_parent_path,omitempty"`
	NewFileName           *string `protobuf:"bytes,3,opt,name=new_file_name,json=newFileName,proto3,oneof" json:"new_file_name,omitempty"` //new name if any
	NewOwner              *string `protobuf:"bytes,4,opt,name=new_owner,json=newOwner,proto3,oneof" json:"new_owner,omitempty"`
}

func (x *MoveFolder) Reset() {
	*x = MoveFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFolder) ProtoMessage() {}

func (x *MoveFolder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFolder.ProtoReflect.Descriptor instead.
func (*MoveFolder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{39}
}

func (x *MoveFolder) GetFileFullPath() string {
	if x != nil {
		return x.FileFullPath
	}
	return ""
}

func (x *MoveFolder) GetDestinationParentPath() string {
	if x != nil {
		return x.DestinationParentPath
	}
	return ""
}

func (x *MoveFolder) GetNewFileName() string {
	if x != nil && x.NewFileName != nil {
		return *x.NewFileName
	}
	return ""
}

func (x *MoveFolder) GetNewOwner() string {
	if x != nil && x.NewOwner != nil {
		return *x.NewOwner
	}
	return ""
}

type Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFolder bool   `protobuf:"varint,1,opt,name=is_folder,json=isFolder,proto3" json:"is_folder,omitempty"`
	Uuid     []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Child) Reset() {
	*x = Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Child) ProtoMessage() {}

func (x *Child) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Child.ProtoReflect.Descriptor instead.
func (*Child) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{40}
}

func (x *Child) GetIsFolder() bool {
	if x != nil {
		return x.IsFolder
	}
	return false
}

func (x *Child) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type FolderSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// repeated Child children = 2; // abs_path of files + folders
	UuidOfClone  []byte `protobuf:"bytes,2,opt,name=uuid_of_clone,json=uuidOfClone,proto3" json:"uuid_of_clone,omitempty"`
	CreationDate uint64 `protobuf:"varint,3,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
}

func (x *FolderSnapshot) Reset() {
	*x = FolderSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderSnapshot) ProtoMessage() {}

func (x *FolderSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderSnapshot.ProtoReflect.Descriptor instead.
func (*FolderSnapshot) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{41}
}

func (x *FolderSnapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FolderSnapshot) GetUuidOfClone() []byte {
	if x != nil {
		return x.UuidOfClone
	}
	return nil
}

func (x *FolderSnapshot) GetCreationDate() uint64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

type Folder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      []byte            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name      string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Snapshots []*FolderSnapshot `protobuf:"bytes,2,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	// optional repeated is not working,so added another attribute that helps to identify whether it is clone of original folder meta or actual folder meta
	IsClone      bool   `protobuf:"varint,6,opt,name=is_clone,json=isClone,proto3" json:"is_clone,omitempty"` //TODO:if is_clone is true then snapshots has to be empty(make sure to check this in code)
	CreationDate uint64 `protobuf:"varint,3,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	// repeated Child children = 4; //abs_path files + folders
	ParentUuid       []byte `protobuf:"bytes,7,opt,name=parent_uuid,json=parentUuid,proto3,oneof" json:"parent_uuid,omitempty"`
	LastModifiedDate uint64 `protobuf:"varint,4,opt,name=last_modifiedDate,json=lastModifiedDate,proto3" json:"last_modifiedDate,omitempty"` //this field is none for folders in root.
}

func (x *Folder) Reset() {
	*x = Folder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Folder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Folder) ProtoMessage() {}

func (x *Folder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Folder.ProtoReflect.Descriptor instead.
func (*Folder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{42}
}

func (x *Folder) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Folder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Folder) GetSnapshots() []*FolderSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *Folder) GetIsClone() bool {
	if x != nil {
		return x.IsClone
	}
	return false
}

func (x *Folder) GetCreationDate() uint64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Folder) GetParentUuid() []byte {
	if x != nil {
		return x.ParentUuid
	}
	return nil
}

func (x *Folder) GetLastModifiedDate() uint64 {
	if x != nil {
		return x.LastModifiedDate
	}
	return 0
}

// Manoj + Pavan
type GetFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetFolder) Reset() {
	*x = GetFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFolder) ProtoMessage() {}

func (x *GetFolder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFolder.ProtoReflect.Descriptor instead.
func (*GetFolder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{43}
}

func (x *GetFolder) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type KeyValMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute string `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValMapping) Reset() {
	*x = KeyValMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValMapping) ProtoMessage() {}

func (x *KeyValMapping) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValMapping.ProtoReflect.Descriptor instead.
func (*KeyValMapping) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{44}
}

func (x *KeyValMapping) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *KeyValMapping) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrToValue []*KeyValMapping `protobuf:"bytes,1,rep,name=attr_to_value,json=attrToValue,proto3" json:"attr_to_value,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{45}
}

func (x *Policy) GetAttrToValue() []*KeyValMapping {
	if x != nil {
		return x.AttrToValue
	}
	return nil
}

type CreateFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ParentPath string     `protobuf:"bytes,2,opt,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	TypeOfPath TypeOfPath `protobuf:"varint,8,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"`
	Policy     *Policy    `protobuf:"bytes,9,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *CreateFolder) Reset() {
	*x = CreateFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolder) ProtoMessage() {}

func (x *CreateFolder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolder.ProtoReflect.Descriptor instead.
func (*CreateFolder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{46}
}

func (x *CreateFolder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFolder) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *CreateFolder) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

func (x *CreateFolder) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type GetPolicyFromName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	TypeOfPath TypeOfPath `protobuf:"varint,2,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"` //this attribute is for getting policy of a shared folder in root.
}

func (x *GetPolicyFromName) Reset() {
	*x = GetPolicyFromName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyFromName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyFromName) ProtoMessage() {}

func (x *GetPolicyFromName) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyFromName.ProtoReflect.Descriptor instead.
func (*GetPolicyFromName) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{47}
}

func (x *GetPolicyFromName) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetPolicyFromName) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

// Manoj + Pavan
type CreateSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SnapshotName string `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
}

func (x *CreateSnapshot) Reset() {
	*x = CreateSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshot) ProtoMessage() {}

func (x *CreateSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshot.ProtoReflect.Descriptor instead.
func (*CreateSnapshot) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{48}
}

func (x *CreateSnapshot) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *CreateSnapshot) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

type GetSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetSecret) Reset() {
	*x = GetSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecret) ProtoMessage() {}

func (x *GetSecret) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecret.ProtoReflect.Descriptor instead.
func (*GetSecret) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{49}
}

func (x *GetSecret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AddSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string name = 2;
	Path           string      `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Expiry         *uint64     `protobuf:"varint,4,opt,name=expiry,proto3,oneof" json:"expiry,omitempty"`
	RotateInterval *uint64     `protobuf:"varint,5,opt,name=rotate_interval,json=rotateInterval,proto3,oneof" json:"rotate_interval,omitempty"`
	SecretData     *SecretData `protobuf:"bytes,6,opt,name=secret_data,json=secretData,proto3" json:"secret_data,omitempty"`
}

func (x *AddSecret) Reset() {
	*x = AddSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecret) ProtoMessage() {}

func (x *AddSecret) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecret.ProtoReflect.Descriptor instead.
func (*AddSecret) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{50}
}

func (x *AddSecret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddSecret) GetExpiry() uint64 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *AddSecret) GetRotateInterval() uint64 {
	if x != nil && x.RotateInterval != nil {
		return *x.RotateInterval
	}
	return 0
}

func (x *AddSecret) GetSecretData() *SecretData {
	if x != nil {
		return x.SecretData
	}
	return nil
}

type DeleteSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DeleteSecret) Reset() {
	*x = DeleteSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecret) ProtoMessage() {}

func (x *DeleteSecret) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecret.ProtoReflect.Descriptor instead.
func (*DeleteSecret) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteSecret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DestroySecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DestroySecret) Reset() {
	*x = DestroySecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroySecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroySecret) ProtoMessage() {}

func (x *DestroySecret) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroySecret.ProtoReflect.Descriptor instead.
func (*DestroySecret) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{52}
}

func (x *DestroySecret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type UpdateSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string      `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Expiry     *uint64     `protobuf:"varint,3,opt,name=expiry,proto3,oneof" json:"expiry,omitempty"`
	SecretData *SecretData `protobuf:"bytes,4,opt,name=secret_data,json=secretData,proto3" json:"secret_data,omitempty"`
}

func (x *UpdateSecret) Reset() {
	*x = UpdateSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecret) ProtoMessage() {}

func (x *UpdateSecret) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecret.ProtoReflect.Descriptor instead.
func (*UpdateSecret) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{53}
}

func (x *UpdateSecret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UpdateSecret) GetExpiry() uint64 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *UpdateSecret) GetSecretData() *SecretData {
	if x != nil {
		return x.SecretData
	}
	return nil
}

type ListSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSecrets) Reset() {
	*x = ListSecrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecrets) ProtoMessage() {}

func (x *ListSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecrets.ProtoReflect.Descriptor instead.
func (*ListSecrets) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{54}
}

type QuickListSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuickListSecrets) Reset() {
	*x = QuickListSecrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickListSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickListSecrets) ProtoMessage() {}

func (x *QuickListSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickListSecrets.ProtoReflect.Descriptor instead.
func (*QuickListSecrets) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{55}
}

type ListSecretSubkeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ListSecretSubkeys) Reset() {
	*x = ListSecretSubkeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretSubkeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretSubkeys) ProtoMessage() {}

func (x *ListSecretSubkeys) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretSubkeys.ProtoReflect.Descriptor instead.
func (*ListSecretSubkeys) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{56}
}

func (x *ListSecretSubkeys) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type UndeleteSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *UndeleteSecret) Reset() {
	*x = UndeleteSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeleteSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteSecret) ProtoMessage() {}

func (x *UndeleteSecret) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteSecret.ProtoReflect.Descriptor instead.
func (*UndeleteSecret) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{57}
}

func (x *UndeleteSecret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Password struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Url        string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	TotpSecret string `protobuf:"bytes,6,opt,name=totp_secret,json=totpSecret,proto3" json:"totp_secret,omitempty"`
	Notes      string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Password) Reset() {
	*x = Password{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Password) ProtoMessage() {}

func (x *Password) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Password.ProtoReflect.Descriptor instead.
func (*Password) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{58}
}

func (x *Password) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Password) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Password) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Password) GetTotpSecret() string {
	if x != nil {
		return x.TotpSecret
	}
	return ""
}

func (x *Password) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Cvv    string `protobuf:"bytes,3,opt,name=cvv,proto3" json:"cvv,omitempty"`
	Expiry string `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Notes  string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{59}
}

func (x *Card) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Card) GetCvv() string {
	if x != nil {
		return x.Cvv
	}
	return ""
}

func (x *Card) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

func (x *Card) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{60}
}

func (x *Note) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Notes  string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{61}
}

func (x *Identity) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Identity) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// Using this to store multiple key value stores
type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{62}
}

func (x *KeyValue) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValue) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Format:
	//
	//	*Key_Random
	//	*Key_Alphanumeric
	Format  isKey_Format `protobuf_oneof:"Format"`
	MinSize *int32       `protobuf:"varint,4,opt,name=min_size,json=minSize,proto3,oneof" json:"min_size,omitempty"`
	MaxSize *int32       `protobuf:"varint,5,opt,name=max_size,json=maxSize,proto3,oneof" json:"max_size,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{63}
}

func (m *Key) GetFormat() isKey_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (x *Key) GetRandom() []byte {
	if x, ok := x.GetFormat().(*Key_Random); ok {
		return x.Random
	}
	return nil
}

func (x *Key) GetAlphanumeric() []byte {
	if x, ok := x.GetFormat().(*Key_Alphanumeric); ok {
		return x.Alphanumeric
	}
	return nil
}

func (x *Key) GetMinSize() int32 {
	if x != nil && x.MinSize != nil {
		return *x.MinSize
	}
	return 0
}

func (x *Key) GetMaxSize() int32 {
	if x != nil && x.MaxSize != nil {
		return *x.MaxSize
	}
	return 0
}

type isKey_Format interface {
	isKey_Format()
}

type Key_Random struct {
	Random []byte `protobuf:"bytes,2,opt,name=random,proto3,oneof"`
}

type Key_Alphanumeric struct {
	Alphanumeric []byte `protobuf:"bytes,3,opt,name=alphanumeric,proto3,oneof"`
}

func (*Key_Random) isKey_Format() {}

func (*Key_Alphanumeric) isKey_Format() {}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{64}
}

func (x *Certificate) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PrivateKey) Reset() {
	*x = PrivateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKey) ProtoMessage() {}

func (x *PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKey.ProtoReflect.Descriptor instead.
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{65}
}

func (x *PrivateKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SecretData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SecretType `protobuf:"varint,1,opt,name=type,proto3,enum=request.SecretType" json:"type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*SecretData_Password
	//	*SecretData_Card
	//	*SecretData_Note
	//	*SecretData_Identity
	//	*SecretData_KeyValue
	//	*SecretData_Key
	//	*SecretData_Certificate
	//	*SecretData_Privatekey
	Data isSecretData_Data `protobuf_oneof:"Data"`
}

func (x *SecretData) Reset() {
	*x = SecretData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData) ProtoMessage() {}

func (x *SecretData) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData.ProtoReflect.Descriptor instead.
func (*SecretData) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{66}
}

func (x *SecretData) GetType() SecretType {
	if x != nil {
		return x.Type
	}
	return SecretType_PASSWORD
}

func (m *SecretData) GetData() isSecretData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SecretData) GetPassword() *Password {
	if x, ok := x.GetData().(*SecretData_Password); ok {
		return x.Password
	}
	return nil
}

func (x *SecretData) GetCard() *Card {
	if x, ok := x.GetData().(*SecretData_Card); ok {
		return x.Card
	}
	return nil
}

func (x *SecretData) GetNote() *Note {
	if x, ok := x.GetData().(*SecretData_Note); ok {
		return x.Note
	}
	return nil
}

func (x *SecretData) GetIdentity() *Identity {
	if x, ok := x.GetData().(*SecretData_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *SecretData) GetKeyValue() *KeyValue {
	if x, ok := x.GetData().(*SecretData_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (x *SecretData) GetKey() *Key {
	if x, ok := x.GetData().(*SecretData_Key); ok {
		return x.Key
	}
	return nil
}

func (x *SecretData) GetCertificate() *Certificate {
	if x, ok := x.GetData().(*SecretData_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (x *SecretData) GetPrivatekey() *PrivateKey {
	if x, ok := x.GetData().(*SecretData_Privatekey); ok {
		return x.Privatekey
	}
	return nil
}

type isSecretData_Data interface {
	isSecretData_Data()
}

type SecretData_Password struct {
	Password *Password `protobuf:"bytes,5,opt,name=password,proto3,oneof"`
}

type SecretData_Card struct {
	Card *Card `protobuf:"bytes,6,opt,name=card,proto3,oneof"`
}

type SecretData_Note struct {
	Note *Note `protobuf:"bytes,7,opt,name=note,proto3,oneof"`
}

type SecretData_Identity struct {
	Identity *Identity `protobuf:"bytes,8,opt,name=identity,proto3,oneof"`
}

type SecretData_KeyValue struct {
	KeyValue *KeyValue `protobuf:"bytes,9,opt,name=keyValue,proto3,oneof"`
}

type SecretData_Key struct {
	Key *Key `protobuf:"bytes,10,opt,name=key,proto3,oneof"`
}

type SecretData_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,11,opt,name=certificate,proto3,oneof"`
}

type SecretData_Privatekey struct {
	Privatekey *PrivateKey `protobuf:"bytes,12,opt,name=privatekey,proto3,oneof"`
}

func (*SecretData_Password) isSecretData_Data() {}

func (*SecretData_Card) isSecretData_Data() {}

func (*SecretData_Note) isSecretData_Data() {}

func (*SecretData_Identity) isSecretData_Data() {}

func (*SecretData_KeyValue) isSecretData_Data() {}

func (*SecretData_Key) isSecretData_Data() {}

func (*SecretData_Certificate) isSecretData_Data() {}

func (*SecretData_Privatekey) isSecretData_Data() {}

type SecretVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // this will be an incrementing counter
	CreationTime uint64      `protobuf:"varint,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	SecretData   *SecretData `protobuf:"bytes,3,opt,name=secret_data,json=secretData,proto3" json:"secret_data,omitempty"`
}

func (x *SecretVersion) Reset() {
	*x = SecretVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretVersion) ProtoMessage() {}

func (x *SecretVersion) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretVersion.ProtoReflect.Descriptor instead.
func (*SecretVersion) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{67}
}

func (x *SecretVersion) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecretVersion) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *SecretVersion) GetSecretData() *SecretData {
	if x != nil {
		return x.SecretData
	}
	return nil
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string name = 1;
	Path      string           `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Uuid      []byte           `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Expiry    uint64           `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Versions  []*SecretVersion `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
	IsExpired bool             `protobuf:"varint,6,opt,name=is_expired,json=isExpired,proto3" json:"is_expired,omitempty"`
	// bool is_deleted = 7;
	RotateInterval  uint64 `protobuf:"varint,8,opt,name=rotate_interval,json=rotateInterval,proto3" json:"rotate_interval,omitempty"`
	LastRotatedTime uint64 `protobuf:"varint,9,opt,name=last_rotated_time,json=lastRotatedTime,proto3" json:"last_rotated_time,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{68}
}

func (x *Secret) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Secret) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Secret) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Secret) GetVersions() []*SecretVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *Secret) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *Secret) GetRotateInterval() uint64 {
	if x != nil {
		return x.RotateInterval
	}
	return 0
}

func (x *Secret) GetLastRotatedTime() uint64 {
	if x != nil {
		return x.LastRotatedTime
	}
	return 0
}

type GetRandomBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAlphanumeric bool   `protobuf:"varint,1,opt,name=is_alphanumeric,json=isAlphanumeric,proto3" json:"is_alphanumeric,omitempty"`
	Size           uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetRandomBytes) Reset() {
	*x = GetRandomBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomBytes) ProtoMessage() {}

func (x *GetRandomBytes) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomBytes.ProtoReflect.Descriptor instead.
func (*GetRandomBytes) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{69}
}

func (x *GetRandomBytes) GetIsAlphanumeric() bool {
	if x != nil {
		return x.IsAlphanumeric
	}
	return false
}

func (x *GetRandomBytes) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SetRolesTeamsToUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailOfUser string   `protobuf:"bytes,1,opt,name=emailOfUser,proto3" json:"emailOfUser,omitempty"`
	NameOfRoles []string `protobuf:"bytes,2,rep,name=name_of_roles,json=nameOfRoles,proto3" json:"name_of_roles,omitempty"`
	NameOfTeams []string `protobuf:"bytes,3,rep,name=name_of_teams,json=nameOfTeams,proto3" json:"name_of_teams,omitempty"`
}

func (x *SetRolesTeamsToUser) Reset() {
	*x = SetRolesTeamsToUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRolesTeamsToUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRolesTeamsToUser) ProtoMessage() {}

func (x *SetRolesTeamsToUser) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRolesTeamsToUser.ProtoReflect.Descriptor instead.
func (*SetRolesTeamsToUser) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{70}
}

func (x *SetRolesTeamsToUser) GetEmailOfUser() string {
	if x != nil {
		return x.EmailOfUser
	}
	return ""
}

func (x *SetRolesTeamsToUser) GetNameOfRoles() []string {
	if x != nil {
		return x.NameOfRoles
	}
	return nil
}

func (x *SetRolesTeamsToUser) GetNameOfTeams() []string {
	if x != nil {
		return x.NameOfTeams
	}
	return nil
}

type PinObjectInDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl    uint64     `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Ip     string     `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Ctype  ClientType `protobuf:"varint,3,opt,name=ctype,proto3,enum=request.ClientType" json:"ctype,omitempty"`
	Email  string     `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Client string     `protobuf:"bytes,6,opt,name=client,proto3" json:"client,omitempty"`
	// optional string Organization=5;
	CreationTime   uint64   `protobuf:"varint,5,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	AllowedPinOps  []Op     `protobuf:"varint,7,rep,packed,name=allowed_pin_ops,json=allowedPinOps,proto3,enum=request.Op" json:"allowed_pin_ops,omitempty"`
	Name           *string  `protobuf:"bytes,8,opt,name=name,proto3,oneof" json:"name,omitempty"`
	AllowedObjects [][]byte `protobuf:"bytes,9,rep,name=allowed_objects,json=allowedObjects,proto3" json:"allowed_objects,omitempty"`
}

func (x *PinObjectInDb) Reset() {
	*x = PinObjectInDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinObjectInDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinObjectInDb) ProtoMessage() {}

func (x *PinObjectInDb) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinObjectInDb.ProtoReflect.Descriptor instead.
func (*PinObjectInDb) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{71}
}

func (x *PinObjectInDb) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *PinObjectInDb) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PinObjectInDb) GetCtype() ClientType {
	if x != nil {
		return x.Ctype
	}
	return ClientType_APP
}

func (x *PinObjectInDb) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PinObjectInDb) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *PinObjectInDb) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *PinObjectInDb) GetAllowedPinOps() []Op {
	if x != nil {
		return x.AllowedPinOps
	}
	return nil
}

func (x *PinObjectInDb) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PinObjectInDb) GetAllowedObjects() [][]byte {
	if x != nil {
		return x.AllowedObjects
	}
	return nil
}

type PinObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            []byte  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` //this 512 random bytes
	Email            string  `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	OrganizationName *string `protobuf:"bytes,3,opt,name=organization_name,json=organizationName,proto3,oneof" json:"organization_name,omitempty"` //email and organization_name will be used in singin with pin to construct root paths
}

func (x *PinObjectResponse) Reset() {
	*x = PinObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinObjectResponse) ProtoMessage() {}

func (x *PinObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinObjectResponse.ProtoReflect.Descriptor instead.
func (*PinObjectResponse) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{72}
}

func (x *PinObjectResponse) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *PinObjectResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PinObjectResponse) GetOrganizationName() string {
	if x != nil && x.OrganizationName != nil {
		return *x.OrganizationName
	}
	return ""
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Permissions []Op   `protobuf:"varint,3,rep,packed,name=permissions,proto3,enum=request.Op" json:"permissions,omitempty"`
	Uuid        []byte `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{73}
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetPermissions() []Op {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Role) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type AddRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Permissions []Op   `protobuf:"varint,2,rep,packed,name=permissions,proto3,enum=request.Op" json:"permissions,omitempty"`
}

func (x *AddRole) Reset() {
	*x = AddRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRole) ProtoMessage() {}

func (x *AddRole) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRole.ProtoReflect.Descriptor instead.
func (*AddRole) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{74}
}

func (x *AddRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddRole) GetPermissions() []Op {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type RemoveRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RemoveRole) Reset() {
	*x = RemoveRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRole) ProtoMessage() {}

func (x *RemoveRole) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRole.ProtoReflect.Descriptor instead.
func (*RemoveRole) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{75}
}

func (x *RemoveRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Permissions []Op   `protobuf:"varint,2,rep,packed,name=permissions,proto3,enum=request.Op" json:"permissions,omitempty"`
}

func (x *UpdateRole) Reset() {
	*x = UpdateRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRole) ProtoMessage() {}

func (x *UpdateRole) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRole.ProtoReflect.Descriptor instead.
func (*UpdateRole) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRole) GetPermissions() []Op {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type ListRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRoles) Reset() {
	*x = ListRoles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoles) ProtoMessage() {}

func (x *ListRoles) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoles.ProtoReflect.Descriptor instead.
func (*ListRoles) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{77}
}

type GetRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRole) Reset() {
	*x = GetRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRole) ProtoMessage() {}

func (x *GetRole) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRole.ProtoReflect.Descriptor instead.
func (*GetRole) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{78}
}

func (x *GetRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Roles     []string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
	RoleUuids [][]byte `protobuf:"bytes,6,rep,name=role_uuids,json=roleUuids,proto3" json:"role_uuids,omitempty"`
	Uuid      []byte   `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{79}
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Team) GetRoleUuids() [][]byte {
	if x != nil {
		return x.RoleUuids
	}
	return nil
}

func (x *Team) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type AddTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Roles []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AddTeam) Reset() {
	*x = AddTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTeam) ProtoMessage() {}

func (x *AddTeam) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTeam.ProtoReflect.Descriptor instead.
func (*AddTeam) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{80}
}

func (x *AddTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTeam) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type RemoveTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RemoveTeam) Reset() {
	*x = RemoveTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTeam) ProtoMessage() {}

func (x *RemoveTeam) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTeam.ProtoReflect.Descriptor instead.
func (*RemoveTeam) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{81}
}

func (x *RemoveTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Roles []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *UpdateTeam) Reset() {
	*x = UpdateTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeam) ProtoMessage() {}

func (x *UpdateTeam) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeam.ProtoReflect.Descriptor instead.
func (*UpdateTeam) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTeam) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ListTeams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTeams) Reset() {
	*x = ListTeams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeams) ProtoMessage() {}

func (x *ListTeams) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeams.ProtoReflect.Descriptor instead.
func (*ListTeams) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{83}
}

type GetTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTeam) Reset() {
	*x = GetTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeam) ProtoMessage() {}

func (x *GetTeam) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeam.ProtoReflect.Descriptor instead.
func (*GetTeam) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{84}
}

func (x *GetTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IsOperationAllowed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName  *string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3,oneof" json:"role_name,omitempty"`
	TeamName  *string `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3,oneof" json:"team_name,omitempty"`
	Operation Op      `protobuf:"varint,3,opt,name=operation,proto3,enum=request.Op" json:"operation,omitempty"`
}

func (x *IsOperationAllowed) Reset() {
	*x = IsOperationAllowed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOperationAllowed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOperationAllowed) ProtoMessage() {}

func (x *IsOperationAllowed) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOperationAllowed.ProtoReflect.Descriptor instead.
func (*IsOperationAllowed) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{85}
}

func (x *IsOperationAllowed) GetRoleName() string {
	if x != nil && x.RoleName != nil {
		return *x.RoleName
	}
	return ""
}

func (x *IsOperationAllowed) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *IsOperationAllowed) GetOperation() Op {
	if x != nil {
		return x.Operation
	}
	return Op_OpAddUser
}

type RestoreVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fileuuid  []byte `protobuf:"bytes,1,opt,name=fileuuid,proto3" json:"fileuuid,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"` //bring this version to the front and make it current version?
}

func (x *RestoreVersion) Reset() {
	*x = RestoreVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreVersion) ProtoMessage() {}

func (x *RestoreVersion) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreVersion.ProtoReflect.Descriptor instead.
func (*RestoreVersion) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{86}
}

func (x *RestoreVersion) GetFileuuid() []byte {
	if x != nil {
		return x.Fileuuid
	}
	return nil
}

func (x *RestoreVersion) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type RemoveFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFullPath string `protobuf:"bytes,1,opt,name=file_full_path,json=fileFullPath,proto3" json:"file_full_path,omitempty"` //with name
	IsPerm       bool   `protobuf:"varint,2,opt,name=is_perm,json=isPerm,proto3" json:"is_perm,omitempty"`                    //if true then remove the file from azure
}

func (x *RemoveFile) Reset() {
	*x = RemoveFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFile) ProtoMessage() {}

func (x *RemoveFile) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFile.ProtoReflect.Descriptor instead.
func (*RemoveFile) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{87}
}

func (x *RemoveFile) GetFileFullPath() string {
	if x != nil {
		return x.FileFullPath
	}
	return ""
}

func (x *RemoveFile) GetIsPerm() bool {
	if x != nil {
		return x.IsPerm
	}
	return false
}

type RemoveFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderFullPath string `protobuf:"bytes,1,opt,name=folder_full_path,json=folderFullPath,proto3" json:"folder_full_path,omitempty"` //with name
	IsPerm         bool   `protobuf:"varint,2,opt,name=is_perm,json=isPerm,proto3" json:"is_perm,omitempty"`                          //since expiry time is being set for folders in sql,remove folder has nothing to do with either permanent remove or not
}

func (x *RemoveFolder) Reset() {
	*x = RemoveFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFolder) ProtoMessage() {}

func (x *RemoveFolder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFolder.ProtoReflect.Descriptor instead.
func (*RemoveFolder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{88}
}

func (x *RemoveFolder) GetFolderFullPath() string {
	if x != nil {
		return x.FolderFullPath
	}
	return ""
}

func (x *RemoveFolder) GetIsPerm() bool {
	if x != nil {
		return x.IsPerm
	}
	return false
}

type UntrashFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFullPath string `protobuf:"bytes,1,opt,name=file_full_path,json=fileFullPath,proto3" json:"file_full_path,omitempty"` //with name
}

func (x *UntrashFile) Reset() {
	*x = UntrashFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UntrashFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UntrashFile) ProtoMessage() {}

func (x *UntrashFile) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UntrashFile.ProtoReflect.Descriptor instead.
func (*UntrashFile) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{89}
}

func (x *UntrashFile) GetFileFullPath() string {
	if x != nil {
		return x.FileFullPath
	}
	return ""
}

type UntrashFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderFullPath string `protobuf:"bytes,1,opt,name=folder_full_path,json=folderFullPath,proto3" json:"folder_full_path,omitempty"` //with name
}

func (x *UntrashFolder) Reset() {
	*x = UntrashFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UntrashFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UntrashFolder) ProtoMessage() {}

func (x *UntrashFolder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UntrashFolder.ProtoReflect.Descriptor instead.
func (*UntrashFolder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{90}
}

func (x *UntrashFolder) GetFolderFullPath() string {
	if x != nil {
		return x.FolderFullPath
	}
	return ""
}

type UndoStartWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fileuuid []byte `protobuf:"bytes,1,opt,name=fileuuid,proto3" json:"fileuuid,omitempty"` // repeated bytes chunkIds = 2; //this is the list of chunks that are staged for this file
}

func (x *UndoStartWrite) Reset() {
	*x = UndoStartWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoStartWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoStartWrite) ProtoMessage() {}

func (x *UndoStartWrite) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoStartWrite.ProtoReflect.Descriptor instead.
func (*UndoStartWrite) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{91}
}

func (x *UndoStartWrite) GetFileuuid() []byte {
	if x != nil {
		return x.Fileuuid
	}
	return nil
}

type DetachClonedFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotId string `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	FolderUuid []byte `protobuf:"bytes,2,opt,name=folder_uuid,json=folderUuid,proto3" json:"folder_uuid,omitempty"`
}

func (x *DetachClonedFolder) Reset() {
	*x = DetachClonedFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachClonedFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachClonedFolder) ProtoMessage() {}

func (x *DetachClonedFolder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachClonedFolder.ProtoReflect.Descriptor instead.
func (*DetachClonedFolder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{92}
}

func (x *DetachClonedFolder) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *DetachClonedFolder) GetFolderUuid() []byte {
	if x != nil {
		return x.FolderUuid
	}
	return nil
}

type RenameFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	NewName  string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameFile) Reset() {
	*x = RenameFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFile) ProtoMessage() {}

func (x *RenameFile) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFile.ProtoReflect.Descriptor instead.
func (*RenameFile) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{93}
}

func (x *RenameFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *RenameFile) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type RenameFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderPath string `protobuf:"bytes,1,opt,name=folder_path,json=folderPath,proto3" json:"folder_path,omitempty"`
	NewName    string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameFolder) Reset() {
	*x = RenameFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFolder) ProtoMessage() {}

func (x *RenameFolder) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFolder.ProtoReflect.Descriptor instead.
func (*RenameFolder) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{94}
}

func (x *RenameFolder) GetFolderPath() string {
	if x != nil {
		return x.FolderPath
	}
	return ""
}

func (x *RenameFolder) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type ListPins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken []byte  `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	PageSize  *uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *ListPins) Reset() {
	*x = ListPins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPins) ProtoMessage() {}

func (x *ListPins) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPins.ProtoReflect.Descriptor instead.
func (*ListPins) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{95}
}

func (x *ListPins) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *ListPins) GetPageSize() uint64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       []byte     `protobuf:"bytes,1,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	Path       *string    `protobuf:"bytes,2,opt,name=path,proto3,oneof" json:"path,omitempty"` //this is the path of the folder
	Type       ListType   `protobuf:"varint,3,opt,name=type,proto3,enum=request.ListType" json:"type,omitempty"`
	PageToken  []byte     `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	PageSize   *uint64    `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	OrderBy    *OrderBy   `protobuf:"varint,6,opt,name=order_by,json=orderBy,proto3,enum=request.OrderBy,oneof" json:"order_by,omitempty"` //TODO:make it optional,it exists only when list type is files and folders
	Regex      *string    `protobuf:"bytes,7,opt,name=regex,proto3,oneof" json:"regex,omitempty"`                                          //if regex is some() then uuid will be none,else uuid will be some and regex will be none.
	TypeOfPath TypeOfPath `protobuf:"varint,8,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{96}
}

func (x *List) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *List) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *List) GetType() ListType {
	if x != nil {
		return x.Type
	}
	return ListType_Chunks
}

func (x *List) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *List) GetPageSize() uint64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *List) GetOrderBy() OrderBy {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return OrderBy_UPDATEDTIME
}

func (x *List) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (x *List) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

type ProfileChunkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      []byte  `protobuf:"bytes,1,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	PageToken []byte  `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	PageSize  *uint64 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	Path      string  `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ProfileChunkList) Reset() {
	*x = ProfileChunkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileChunkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileChunkList) ProtoMessage() {}

func (x *ProfileChunkList) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileChunkList.ProtoReflect.Descriptor instead.
func (*ProfileChunkList) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{97}
}

func (x *ProfileChunkList) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ProfileChunkList) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *ProfileChunkList) GetPageSize() uint64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ProfileChunkList) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AuditLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    []byte  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Log     []byte  `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	LogFile *string `protobuf:"bytes,3,opt,name=log_file,json=logFile,proto3,oneof" json:"log_file,omitempty"`
}

func (x *AuditLogMessage) Reset() {
	*x = AuditLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogMessage) ProtoMessage() {}

func (x *AuditLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogMessage.ProtoReflect.Descriptor instead.
func (*AuditLogMessage) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{98}
}

func (x *AuditLogMessage) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *AuditLogMessage) GetLog() []byte {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *AuditLogMessage) GetLogFile() string {
	if x != nil && x.LogFile != nil {
		return *x.LogFile
	}
	return ""
}

type VerifyAuditLogMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VerifyAuditLogMeta) Reset() {
	*x = VerifyAuditLogMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAuditLogMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAuditLogMeta) ProtoMessage() {}

func (x *VerifyAuditLogMeta) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAuditLogMeta.ProtoReflect.Descriptor instead.
func (*VerifyAuditLogMeta) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{99}
}

func (x *VerifyAuditLogMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLedgerRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime uint64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GetLedgerRange) Reset() {
	*x = GetLedgerRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLedgerRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLedgerRange) ProtoMessage() {}

func (x *GetLedgerRange) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLedgerRange.ProtoReflect.Descriptor instead.
func (*GetLedgerRange) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{100}
}

func (x *GetLedgerRange) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetLedgerRange) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetAuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChunkFlags ChunkFlags `protobuf:"varint,2,opt,name=chunkFlags,proto3,enum=request.ChunkFlags" json:"chunkFlags,omitempty"`
}

func (x *GetAuditLog) Reset() {
	*x = GetAuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLog) ProtoMessage() {}

func (x *GetAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLog.ProtoReflect.Descriptor instead.
func (*GetAuditLog) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{101}
}

func (x *GetAuditLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAuditLog) GetChunkFlags() ChunkFlags {
	if x != nil {
		return x.ChunkFlags
	}
	return ChunkFlags_NONE
}

type DeleteAuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteAuditLog) Reset() {
	*x = DeleteAuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuditLog) ProtoMessage() {}

func (x *DeleteAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuditLog.ProtoReflect.Descriptor instead.
func (*DeleteAuditLog) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{102}
}

func (x *DeleteAuditLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string organization = 2;
	// string email = 3;
	Firstname string `protobuf:"bytes,4,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname  string `protobuf:"bytes,5,opt,name=lastname,proto3" json:"lastname,omitempty"`
	// string password = 6;
	// string role = 7;
	Location string `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Phone    string `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Address  string `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{103}
}

func (x *UserProfile) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *UserProfile) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *UserProfile) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UserProfile) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserProfile) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type OrganizationProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string name = 1;
	// string email = 2;
	Phone          string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Address        string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	TaxId          string `protobuf:"bytes,5,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	VatId          string `protobuf:"bytes,6,opt,name=vat_id,json=vatId,proto3" json:"vat_id,omitempty"`
	RegistrationId string `protobuf:"bytes,7,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
}

func (x *OrganizationProfile) Reset() {
	*x = OrganizationProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationProfile) ProtoMessage() {}

func (x *OrganizationProfile) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationProfile.ProtoReflect.Descriptor instead.
func (*OrganizationProfile) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{104}
}

func (x *OrganizationProfile) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *OrganizationProfile) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OrganizationProfile) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *OrganizationProfile) GetVatId() string {
	if x != nil {
		return x.VatId
	}
	return ""
}

func (x *OrganizationProfile) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

type UserProfileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to User:
	//
	//	*UserProfileMeta_UserObj
	//	*UserProfileMeta_OrganizationObj
	User isUserProfileMeta_User `protobuf_oneof:"user"`
}

func (x *UserProfileMeta) Reset() {
	*x = UserProfileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileMeta) ProtoMessage() {}

func (x *UserProfileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileMeta.ProtoReflect.Descriptor instead.
func (*UserProfileMeta) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{105}
}

func (m *UserProfileMeta) GetUser() isUserProfileMeta_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *UserProfileMeta) GetUserObj() *UserProfile {
	if x, ok := x.GetUser().(*UserProfileMeta_UserObj); ok {
		return x.UserObj
	}
	return nil
}

func (x *UserProfileMeta) GetOrganizationObj() *OrganizationProfile {
	if x, ok := x.GetUser().(*UserProfileMeta_OrganizationObj); ok {
		return x.OrganizationObj
	}
	return nil
}

type isUserProfileMeta_User interface {
	isUserProfileMeta_User()
}

type UserProfileMeta_UserObj struct {
	UserObj *UserProfile `protobuf:"bytes,1,opt,name=userObj,proto3,oneof"`
}

type UserProfileMeta_OrganizationObj struct {
	OrganizationObj *OrganizationProfile `protobuf:"bytes,2,opt,name=organizationObj,proto3,oneof"`
}

func (*UserProfileMeta_UserObj) isUserProfileMeta_User() {}

func (*UserProfileMeta_OrganizationObj) isUserProfileMeta_User() {}

type SetUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usermeta *UserProfileMeta `protobuf:"bytes,1,opt,name=usermeta,proto3" json:"usermeta,omitempty"`
	Email    string           `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SetUser) Reset() {
	*x = SetUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUser) ProtoMessage() {}

func (x *SetUser) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUser.ProtoReflect.Descriptor instead.
func (*SetUser) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{106}
}

func (x *SetUser) GetUsermeta() *UserProfileMeta {
	if x != nil {
		return x.Usermeta
	}
	return nil
}

func (x *SetUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type FinalizeProfileWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` //this uuid of file
	VersionUuid []byte `protobuf:"bytes,2,opt,name=version_uuid,json=versionUuid,proto3" json:"version_uuid,omitempty"`
}

func (x *FinalizeProfileWrite) Reset() {
	*x = FinalizeProfileWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeProfileWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeProfileWrite) ProtoMessage() {}

func (x *FinalizeProfileWrite) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeProfileWrite.ProtoReflect.Descriptor instead.
func (*FinalizeProfileWrite) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{107}
}

func (x *FinalizeProfileWrite) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *FinalizeProfileWrite) GetVersionUuid() []byte {
	if x != nil {
		return x.VersionUuid
	}
	return nil
}

type GetUserType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetUserType) Reset() {
	*x = GetUserType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserType) ProtoMessage() {}

func (x *GetUserType) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserType.ProtoReflect.Descriptor instead.
func (*GetUserType) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{108}
}

func (x *GetUserType) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ActionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      Action      `protobuf:"varint,1,opt,name=action,proto3,enum=request.Action" json:"action,omitempty"`                                   // "allow" or "deny"
	Subject     string      `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`                                                      // user email or team name
	SubjectType SubjectType `protobuf:"varint,3,opt,name=subject_type,json=subjectType,proto3,enum=request.SubjectType" json:"subject_type,omitempty"` // "user" or "team"
	OpIds       []int32     `protobuf:"varint,4,rep,packed,name=op_ids,json=opIds,proto3" json:"op_ids,omitempty"`                                     // allowed/denied operation IDs
}

func (x *ActionEntry) Reset() {
	*x = ActionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionEntry) ProtoMessage() {}

func (x *ActionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionEntry.ProtoReflect.Descriptor instead.
func (*ActionEntry) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{109}
}

func (x *ActionEntry) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ALLOW
}

func (x *ActionEntry) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ActionEntry) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_USER
}

func (x *ActionEntry) GetOpIds() []int32 {
	if x != nil {
		return x.OpIds
	}
	return nil
}

type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectPath string         `protobuf:"bytes,1,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
	OwnerEmail string         `protobuf:"bytes,2,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"` // email of the owner of the object
	Actions    []*ActionEntry `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	TypeOfPath TypeOfPath     `protobuf:"varint,4,opt,name=type_of_path,json=typeOfPath,proto3,enum=request.TypeOfPath" json:"type_of_path,omitempty"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{110}
}

func (x *ACL) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *ACL) GetOwnerEmail() string {
	if x != nil {
		return x.OwnerEmail
	}
	return ""
}

func (x *ACL) GetActions() []*ActionEntry {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ACL) GetTypeOfPath() TypeOfPath {
	if x != nil {
		return x.TypeOfPath
	}
	return TypeOfPath_TShareUser
}

type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acl *ACL `protobuf:"bytes,1,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{111}
}

func (x *Share) GetAcl() *ACL {
	if x != nil {
		return x.Acl
	}
	return nil
}

type Unshare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectPath string `protobuf:"bytes,1,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
}

func (x *Unshare) Reset() {
	*x = Unshare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unshare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unshare) ProtoMessage() {}

func (x *Unshare) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unshare.ProtoReflect.Descriptor instead.
func (*Unshare) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{112}
}

func (x *Unshare) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

type UpdateShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acl *ACL `protobuf:"bytes,1,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *UpdateShare) Reset() {
	*x = UpdateShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShare) ProtoMessage() {}

func (x *UpdateShare) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShare.ProtoReflect.Descriptor instead.
func (*UpdateShare) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{113}
}

func (x *UpdateShare) GetAcl() *ACL {
	if x != nil {
		return x.Acl
	}
	return nil
}

type ListShares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectPath string `protobuf:"bytes,1,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
}

func (x *ListShares) Reset() {
	*x = ListShares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShares) ProtoMessage() {}

func (x *ListShares) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShares.ProtoReflect.Descriptor instead.
func (*ListShares) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{114}
}

func (x *ListShares) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

type GetRolesAndTeamsOfUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailOfUser string `protobuf:"bytes,1,opt,name=email_of_user,json=emailOfUser,proto3" json:"email_of_user,omitempty"`
}

func (x *GetRolesAndTeamsOfUser) Reset() {
	*x = GetRolesAndTeamsOfUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRolesAndTeamsOfUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRolesAndTeamsOfUser) ProtoMessage() {}

func (x *GetRolesAndTeamsOfUser) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRolesAndTeamsOfUser.ProtoReflect.Descriptor instead.
func (*GetRolesAndTeamsOfUser) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{115}
}

func (x *GetRolesAndTeamsOfUser) GetEmailOfUser() string {
	if x != nil {
		return x.EmailOfUser
	}
	return ""
}

type ListUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional uint64 last_serial_number=1;
	PageTokenListUser []byte `protobuf:"bytes,1,opt,name=page_token_list_user,json=pageTokenListUser,proto3,oneof" json:"page_token_list_user,omitempty"` //this will be used to fetch next page
	// it will be None for the first request
	PageSize *uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"` //this is the number of users to be returned in this request
}

func (x *ListUsers) Reset() {
	*x = ListUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsers) ProtoMessage() {}

func (x *ListUsers) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsers.ProtoReflect.Descriptor instead.
func (*ListUsers) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{116}
}

func (x *ListUsers) GetPageTokenListUser() []byte {
	if x != nil {
		return x.PageTokenListUser
	}
	return nil
}

func (x *ListUsers) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type RestartPutChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionUuid []byte `protobuf:"bytes,1,opt,name=version_uuid,json=versionUuid,proto3" json:"version_uuid,omitempty"`
	ChunkUuid   []byte `protobuf:"bytes,2,opt,name=chunk_uuid,json=chunkUuid,proto3" json:"chunk_uuid,omitempty"`
}

func (x *RestartPutChunk) Reset() {
	*x = RestartPutChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartPutChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartPutChunk) ProtoMessage() {}

func (x *RestartPutChunk) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartPutChunk.ProtoReflect.Descriptor instead.
func (*RestartPutChunk) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{117}
}

func (x *RestartPutChunk) GetVersionUuid() []byte {
	if x != nil {
		return x.VersionUuid
	}
	return nil
}

func (x *RestartPutChunk) GetChunkUuid() []byte {
	if x != nil {
		return x.ChunkUuid
	}
	return nil
}

type GetMetaFromSharedPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetMetaFromSharedPath) Reset() {
	*x = GetMetaFromSharedPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetaFromSharedPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetaFromSharedPath) ProtoMessage() {}

func (x *GetMetaFromSharedPath) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetaFromSharedPath.ProtoReflect.Descriptor instead.
func (*GetMetaFromSharedPath) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{118}
}

func (x *GetMetaFromSharedPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint64 version = 101;
	Id *uint64 `protobuf:"varint,100,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Types that are assignable to Operation:
	//
	//	*Request_AddUser
	//	*Request_RemoveUser
	//	*Request_PasswordReset
	//	*Request_ChangePassword
	//	*Request_AddOrganization
	//	*Request_InitiatePayment
	//	*Request_SignIn
	//	*Request_SignOut
	//	*Request_InviteUser
	//	*Request_GetUser
	//	*Request_ListUsers
	//	*Request_RemoveOrganization
	//	*Request_VerifyOrganization
	//	*Request_GetOrganization
	//	*Request_AddPin
	//	*Request_VerifyUser
	//	*Request_GetFileHead
	//	*Request_Echo
	//	*Request_FileLock
	//	*Request_FileUnlock
	//	*Request_GetChunk
	//	*Request_StartWrite
	//	*Request_PutChunk
	//	*Request_FinalizeWrite
	//	*Request_ListFiles
	//	*Request_Remove
	//	*Request_GetFolder
	//	*Request_CreateFolder
	//	*Request_CreateSnapshot
	//	*Request_VerifyPayment
	//	*Request_GetSecret
	//	*Request_AddSecret
	//	*Request_DeleteSecret
	//	*Request_UpdateSecret
	//	*Request_ListSecrets
	//	*Request_QuickListSecrets
	//	*Request_ListSecretSubkeys
	//	*Request_UndeleteSecret
	//	*Request_DestroySecret
	//	*Request_AddRole
	//	*Request_RemoveRole
	//	*Request_UpdateRole
	//	*Request_ListRoles
	//	*Request_GetRole
	//	*Request_AddTeam
	//	*Request_RemoveTeam
	//	*Request_UpdateTeam
	//	*Request_ListTeams
	//	*Request_GetTeam
	//	*Request_IsOperationAllowed
	//	*Request_MoveFile
	//	*Request_MoveFolder
	//	*Request_CopyFile
	//	*Request_CopyFolder
	//	*Request_RestoreVersion
	//	*Request_RemoveFile
	//	*Request_RemoveFolder
	//	*Request_UntrashFile
	//	*Request_UntrashFolder
	//	*Request_UndoStartWrite
	//	*Request_DetachClonedFolder
	//	*Request_GetMetaFromPath
	//	*Request_RenameFile
	//	*Request_RenameFolder
	//	*Request_List
	//	*Request_AuditLogMessage
	//	*Request_ResetVersion
	//	*Request_SetUser
	//	*Request_FinalizeProfileWrite
	//	*Request_GetProfileFileMeta
	//	*Request_ProfileChunkList
	//	*Request_GetUserType
	//	*Request_GetRandomBytes
	//	*Request_Share
	//	*Request_Unshare
	//	*Request_UpdateShare
	//	*Request_ListShares
	//	*Request_ResetTOTP
	//	*Request_SetRolesTeamsToUser
	//	*Request_UpdatePinOps
	//	*Request_DeletePin
	//	*Request_GetRolesAndTeamsOfUser
	//	*Request_RestartPutChunk
	//	*Request_VerifyAuditLogMeta
	//	*Request_GetAuditLog
	//	*Request_DeleteAuditLog
	//	*Request_GetLedgerRange
	//	*Request_ListPins
	//	*Request_GetMetaFromSharedPath
	Operation isRequest_Operation `protobuf_oneof:"Operation"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{119}
}

func (x *Request) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (m *Request) GetOperation() isRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *Request) GetAddUser() *AddUser {
	if x, ok := x.GetOperation().(*Request_AddUser); ok {
		return x.AddUser
	}
	return nil
}

func (x *Request) GetRemoveUser() *RemoveUser {
	if x, ok := x.GetOperation().(*Request_RemoveUser); ok {
		return x.RemoveUser
	}
	return nil
}

func (x *Request) GetPasswordReset() *PasswordReset {
	if x, ok := x.GetOperation().(*Request_PasswordReset); ok {
		return x.PasswordReset
	}
	return nil
}

func (x *Request) GetChangePassword() *ChangePassword {
	if x, ok := x.GetOperation().(*Request_ChangePassword); ok {
		return x.ChangePassword
	}
	return nil
}

func (x *Request) GetAddOrganization() *AddOrganization {
	if x, ok := x.GetOperation().(*Request_AddOrganization); ok {
		return x.AddOrganization
	}
	return nil
}

func (x *Request) GetInitiatePayment() *InitiatePayment {
	if x, ok := x.GetOperation().(*Request_InitiatePayment); ok {
		return x.InitiatePayment
	}
	return nil
}

func (x *Request) GetSignIn() *SignIn {
	if x, ok := x.GetOperation().(*Request_SignIn); ok {
		return x.SignIn
	}
	return nil
}

func (x *Request) GetSignOut() *SignOut {
	if x, ok := x.GetOperation().(*Request_SignOut); ok {
		return x.SignOut
	}
	return nil
}

func (x *Request) GetInviteUser() *InviteUser {
	if x, ok := x.GetOperation().(*Request_InviteUser); ok {
		return x.InviteUser
	}
	return nil
}

func (x *Request) GetGetUser() *GetUser {
	if x, ok := x.GetOperation().(*Request_GetUser); ok {
		return x.GetUser
	}
	return nil
}

func (x *Request) GetListUsers() *ListUsers {
	if x, ok := x.GetOperation().(*Request_ListUsers); ok {
		return x.ListUsers
	}
	return nil
}

func (x *Request) GetRemoveOrganization() *RemoveOrganization {
	if x, ok := x.GetOperation().(*Request_RemoveOrganization); ok {
		return x.RemoveOrganization
	}
	return nil
}

func (x *Request) GetVerifyOrganization() *VerifyOrganization {
	if x, ok := x.GetOperation().(*Request_VerifyOrganization); ok {
		return x.VerifyOrganization
	}
	return nil
}

func (x *Request) GetGetOrganization() *GetOrganization {
	if x, ok := x.GetOperation().(*Request_GetOrganization); ok {
		return x.GetOrganization
	}
	return nil
}

func (x *Request) GetAddPin() *AddPin {
	if x, ok := x.GetOperation().(*Request_AddPin); ok {
		return x.AddPin
	}
	return nil
}

func (x *Request) GetVerifyUser() *VerifyUser {
	if x, ok := x.GetOperation().(*Request_VerifyUser); ok {
		return x.VerifyUser
	}
	return nil
}

func (x *Request) GetGetFileHead() *GetFileHead {
	if x, ok := x.GetOperation().(*Request_GetFileHead); ok {
		return x.GetFileHead
	}
	return nil
}

func (x *Request) GetEcho() *Echo {
	if x, ok := x.GetOperation().(*Request_Echo); ok {
		return x.Echo
	}
	return nil
}

func (x *Request) GetFileLock() *FileLock {
	if x, ok := x.GetOperation().(*Request_FileLock); ok {
		return x.FileLock
	}
	return nil
}

func (x *Request) GetFileUnlock() *FileUnlock {
	if x, ok := x.GetOperation().(*Request_FileUnlock); ok {
		return x.FileUnlock
	}
	return nil
}

func (x *Request) GetGetChunk() *GetChunk {
	if x, ok := x.GetOperation().(*Request_GetChunk); ok {
		return x.GetChunk
	}
	return nil
}

func (x *Request) GetStartWrite() *StartWrite {
	if x, ok := x.GetOperation().(*Request_StartWrite); ok {
		return x.StartWrite
	}
	return nil
}

func (x *Request) GetPutChunk() *PutChunk {
	if x, ok := x.GetOperation().(*Request_PutChunk); ok {
		return x.PutChunk
	}
	return nil
}

func (x *Request) GetFinalizeWrite() *FinalizeWrite {
	if x, ok := x.GetOperation().(*Request_FinalizeWrite); ok {
		return x.FinalizeWrite
	}
	return nil
}

func (x *Request) GetListFiles() *ListFiles {
	if x, ok := x.GetOperation().(*Request_ListFiles); ok {
		return x.ListFiles
	}
	return nil
}

func (x *Request) GetRemove() *Remove {
	if x, ok := x.GetOperation().(*Request_Remove); ok {
		return x.Remove
	}
	return nil
}

func (x *Request) GetGetFolder() *GetFolder {
	if x, ok := x.GetOperation().(*Request_GetFolder); ok {
		return x.GetFolder
	}
	return nil
}

func (x *Request) GetCreateFolder() *CreateFolder {
	if x, ok := x.GetOperation().(*Request_CreateFolder); ok {
		return x.CreateFolder
	}
	return nil
}

func (x *Request) GetCreateSnapshot() *CreateSnapshot {
	if x, ok := x.GetOperation().(*Request_CreateSnapshot); ok {
		return x.CreateSnapshot
	}
	return nil
}

func (x *Request) GetVerifyPayment() *VerifyPayment {
	if x, ok := x.GetOperation().(*Request_VerifyPayment); ok {
		return x.VerifyPayment
	}
	return nil
}

func (x *Request) GetGetSecret() *GetSecret {
	if x, ok := x.GetOperation().(*Request_GetSecret); ok {
		return x.GetSecret
	}
	return nil
}

func (x *Request) GetAddSecret() *AddSecret {
	if x, ok := x.GetOperation().(*Request_AddSecret); ok {
		return x.AddSecret
	}
	return nil
}

func (x *Request) GetDeleteSecret() *DeleteSecret {
	if x, ok := x.GetOperation().(*Request_DeleteSecret); ok {
		return x.DeleteSecret
	}
	return nil
}

func (x *Request) GetUpdateSecret() *UpdateSecret {
	if x, ok := x.GetOperation().(*Request_UpdateSecret); ok {
		return x.UpdateSecret
	}
	return nil
}

func (x *Request) GetListSecrets() *ListSecrets {
	if x, ok := x.GetOperation().(*Request_ListSecrets); ok {
		return x.ListSecrets
	}
	return nil
}

func (x *Request) GetQuickListSecrets() *QuickListSecrets {
	if x, ok := x.GetOperation().(*Request_QuickListSecrets); ok {
		return x.QuickListSecrets
	}
	return nil
}

func (x *Request) GetListSecretSubkeys() *ListSecretSubkeys {
	if x, ok := x.GetOperation().(*Request_ListSecretSubkeys); ok {
		return x.ListSecretSubkeys
	}
	return nil
}

func (x *Request) GetUndeleteSecret() *UndeleteSecret {
	if x, ok := x.GetOperation().(*Request_UndeleteSecret); ok {
		return x.UndeleteSecret
	}
	return nil
}

func (x *Request) GetDestroySecret() *DestroySecret {
	if x, ok := x.GetOperation().(*Request_DestroySecret); ok {
		return x.DestroySecret
	}
	return nil
}

func (x *Request) GetAddRole() *AddRole {
	if x, ok := x.GetOperation().(*Request_AddRole); ok {
		return x.AddRole
	}
	return nil
}

func (x *Request) GetRemoveRole() *RemoveRole {
	if x, ok := x.GetOperation().(*Request_RemoveRole); ok {
		return x.RemoveRole
	}
	return nil
}

func (x *Request) GetUpdateRole() *UpdateRole {
	if x, ok := x.GetOperation().(*Request_UpdateRole); ok {
		return x.UpdateRole
	}
	return nil
}

func (x *Request) GetListRoles() *ListRoles {
	if x, ok := x.GetOperation().(*Request_ListRoles); ok {
		return x.ListRoles
	}
	return nil
}

func (x *Request) GetGetRole() *GetRole {
	if x, ok := x.GetOperation().(*Request_GetRole); ok {
		return x.GetRole
	}
	return nil
}

func (x *Request) GetAddTeam() *AddTeam {
	if x, ok := x.GetOperation().(*Request_AddTeam); ok {
		return x.AddTeam
	}
	return nil
}

func (x *Request) GetRemoveTeam() *RemoveTeam {
	if x, ok := x.GetOperation().(*Request_RemoveTeam); ok {
		return x.RemoveTeam
	}
	return nil
}

func (x *Request) GetUpdateTeam() *UpdateTeam {
	if x, ok := x.GetOperation().(*Request_UpdateTeam); ok {
		return x.UpdateTeam
	}
	return nil
}

func (x *Request) GetListTeams() *ListTeams {
	if x, ok := x.GetOperation().(*Request_ListTeams); ok {
		return x.ListTeams
	}
	return nil
}

func (x *Request) GetGetTeam() *GetTeam {
	if x, ok := x.GetOperation().(*Request_GetTeam); ok {
		return x.GetTeam
	}
	return nil
}

func (x *Request) GetIsOperationAllowed() *IsOperationAllowed {
	if x, ok := x.GetOperation().(*Request_IsOperationAllowed); ok {
		return x.IsOperationAllowed
	}
	return nil
}

func (x *Request) GetMoveFile() *MoveFile {
	if x, ok := x.GetOperation().(*Request_MoveFile); ok {
		return x.MoveFile
	}
	return nil
}

func (x *Request) GetMoveFolder() *MoveFolder {
	if x, ok := x.GetOperation().(*Request_MoveFolder); ok {
		return x.MoveFolder
	}
	return nil
}

func (x *Request) GetCopyFile() *CopyFile {
	if x, ok := x.GetOperation().(*Request_CopyFile); ok {
		return x.CopyFile
	}
	return nil
}

func (x *Request) GetCopyFolder() *CopyFolder {
	if x, ok := x.GetOperation().(*Request_CopyFolder); ok {
		return x.CopyFolder
	}
	return nil
}

func (x *Request) GetRestoreVersion() *RestoreVersion {
	if x, ok := x.GetOperation().(*Request_RestoreVersion); ok {
		return x.RestoreVersion
	}
	return nil
}

func (x *Request) GetRemoveFile() *RemoveFile {
	if x, ok := x.GetOperation().(*Request_RemoveFile); ok {
		return x.RemoveFile
	}
	return nil
}

func (x *Request) GetRemoveFolder() *RemoveFolder {
	if x, ok := x.GetOperation().(*Request_RemoveFolder); ok {
		return x.RemoveFolder
	}
	return nil
}

func (x *Request) GetUntrashFile() *UntrashFile {
	if x, ok := x.GetOperation().(*Request_UntrashFile); ok {
		return x.UntrashFile
	}
	return nil
}

func (x *Request) GetUntrashFolder() *UntrashFolder {
	if x, ok := x.GetOperation().(*Request_UntrashFolder); ok {
		return x.UntrashFolder
	}
	return nil
}

func (x *Request) GetUndoStartWrite() *UndoStartWrite {
	if x, ok := x.GetOperation().(*Request_UndoStartWrite); ok {
		return x.UndoStartWrite
	}
	return nil
}

func (x *Request) GetDetachClonedFolder() *DetachClonedFolder {
	if x, ok := x.GetOperation().(*Request_DetachClonedFolder); ok {
		return x.DetachClonedFolder
	}
	return nil
}

func (x *Request) GetGetMetaFromPath() *GetMetaFromPath {
	if x, ok := x.GetOperation().(*Request_GetMetaFromPath); ok {
		return x.GetMetaFromPath
	}
	return nil
}

func (x *Request) GetRenameFile() *RenameFile {
	if x, ok := x.GetOperation().(*Request_RenameFile); ok {
		return x.RenameFile
	}
	return nil
}

func (x *Request) GetRenameFolder() *RenameFolder {
	if x, ok := x.GetOperation().(*Request_RenameFolder); ok {
		return x.RenameFolder
	}
	return nil
}

func (x *Request) GetList() *List {
	if x, ok := x.GetOperation().(*Request_List); ok {
		return x.List
	}
	return nil
}

func (x *Request) GetAuditLogMessage() *AuditLogMessage {
	if x, ok := x.GetOperation().(*Request_AuditLogMessage); ok {
		return x.AuditLogMessage
	}
	return nil
}

func (x *Request) GetResetVersion() *ResetVersion {
	if x, ok := x.GetOperation().(*Request_ResetVersion); ok {
		return x.ResetVersion
	}
	return nil
}

func (x *Request) GetSetUser() *SetUser {
	if x, ok := x.GetOperation().(*Request_SetUser); ok {
		return x.SetUser
	}
	return nil
}

func (x *Request) GetFinalizeProfileWrite() *FinalizeProfileWrite {
	if x, ok := x.GetOperation().(*Request_FinalizeProfileWrite); ok {
		return x.FinalizeProfileWrite
	}
	return nil
}

func (x *Request) GetGetProfileFileMeta() *GetProfileFileMeta {
	if x, ok := x.GetOperation().(*Request_GetProfileFileMeta); ok {
		return x.GetProfileFileMeta
	}
	return nil
}

func (x *Request) GetProfileChunkList() *ProfileChunkList {
	if x, ok := x.GetOperation().(*Request_ProfileChunkList); ok {
		return x.ProfileChunkList
	}
	return nil
}

func (x *Request) GetGetUserType() *GetUserType {
	if x, ok := x.GetOperation().(*Request_GetUserType); ok {
		return x.GetUserType
	}
	return nil
}

func (x *Request) GetGetRandomBytes() *GetRandomBytes {
	if x, ok := x.GetOperation().(*Request_GetRandomBytes); ok {
		return x.GetRandomBytes
	}
	return nil
}

func (x *Request) GetShare() *Share {
	if x, ok := x.GetOperation().(*Request_Share); ok {
		return x.Share
	}
	return nil
}

func (x *Request) GetUnshare() *Unshare {
	if x, ok := x.GetOperation().(*Request_Unshare); ok {
		return x.Unshare
	}
	return nil
}

func (x *Request) GetUpdateShare() *UpdateShare {
	if x, ok := x.GetOperation().(*Request_UpdateShare); ok {
		return x.UpdateShare
	}
	return nil
}

func (x *Request) GetListShares() *ListShares {
	if x, ok := x.GetOperation().(*Request_ListShares); ok {
		return x.ListShares
	}
	return nil
}

func (x *Request) GetResetTOTP() *ResetTOTP {
	if x, ok := x.GetOperation().(*Request_ResetTOTP); ok {
		return x.ResetTOTP
	}
	return nil
}

func (x *Request) GetSetRolesTeamsToUser() *SetRolesTeamsToUser {
	if x, ok := x.GetOperation().(*Request_SetRolesTeamsToUser); ok {
		return x.SetRolesTeamsToUser
	}
	return nil
}

func (x *Request) GetUpdatePinOps() *UpdatePinOps {
	if x, ok := x.GetOperation().(*Request_UpdatePinOps); ok {
		return x.UpdatePinOps
	}
	return nil
}

func (x *Request) GetDeletePin() *DeletePin {
	if x, ok := x.GetOperation().(*Request_DeletePin); ok {
		return x.DeletePin
	}
	return nil
}

func (x *Request) GetGetRolesAndTeamsOfUser() *GetRolesAndTeamsOfUser {
	if x, ok := x.GetOperation().(*Request_GetRolesAndTeamsOfUser); ok {
		return x.GetRolesAndTeamsOfUser
	}
	return nil
}

func (x *Request) GetRestartPutChunk() *RestartPutChunk {
	if x, ok := x.GetOperation().(*Request_RestartPutChunk); ok {
		return x.RestartPutChunk
	}
	return nil
}

func (x *Request) GetVerifyAuditLogMeta() *VerifyAuditLogMeta {
	if x, ok := x.GetOperation().(*Request_VerifyAuditLogMeta); ok {
		return x.VerifyAuditLogMeta
	}
	return nil
}

func (x *Request) GetGetAuditLog() *GetAuditLog {
	if x, ok := x.GetOperation().(*Request_GetAuditLog); ok {
		return x.GetAuditLog
	}
	return nil
}

func (x *Request) GetDeleteAuditLog() *DeleteAuditLog {
	if x, ok := x.GetOperation().(*Request_DeleteAuditLog); ok {
		return x.DeleteAuditLog
	}
	return nil
}

func (x *Request) GetGetLedgerRange() *GetLedgerRange {
	if x, ok := x.GetOperation().(*Request_GetLedgerRange); ok {
		return x.GetLedgerRange
	}
	return nil
}

func (x *Request) GetListPins() *ListPins {
	if x, ok := x.GetOperation().(*Request_ListPins); ok {
		return x.ListPins
	}
	return nil
}

func (x *Request) GetGetMetaFromSharedPath() *GetMetaFromSharedPath {
	if x, ok := x.GetOperation().(*Request_GetMetaFromSharedPath); ok {
		return x.GetMetaFromSharedPath
	}
	return nil
}

type isRequest_Operation interface {
	isRequest_Operation()
}

type Request_AddUser struct {
	AddUser *AddUser `protobuf:"bytes,1,opt,name=addUser,proto3,oneof"`
}

type Request_RemoveUser struct {
	RemoveUser *RemoveUser `protobuf:"bytes,2,opt,name=removeUser,proto3,oneof"`
}

type Request_PasswordReset struct {
	PasswordReset *PasswordReset `protobuf:"bytes,3,opt,name=passwordReset,proto3,oneof"`
}

type Request_ChangePassword struct {
	ChangePassword *ChangePassword `protobuf:"bytes,4,opt,name=changePassword,proto3,oneof"`
}

type Request_AddOrganization struct {
	AddOrganization *AddOrganization `protobuf:"bytes,5,opt,name=addOrganization,proto3,oneof"`
}

type Request_InitiatePayment struct {
	InitiatePayment *InitiatePayment `protobuf:"bytes,6,opt,name=initiatePayment,proto3,oneof"`
}

type Request_SignIn struct {
	SignIn *SignIn `protobuf:"bytes,7,opt,name=signIn,proto3,oneof"`
}

type Request_SignOut struct {
	SignOut *SignOut `protobuf:"bytes,8,opt,name=signOut,proto3,oneof"`
}

type Request_InviteUser struct {
	InviteUser *InviteUser `protobuf:"bytes,9,opt,name=inviteUser,proto3,oneof"`
}

type Request_GetUser struct {
	GetUser *GetUser `protobuf:"bytes,10,opt,name=getUser,proto3,oneof"`
}

type Request_ListUsers struct {
	ListUsers *ListUsers `protobuf:"bytes,11,opt,name=listUsers,proto3,oneof"`
}

type Request_RemoveOrganization struct {
	RemoveOrganization *RemoveOrganization `protobuf:"bytes,12,opt,name=removeOrganization,proto3,oneof"`
}

type Request_VerifyOrganization struct {
	VerifyOrganization *VerifyOrganization `protobuf:"bytes,13,opt,name=verifyOrganization,proto3,oneof"`
}

type Request_GetOrganization struct {
	GetOrganization *GetOrganization `protobuf:"bytes,14,opt,name=getOrganization,proto3,oneof"`
}

type Request_AddPin struct {
	AddPin *AddPin `protobuf:"bytes,15,opt,name=addPin,proto3,oneof"`
}

type Request_VerifyUser struct {
	VerifyUser *VerifyUser `protobuf:"bytes,16,opt,name=verifyUser,proto3,oneof"`
}

type Request_GetFileHead struct {
	GetFileHead *GetFileHead `protobuf:"bytes,17,opt,name=getFileHead,proto3,oneof"`
}

type Request_Echo struct {
	Echo *Echo `protobuf:"bytes,18,opt,name=echo,proto3,oneof"`
}

type Request_FileLock struct {
	FileLock *FileLock `protobuf:"bytes,19,opt,name=fileLock,proto3,oneof"`
}

type Request_FileUnlock struct {
	FileUnlock *FileUnlock `protobuf:"bytes,20,opt,name=fileUnlock,proto3,oneof"`
}

type Request_GetChunk struct {
	GetChunk *GetChunk `protobuf:"bytes,21,opt,name=getChunk,proto3,oneof"`
}

type Request_StartWrite struct {
	StartWrite *StartWrite `protobuf:"bytes,22,opt,name=startWrite,proto3,oneof"`
}

type Request_PutChunk struct {
	PutChunk *PutChunk `protobuf:"bytes,23,opt,name=putChunk,proto3,oneof"`
}

type Request_FinalizeWrite struct {
	FinalizeWrite *FinalizeWrite `protobuf:"bytes,24,opt,name=finalizeWrite,proto3,oneof"`
}

type Request_ListFiles struct {
	ListFiles *ListFiles `protobuf:"bytes,25,opt,name=listFiles,proto3,oneof"`
}

type Request_Remove struct {
	Remove *Remove `protobuf:"bytes,26,opt,name=remove,proto3,oneof"`
}

type Request_GetFolder struct {
	// Copy copy = 27;
	// Move move = 28;
	GetFolder *GetFolder `protobuf:"bytes,29,opt,name=getFolder,proto3,oneof"`
}

type Request_CreateFolder struct {
	CreateFolder *CreateFolder `protobuf:"bytes,30,opt,name=createFolder,proto3,oneof"`
}

type Request_CreateSnapshot struct {
	CreateSnapshot *CreateSnapshot `protobuf:"bytes,31,opt,name=CreateSnapshot,proto3,oneof"`
}

type Request_VerifyPayment struct {
	VerifyPayment *VerifyPayment `protobuf:"bytes,32,opt,name=VerifyPayment,proto3,oneof"`
}

type Request_GetSecret struct {
	GetSecret *GetSecret `protobuf:"bytes,33,opt,name=getSecret,proto3,oneof"`
}

type Request_AddSecret struct {
	AddSecret *AddSecret `protobuf:"bytes,34,opt,name=addSecret,proto3,oneof"`
}

type Request_DeleteSecret struct {
	DeleteSecret *DeleteSecret `protobuf:"bytes,35,opt,name=deleteSecret,proto3,oneof"`
}

type Request_UpdateSecret struct {
	UpdateSecret *UpdateSecret `protobuf:"bytes,36,opt,name=updateSecret,proto3,oneof"`
}

type Request_ListSecrets struct {
	ListSecrets *ListSecrets `protobuf:"bytes,37,opt,name=listSecrets,proto3,oneof"`
}

type Request_QuickListSecrets struct {
	QuickListSecrets *QuickListSecrets `protobuf:"bytes,87,opt,name=quickListSecrets,proto3,oneof"`
}

type Request_ListSecretSubkeys struct {
	ListSecretSubkeys *ListSecretSubkeys `protobuf:"bytes,38,opt,name=listSecretSubkeys,proto3,oneof"`
}

type Request_UndeleteSecret struct {
	UndeleteSecret *UndeleteSecret `protobuf:"bytes,39,opt,name=undeleteSecret,proto3,oneof"`
}

type Request_DestroySecret struct {
	DestroySecret *DestroySecret `protobuf:"bytes,40,opt,name=destroySecret,proto3,oneof"`
}

type Request_AddRole struct {
	AddRole *AddRole `protobuf:"bytes,41,opt,name=addRole,proto3,oneof"`
}

type Request_RemoveRole struct {
	RemoveRole *RemoveRole `protobuf:"bytes,42,opt,name=removeRole,proto3,oneof"`
}

type Request_UpdateRole struct {
	UpdateRole *UpdateRole `protobuf:"bytes,43,opt,name=updateRole,proto3,oneof"`
}

type Request_ListRoles struct {
	ListRoles *ListRoles `protobuf:"bytes,44,opt,name=listRoles,proto3,oneof"`
}

type Request_GetRole struct {
	GetRole *GetRole `protobuf:"bytes,81,opt,name=getRole,proto3,oneof"`
}

type Request_AddTeam struct {
	AddTeam *AddTeam `protobuf:"bytes,45,opt,name=addTeam,proto3,oneof"`
}

type Request_RemoveTeam struct {
	RemoveTeam *RemoveTeam `protobuf:"bytes,46,opt,name=removeTeam,proto3,oneof"`
}

type Request_UpdateTeam struct {
	UpdateTeam *UpdateTeam `protobuf:"bytes,47,opt,name=updateTeam,proto3,oneof"`
}

type Request_ListTeams struct {
	ListTeams *ListTeams `protobuf:"bytes,48,opt,name=listTeams,proto3,oneof"`
}

type Request_GetTeam struct {
	GetTeam *GetTeam `protobuf:"bytes,80,opt,name=getTeam,proto3,oneof"`
}

type Request_IsOperationAllowed struct {
	IsOperationAllowed *IsOperationAllowed `protobuf:"bytes,49,opt,name=isOperationAllowed,proto3,oneof"`
}

type Request_MoveFile struct {
	MoveFile *MoveFile `protobuf:"bytes,50,opt,name=moveFile,proto3,oneof"`
}

type Request_MoveFolder struct {
	MoveFolder *MoveFolder `protobuf:"bytes,51,opt,name=moveFolder,proto3,oneof"`
}

type Request_CopyFile struct {
	CopyFile *CopyFile `protobuf:"bytes,52,opt,name=copyFile,proto3,oneof"`
}

type Request_CopyFolder struct {
	CopyFolder *CopyFolder `protobuf:"bytes,53,opt,name=copyFolder,proto3,oneof"`
}

type Request_RestoreVersion struct {
	RestoreVersion *RestoreVersion `protobuf:"bytes,54,opt,name=restoreVersion,proto3,oneof"`
}

type Request_RemoveFile struct {
	RemoveFile *RemoveFile `protobuf:"bytes,55,opt,name=removeFile,proto3,oneof"`
}

type Request_RemoveFolder struct {
	RemoveFolder *RemoveFolder `protobuf:"bytes,56,opt,name=removeFolder,proto3,oneof"`
}

type Request_UntrashFile struct {
	UntrashFile *UntrashFile `protobuf:"bytes,57,opt,name=untrashFile,proto3,oneof"`
}

type Request_UntrashFolder struct {
	UntrashFolder *UntrashFolder `protobuf:"bytes,58,opt,name=untrashFolder,proto3,oneof"`
}

type Request_UndoStartWrite struct {
	UndoStartWrite *UndoStartWrite `protobuf:"bytes,59,opt,name=undoStartWrite,proto3,oneof"`
}

type Request_DetachClonedFolder struct {
	DetachClonedFolder *DetachClonedFolder `protobuf:"bytes,60,opt,name=detachClonedFolder,proto3,oneof"`
}

type Request_GetMetaFromPath struct {
	GetMetaFromPath *GetMetaFromPath `protobuf:"bytes,61,opt,name=getMetaFromPath,proto3,oneof"`
}

type Request_RenameFile struct {
	RenameFile *RenameFile `protobuf:"bytes,62,opt,name=renameFile,proto3,oneof"`
}

type Request_RenameFolder struct {
	RenameFolder *RenameFolder `protobuf:"bytes,63,opt,name=renameFolder,proto3,oneof"`
}

type Request_List struct {
	List *List `protobuf:"bytes,64,opt,name=list,proto3,oneof"`
}

type Request_AuditLogMessage struct {
	AuditLogMessage *AuditLogMessage `protobuf:"bytes,65,opt,name=auditLogMessage,proto3,oneof"`
}

type Request_ResetVersion struct {
	ResetVersion *ResetVersion `protobuf:"bytes,66,opt,name=resetVersion,proto3,oneof"`
}

type Request_SetUser struct {
	SetUser *SetUser `protobuf:"bytes,67,opt,name=setUser,proto3,oneof"`
}

type Request_FinalizeProfileWrite struct {
	FinalizeProfileWrite *FinalizeProfileWrite `protobuf:"bytes,68,opt,name=finalizeProfileWrite,proto3,oneof"`
}

type Request_GetProfileFileMeta struct {
	GetProfileFileMeta *GetProfileFileMeta `protobuf:"bytes,69,opt,name=getProfileFileMeta,proto3,oneof"`
}

type Request_ProfileChunkList struct {
	ProfileChunkList *ProfileChunkList `protobuf:"bytes,70,opt,name=profileChunkList,proto3,oneof"`
}

type Request_GetUserType struct {
	GetUserType *GetUserType `protobuf:"bytes,71,opt,name=getUserType,proto3,oneof"`
}

type Request_GetRandomBytes struct {
	GetRandomBytes *GetRandomBytes `protobuf:"bytes,72,opt,name=getRandomBytes,proto3,oneof"`
}

type Request_Share struct {
	Share *Share `protobuf:"bytes,73,opt,name=share,proto3,oneof"`
}

type Request_Unshare struct {
	Unshare *Unshare `protobuf:"bytes,74,opt,name=unshare,proto3,oneof"`
}

type Request_UpdateShare struct {
	UpdateShare *UpdateShare `protobuf:"bytes,75,opt,name=updateShare,proto3,oneof"`
}

type Request_ListShares struct {
	ListShares *ListShares `protobuf:"bytes,76,opt,name=listShares,proto3,oneof"`
}

type Request_ResetTOTP struct {
	ResetTOTP *ResetTOTP `protobuf:"bytes,77,opt,name=resetTOTP,proto3,oneof"`
}

type Request_SetRolesTeamsToUser struct {
	// AssignRoleToUser assignRoleToUser = 78;
	// DeleteRoleFromUser deleteRoleFromUser = 79;
	// AssignTeamToUser assignTeamToUser = 82;
	// DeleteTeamFromUser deleteTeamFromUser = 83;
	SetRolesTeamsToUser *SetRolesTeamsToUser `protobuf:"bytes,83,opt,name=setRolesTeamsToUser,proto3,oneof"`
}

type Request_UpdatePinOps struct {
	UpdatePinOps *UpdatePinOps `protobuf:"bytes,84,opt,name=updatePinOps,proto3,oneof"`
}

type Request_DeletePin struct {
	DeletePin *DeletePin `protobuf:"bytes,85,opt,name=deletePin,proto3,oneof"`
}

type Request_GetRolesAndTeamsOfUser struct {
	GetRolesAndTeamsOfUser *GetRolesAndTeamsOfUser `protobuf:"bytes,86,opt,name=getRolesAndTeamsOfUser,proto3,oneof"`
}

type Request_RestartPutChunk struct {
	RestartPutChunk *RestartPutChunk `protobuf:"bytes,88,opt,name=restartPutChunk,proto3,oneof"`
}

type Request_VerifyAuditLogMeta struct {
	VerifyAuditLogMeta *VerifyAuditLogMeta `protobuf:"bytes,89,opt,name=verifyAuditLogMeta,proto3,oneof"`
}

type Request_GetAuditLog struct {
	GetAuditLog *GetAuditLog `protobuf:"bytes,90,opt,name=getAuditLog,proto3,oneof"`
}

type Request_DeleteAuditLog struct {
	DeleteAuditLog *DeleteAuditLog `protobuf:"bytes,91,opt,name=deleteAuditLog,proto3,oneof"`
}

type Request_GetLedgerRange struct {
	GetLedgerRange *GetLedgerRange `protobuf:"bytes,92,opt,name=getLedgerRange,proto3,oneof"`
}

type Request_ListPins struct {
	ListPins *ListPins `protobuf:"bytes,93,opt,name=listPins,proto3,oneof"`
}

type Request_GetMetaFromSharedPath struct {
	// GetPolicyFromName getPolicyFromName = 92;
	GetMetaFromSharedPath *GetMetaFromSharedPath `protobuf:"bytes,94,opt,name=getMetaFromSharedPath,proto3,oneof"`
}

func (*Request_AddUser) isRequest_Operation() {}

func (*Request_RemoveUser) isRequest_Operation() {}

func (*Request_PasswordReset) isRequest_Operation() {}

func (*Request_ChangePassword) isRequest_Operation() {}

func (*Request_AddOrganization) isRequest_Operation() {}

func (*Request_InitiatePayment) isRequest_Operation() {}

func (*Request_SignIn) isRequest_Operation() {}

func (*Request_SignOut) isRequest_Operation() {}

func (*Request_InviteUser) isRequest_Operation() {}

func (*Request_GetUser) isRequest_Operation() {}

func (*Request_ListUsers) isRequest_Operation() {}

func (*Request_RemoveOrganization) isRequest_Operation() {}

func (*Request_VerifyOrganization) isRequest_Operation() {}

func (*Request_GetOrganization) isRequest_Operation() {}

func (*Request_AddPin) isRequest_Operation() {}

func (*Request_VerifyUser) isRequest_Operation() {}

func (*Request_GetFileHead) isRequest_Operation() {}

func (*Request_Echo) isRequest_Operation() {}

func (*Request_FileLock) isRequest_Operation() {}

func (*Request_FileUnlock) isRequest_Operation() {}

func (*Request_GetChunk) isRequest_Operation() {}

func (*Request_StartWrite) isRequest_Operation() {}

func (*Request_PutChunk) isRequest_Operation() {}

func (*Request_FinalizeWrite) isRequest_Operation() {}

func (*Request_ListFiles) isRequest_Operation() {}

func (*Request_Remove) isRequest_Operation() {}

func (*Request_GetFolder) isRequest_Operation() {}

func (*Request_CreateFolder) isRequest_Operation() {}

func (*Request_CreateSnapshot) isRequest_Operation() {}

func (*Request_VerifyPayment) isRequest_Operation() {}

func (*Request_GetSecret) isRequest_Operation() {}

func (*Request_AddSecret) isRequest_Operation() {}

func (*Request_DeleteSecret) isRequest_Operation() {}

func (*Request_UpdateSecret) isRequest_Operation() {}

func (*Request_ListSecrets) isRequest_Operation() {}

func (*Request_QuickListSecrets) isRequest_Operation() {}

func (*Request_ListSecretSubkeys) isRequest_Operation() {}

func (*Request_UndeleteSecret) isRequest_Operation() {}

func (*Request_DestroySecret) isRequest_Operation() {}

func (*Request_AddRole) isRequest_Operation() {}

func (*Request_RemoveRole) isRequest_Operation() {}

func (*Request_UpdateRole) isRequest_Operation() {}

func (*Request_ListRoles) isRequest_Operation() {}

func (*Request_GetRole) isRequest_Operation() {}

func (*Request_AddTeam) isRequest_Operation() {}

func (*Request_RemoveTeam) isRequest_Operation() {}

func (*Request_UpdateTeam) isRequest_Operation() {}

func (*Request_ListTeams) isRequest_Operation() {}

func (*Request_GetTeam) isRequest_Operation() {}

func (*Request_IsOperationAllowed) isRequest_Operation() {}

func (*Request_MoveFile) isRequest_Operation() {}

func (*Request_MoveFolder) isRequest_Operation() {}

func (*Request_CopyFile) isRequest_Operation() {}

func (*Request_CopyFolder) isRequest_Operation() {}

func (*Request_RestoreVersion) isRequest_Operation() {}

func (*Request_RemoveFile) isRequest_Operation() {}

func (*Request_RemoveFolder) isRequest_Operation() {}

func (*Request_UntrashFile) isRequest_Operation() {}

func (*Request_UntrashFolder) isRequest_Operation() {}

func (*Request_UndoStartWrite) isRequest_Operation() {}

func (*Request_DetachClonedFolder) isRequest_Operation() {}

func (*Request_GetMetaFromPath) isRequest_Operation() {}

func (*Request_RenameFile) isRequest_Operation() {}

func (*Request_RenameFolder) isRequest_Operation() {}

func (*Request_List) isRequest_Operation() {}

func (*Request_AuditLogMessage) isRequest_Operation() {}

func (*Request_ResetVersion) isRequest_Operation() {}

func (*Request_SetUser) isRequest_Operation() {}

func (*Request_FinalizeProfileWrite) isRequest_Operation() {}

func (*Request_GetProfileFileMeta) isRequest_Operation() {}

func (*Request_ProfileChunkList) isRequest_Operation() {}

func (*Request_GetUserType) isRequest_Operation() {}

func (*Request_GetRandomBytes) isRequest_Operation() {}

func (*Request_Share) isRequest_Operation() {}

func (*Request_Unshare) isRequest_Operation() {}

func (*Request_UpdateShare) isRequest_Operation() {}

func (*Request_ListShares) isRequest_Operation() {}

func (*Request_ResetTOTP) isRequest_Operation() {}

func (*Request_SetRolesTeamsToUser) isRequest_Operation() {}

func (*Request_UpdatePinOps) isRequest_Operation() {}

func (*Request_DeletePin) isRequest_Operation() {}

func (*Request_GetRolesAndTeamsOfUser) isRequest_Operation() {}

func (*Request_RestartPutChunk) isRequest_Operation() {}

func (*Request_VerifyAuditLogMeta) isRequest_Operation() {}

func (*Request_GetAuditLog) isRequest_Operation() {}

func (*Request_DeleteAuditLog) isRequest_Operation() {}

func (*Request_GetLedgerRange) isRequest_Operation() {}

func (*Request_ListPins) isRequest_Operation() {}

func (*Request_GetMetaFromSharedPath) isRequest_Operation() {}

var File_request_proto protoreflect.FileDescriptor

var file_request_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x50, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x52, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36,
	0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22,
	0x60, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69,
	0x64, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x53, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x6f, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x4f, 0x74, 0x70, 0x22, 0x70, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x27, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x01,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x6f, 0x74, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x67, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x7f, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x6f, 0x74, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x4f, 0x74, 0x70, 0x22, 0x62, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x22, 0x27, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x4f, 0x54, 0x50, 0x22, 0x46, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x27, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x12, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04,
	0x74, 0x6f, 0x74, 0x70, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x6f, 0x74, 0x70, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x70, 0x69, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x1f, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x1f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x3b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x22, 0x30,
	0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x92, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x02, 0x69, 0x76, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x76, 0x22, 0x69, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xd6, 0x03, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3c, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x75, 0x6c,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x35,
	0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f,
	0x66, 0x50, 0x61, 0x74, 0x68, 0x22, 0x8e, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x4a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0xc2, 0x02, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x48, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x22, 0x76, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x22, 0x28, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x70,
	0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xbd, 0x02,
	0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xd3, 0x01,
	0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x05, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x75, 0x69, 0x64, 0x5f,
	0x6f, 0x66, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x75, 0x75, 0x69, 0x64, 0x4f, 0x66, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x89, 0x02, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0d,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x44, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72,
	0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a,
	0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x5e, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x22, 0x49, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x22, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x23, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x24, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x8b, 0x01, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x08, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12,
	0x1e, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x03, 0x0a,
	0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x6b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7f, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x0d,
	0x50, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x44, 0x62, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x29, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x4f,
	0x70, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x11, 0x50, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x30, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4f, 0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x20, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x36, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x22, 0x1d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x22,
	0x51, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x65,
	0x72, 0x6d, 0x22, 0x33, 0x0a, 0x0b, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x39, 0x0a, 0x0d, 0x55, 0x6e, 0x74, 0x72, 0x61,
	0x73, 0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x2c, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x56, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a,
	0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x02, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f,
	0x66, 0x50, 0x61, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x22, 0xab, 0x01, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x64, 0x0a, 0x0f, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6c,
	0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x28, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x24, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x12, 0x48,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x55, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x4d, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x0b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x70, 0x49, 0x64, 0x73, 0x22, 0xae,
	0x01, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x27, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x43, 0x4c, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x2a, 0x0a, 0x07, 0x55, 0x6e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x2d, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x03,
	0x61, 0x63, 0x6c, 0x22, 0x2d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x8a, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x34,
	0x0a, 0x14, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x11,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x53, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x55, 0x75,
	0x69, 0x64, 0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0xd4, 0x29, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12,
	0x2c, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f,
	0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x35, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x64,
	0x64, 0x50, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x64, 0x64, 0x50, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x0d,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x67,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x3e, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x41, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x35, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x48,
	0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x0a,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x4d, 0x0a, 0x12, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x35, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x64,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3b,
	0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x4f, 0x54, 0x50, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x4f, 0x54, 0x50, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x4f, 0x54, 0x50, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x6e, 0x4f, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x6e, 0x4f, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x69, 0x6e, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x16, 0x67, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x6e, 0x73, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x2a, 0x24, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x72, 0x6f, 0x10, 0x02, 0x2a, 0x2b, 0x0a, 0x0a,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x0a, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x45, 0x59, 0x53, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x4b, 0x45, 0x59,
	0x10, 0x07, 0x2a, 0xfb, 0x02, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x69,
	0x6e, 0x4f, 0x70, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x69, 0x6e, 0x4f,
	0x70, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x69, 0x6e, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x10, 0x19, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x10, 0x34, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x69, 0x6e, 0x4f, 0x70,
	0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x69,
	0x6e, 0x4f, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x42, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x69, 0x6e,
	0x4f, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x32, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x69, 0x6e, 0x4f, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10,
	0x37, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x4f,
	0x70, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x33, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x10, 0x38, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x41, 0x64, 0x64,
	0x50, 0x69, 0x6e, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x10, 0x54, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x69, 0x6e,
	0x4f, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x10, 0x36, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x73, 0x10, 0x5b,
	0x2a, 0x22, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x50, 0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x52, 0x4f, 0x57, 0x53,
	0x45, 0x52, 0x10, 0x01, 0x2a, 0xaa, 0x0c, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x70, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x70, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x09,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0x0a, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0x0b,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x70, 0x41, 0x64, 0x64, 0x50, 0x69, 0x6e, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x10, 0x36, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x70, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74,
	0x68, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x50, 0x75, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x10, 0x19, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x4f,
	0x70, 0x43, 0x6f, 0x70, 0x79, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x4d, 0x6f, 0x76,
	0x65, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x10, 0x1f, 0x12, 0x13,
	0x0a, 0x0f, 0x4f, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x24, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x10, 0x25,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x10, 0x57, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x10,
	0x26, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x28, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x70, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x29, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x2a, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x2b, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x10, 0x2c,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x51, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x70, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x31, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x10, 0x2d, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x70,
	0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x2f, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x30, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x50, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x32, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x33, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x34, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x35,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x52, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x37, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x70, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x38, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x70, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x39, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x10, 0x3a, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x55, 0x6e, 0x64, 0x6f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x3b, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x10, 0x3c, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x10, 0x45, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x3e,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x70, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x10, 0x3f, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x40,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x41, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x70, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x42, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x70, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x10, 0x44, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x47, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x48, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10, 0x49, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x70, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x10, 0x4a, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10, 0x4b, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x10, 0x4c,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x4f, 0x54, 0x50, 0x10,
	0x4d, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x70, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x10, 0x53, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x73, 0x10, 0x54,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x70, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x10, 0x56, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x10, 0x58, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x70, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x10, 0x59, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x10,
	0x5a, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x73, 0x10,
	0x5b, 0x2a, 0x68, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x10, 0x06, 0x2a, 0x39, 0x0a, 0x0a, 0x54,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x10, 0x02, 0x2a, 0x1d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x45, 0x4e, 0x59, 0x10, 0x01, 0x2a, 0x21, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_request_proto_rawDescOnce sync.Once
	file_request_proto_rawDescData = file_request_proto_rawDesc
)

func file_request_proto_rawDescGZIP() []byte {
	file_request_proto_rawDescOnce.Do(func() {
		file_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_request_proto_rawDescData)
	})
	return file_request_proto_rawDescData
}

var file_request_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_request_proto_msgTypes = make([]protoimpl.MessageInfo, 120)
var file_request_proto_goTypes = []interface{}{
	(Plan)(0),                      // 0: request.Plan
	(ChunkFlags)(0),                // 1: request.ChunkFlags
	(OrderBy)(0),                   // 2: request.OrderBy
	(SecretType)(0),                // 3: request.SecretType
	(AllowedPinOp)(0),              // 4: request.AllowedPinOp
	(ClientType)(0),                // 5: request.ClientType
	(Op)(0),                        // 6: request.Op
	(ListType)(0),                  // 7: request.ListType
	(TypeOfPath)(0),                // 8: request.TypeOfPath
	(Action)(0),                    // 9: request.Action
	(SubjectType)(0),               // 10: request.SubjectType
	(*AddUser)(nil),                // 11: request.AddUser
	(*AddPin)(nil),                 // 12: request.AddPin
	(*UpdatePinOps)(nil),           // 13: request.UpdatePinOps
	(*DeletePin)(nil),              // 14: request.DeletePin
	(*VerifyUser)(nil),             // 15: request.VerifyUser
	(*RemoveUser)(nil),             // 16: request.RemoveUser
	(*PasswordReset)(nil),          // 17: request.PasswordReset
	(*ChangePassword)(nil),         // 18: request.ChangePassword
	(*AddOrganization)(nil),        // 19: request.AddOrganization
	(*VerifyOrganization)(nil),     // 20: request.VerifyOrganization
	(*RemoveOrganization)(nil),     // 21: request.RemoveOrganization
	(*GetOrganization)(nil),        // 22: request.GetOrganization
	(*ResetTOTP)(nil),              // 23: request.ResetTOTP
	(*InviteUser)(nil),             // 24: request.InviteUser
	(*InitiatePayment)(nil),        // 25: request.InitiatePayment
	(*VerifyPayment)(nil),          // 26: request.VerifyPayment
	(*SignIn)(nil),                 // 27: request.SignIn
	(*SignOut)(nil),                // 28: request.SignOut
	(*GetUser)(nil),                // 29: request.GetUser
	(*GetFileHead)(nil),            // 30: request.GetFileHead
	(*Echo)(nil),                   // 31: request.Echo
	(*Chunk)(nil),                  // 32: request.Chunk
	(*FileVersion)(nil),            // 33: request.FileVersion
	(*File)(nil),                   // 34: request.File
	(*FileLock)(nil),               // 35: request.FileLock
	(*FileUnlock)(nil),             // 36: request.FileUnlock
	(*GetChunk)(nil),               // 37: request.GetChunk
	(*StartWrite)(nil),             // 38: request.StartWrite
	(*PutChunk)(nil),               // 39: request.PutChunk
	(*ResetVersion)(nil),           // 40: request.ResetVersion
	(*FinalizeWrite)(nil),          // 41: request.FinalizeWrite
	(*ListFiles)(nil),              // 42: request.ListFiles
	(*GetMetaFromPath)(nil),        // 43: request.GetMetaFromPath
	(*GetProfileFileMeta)(nil),     // 44: request.GetProfileFileMeta
	(*Remove)(nil),                 // 45: request.Remove
	(*Copy)(nil),                   // 46: request.Copy
	(*CopyFolder)(nil),             // 47: request.CopyFolder
	(*CopyFile)(nil),               // 48: request.CopyFile
	(*MoveFile)(nil),               // 49: request.MoveFile
	(*MoveFolder)(nil),             // 50: request.MoveFolder
	(*Child)(nil),                  // 51: request.Child
	(*FolderSnapshot)(nil),         // 52: request.FolderSnapshot
	(*Folder)(nil),                 // 53: request.Folder
	(*GetFolder)(nil),              // 54: request.GetFolder
	(*KeyValMapping)(nil),          // 55: request.KeyValMapping
	(*Policy)(nil),                 // 56: request.Policy
	(*CreateFolder)(nil),           // 57: request.CreateFolder
	(*GetPolicyFromName)(nil),      // 58: request.GetPolicyFromName
	(*CreateSnapshot)(nil),         // 59: request.CreateSnapshot
	(*GetSecret)(nil),              // 60: request.GetSecret
	(*AddSecret)(nil),              // 61: request.AddSecret
	(*DeleteSecret)(nil),           // 62: request.DeleteSecret
	(*DestroySecret)(nil),          // 63: request.DestroySecret
	(*UpdateSecret)(nil),           // 64: request.UpdateSecret
	(*ListSecrets)(nil),            // 65: request.ListSecrets
	(*QuickListSecrets)(nil),       // 66: request.QuickListSecrets
	(*ListSecretSubkeys)(nil),      // 67: request.ListSecretSubkeys
	(*UndeleteSecret)(nil),         // 68: request.UndeleteSecret
	(*Password)(nil),               // 69: request.Password
	(*Card)(nil),                   // 70: request.Card
	(*Note)(nil),                   // 71: request.Note
	(*Identity)(nil),               // 72: request.Identity
	(*KeyValue)(nil),               // 73: request.KeyValue
	(*Key)(nil),                    // 74: request.Key
	(*Certificate)(nil),            // 75: request.Certificate
	(*PrivateKey)(nil),             // 76: request.PrivateKey
	(*SecretData)(nil),             // 77: request.SecretData
	(*SecretVersion)(nil),          // 78: request.SecretVersion
	(*Secret)(nil),                 // 79: request.Secret
	(*GetRandomBytes)(nil),         // 80: request.GetRandomBytes
	(*SetRolesTeamsToUser)(nil),    // 81: request.SetRolesTeamsToUser
	(*PinObjectInDb)(nil),          // 82: request.PinObjectInDb
	(*PinObjectResponse)(nil),      // 83: request.PinObjectResponse
	(*Role)(nil),                   // 84: request.Role
	(*AddRole)(nil),                // 85: request.AddRole
	(*RemoveRole)(nil),             // 86: request.RemoveRole
	(*UpdateRole)(nil),             // 87: request.UpdateRole
	(*ListRoles)(nil),              // 88: request.ListRoles
	(*GetRole)(nil),                // 89: request.GetRole
	(*Team)(nil),                   // 90: request.Team
	(*AddTeam)(nil),                // 91: request.AddTeam
	(*RemoveTeam)(nil),             // 92: request.RemoveTeam
	(*UpdateTeam)(nil),             // 93: request.UpdateTeam
	(*ListTeams)(nil),              // 94: request.ListTeams
	(*GetTeam)(nil),                // 95: request.GetTeam
	(*IsOperationAllowed)(nil),     // 96: request.IsOperationAllowed
	(*RestoreVersion)(nil),         // 97: request.RestoreVersion
	(*RemoveFile)(nil),             // 98: request.RemoveFile
	(*RemoveFolder)(nil),           // 99: request.RemoveFolder
	(*UntrashFile)(nil),            // 100: request.UntrashFile
	(*UntrashFolder)(nil),          // 101: request.UntrashFolder
	(*UndoStartWrite)(nil),         // 102: request.UndoStartWrite
	(*DetachClonedFolder)(nil),     // 103: request.DetachClonedFolder
	(*RenameFile)(nil),             // 104: request.RenameFile
	(*RenameFolder)(nil),           // 105: request.RenameFolder
	(*ListPins)(nil),               // 106: request.ListPins
	(*List)(nil),                   // 107: request.List
	(*ProfileChunkList)(nil),       // 108: request.ProfileChunkList
	(*AuditLogMessage)(nil),        // 109: request.AuditLogMessage
	(*VerifyAuditLogMeta)(nil),     // 110: request.VerifyAuditLogMeta
	(*GetLedgerRange)(nil),         // 111: request.GetLedgerRange
	(*GetAuditLog)(nil),            // 112: request.GetAuditLog
	(*DeleteAuditLog)(nil),         // 113: request.DeleteAuditLog
	(*UserProfile)(nil),            // 114: request.UserProfile
	(*OrganizationProfile)(nil),    // 115: request.OrganizationProfile
	(*UserProfileMeta)(nil),        // 116: request.UserProfileMeta
	(*SetUser)(nil),                // 117: request.SetUser
	(*FinalizeProfileWrite)(nil),   // 118: request.FinalizeProfileWrite
	(*GetUserType)(nil),            // 119: request.GetUserType
	(*ActionEntry)(nil),            // 120: request.ActionEntry
	(*ACL)(nil),                    // 121: request.ACL
	(*Share)(nil),                  // 122: request.Share
	(*Unshare)(nil),                // 123: request.Unshare
	(*UpdateShare)(nil),            // 124: request.UpdateShare
	(*ListShares)(nil),             // 125: request.ListShares
	(*GetRolesAndTeamsOfUser)(nil), // 126: request.GetRolesAndTeamsOfUser
	(*ListUsers)(nil),              // 127: request.ListUsers
	(*RestartPutChunk)(nil),        // 128: request.RestartPutChunk
	(*GetMetaFromSharedPath)(nil),  // 129: request.GetMetaFromSharedPath
	(*Request)(nil),                // 130: request.Request
}
var file_request_proto_depIdxs = []int32{
	4,   // 0: request.AddPin.allowed_ops:type_name -> request.AllowedPinOp
	4,   // 1: request.UpdatePinOps.allowed_ops:type_name -> request.AllowedPinOp
	0,   // 2: request.InitiatePayment.plan:type_name -> request.Plan
	32,  // 3: request.FileVersion.chunks:type_name -> request.Chunk
	33,  // 4: request.File.versions:type_name -> request.FileVersion
	33,  // 5: request.File.currentVersion:type_name -> request.FileVersion
	1,   // 6: request.GetChunk.flag:type_name -> request.ChunkFlags
	8,   // 7: request.GetChunk.type_of_path:type_name -> request.TypeOfPath
	8,   // 8: request.StartWrite.type_of_path:type_name -> request.TypeOfPath
	1,   // 9: request.PutChunk.flag:type_name -> request.ChunkFlags
	2,   // 10: request.ListFiles.order_by:type_name -> request.OrderBy
	8,   // 11: request.GetMetaFromPath.type_of_path:type_name -> request.TypeOfPath
	8,   // 12: request.CopyFolder.type_of_path:type_name -> request.TypeOfPath
	8,   // 13: request.CopyFile.type_of_path:type_name -> request.TypeOfPath
	52,  // 14: request.Folder.snapshots:type_name -> request.FolderSnapshot
	55,  // 15: request.Policy.attr_to_value:type_name -> request.KeyValMapping
	8,   // 16: request.CreateFolder.type_of_path:type_name -> request.TypeOfPath
	56,  // 17: request.CreateFolder.policy:type_name -> request.Policy
	8,   // 18: request.GetPolicyFromName.type_of_path:type_name -> request.TypeOfPath
	77,  // 19: request.AddSecret.secret_data:type_name -> request.SecretData
	77,  // 20: request.UpdateSecret.secret_data:type_name -> request.SecretData
	3,   // 21: request.SecretData.type:type_name -> request.SecretType
	69,  // 22: request.SecretData.password:type_name -> request.Password
	70,  // 23: request.SecretData.card:type_name -> request.Card
	71,  // 24: request.SecretData.note:type_name -> request.Note
	72,  // 25: request.SecretData.identity:type_name -> request.Identity
	73,  // 26: request.SecretData.keyValue:type_name -> request.KeyValue
	74,  // 27: request.SecretData.key:type_name -> request.Key
	75,  // 28: request.SecretData.certificate:type_name -> request.Certificate
	76,  // 29: request.SecretData.privatekey:type_name -> request.PrivateKey
	77,  // 30: request.SecretVersion.secret_data:type_name -> request.SecretData
	78,  // 31: request.Secret.versions:type_name -> request.SecretVersion
	5,   // 32: request.PinObjectInDb.ctype:type_name -> request.ClientType
	6,   // 33: request.PinObjectInDb.allowed_pin_ops:type_name -> request.Op
	6,   // 34: request.Role.permissions:type_name -> request.Op
	6,   // 35: request.AddRole.permissions:type_name -> request.Op
	6,   // 36: request.UpdateRole.permissions:type_name -> request.Op
	6,   // 37: request.IsOperationAllowed.operation:type_name -> request.Op
	7,   // 38: request.List.type:type_name -> request.ListType
	2,   // 39: request.List.order_by:type_name -> request.OrderBy
	8,   // 40: request.List.type_of_path:type_name -> request.TypeOfPath
	1,   // 41: request.GetAuditLog.chunkFlags:type_name -> request.ChunkFlags
	114, // 42: request.UserProfileMeta.userObj:type_name -> request.UserProfile
	115, // 43: request.UserProfileMeta.organizationObj:type_name -> request.OrganizationProfile
	116, // 44: request.SetUser.usermeta:type_name -> request.UserProfileMeta
	9,   // 45: request.ActionEntry.action:type_name -> request.Action
	10,  // 46: request.ActionEntry.subject_type:type_name -> request.SubjectType
	120, // 47: request.ACL.actions:type_name -> request.ActionEntry
	8,   // 48: request.ACL.type_of_path:type_name -> request.TypeOfPath
	121, // 49: request.Share.acl:type_name -> request.ACL
	121, // 50: request.UpdateShare.acl:type_name -> request.ACL
	11,  // 51: request.Request.addUser:type_name -> request.AddUser
	16,  // 52: request.Request.removeUser:type_name -> request.RemoveUser
	17,  // 53: request.Request.passwordReset:type_name -> request.PasswordReset
	18,  // 54: request.Request.changePassword:type_name -> request.ChangePassword
	19,  // 55: request.Request.addOrganization:type_name -> request.AddOrganization
	25,  // 56: request.Request.initiatePayment:type_name -> request.InitiatePayment
	27,  // 57: request.Request.signIn:type_name -> request.SignIn
	28,  // 58: request.Request.signOut:type_name -> request.SignOut
	24,  // 59: request.Request.inviteUser:type_name -> request.InviteUser
	29,  // 60: request.Request.getUser:type_name -> request.GetUser
	127, // 61: request.Request.listUsers:type_name -> request.ListUsers
	21,  // 62: request.Request.removeOrganization:type_name -> request.RemoveOrganization
	20,  // 63: request.Request.verifyOrganization:type_name -> request.VerifyOrganization
	22,  // 64: request.Request.getOrganization:type_name -> request.GetOrganization
	12,  // 65: request.Request.addPin:type_name -> request.AddPin
	15,  // 66: request.Request.verifyUser:type_name -> request.VerifyUser
	30,  // 67: request.Request.getFileHead:type_name -> request.GetFileHead
	31,  // 68: request.Request.echo:type_name -> request.Echo
	35,  // 69: request.Request.fileLock:type_name -> request.FileLock
	36,  // 70: request.Request.fileUnlock:type_name -> request.FileUnlock
	37,  // 71: request.Request.getChunk:type_name -> request.GetChunk
	38,  // 72: request.Request.startWrite:type_name -> request.StartWrite
	39,  // 73: request.Request.putChunk:type_name -> request.PutChunk
	41,  // 74: request.Request.finalizeWrite:type_name -> request.FinalizeWrite
	42,  // 75: request.Request.listFiles:type_name -> request.ListFiles
	45,  // 76: request.Request.remove:type_name -> request.Remove
	54,  // 77: request.Request.getFolder:type_name -> request.GetFolder
	57,  // 78: request.Request.createFolder:type_name -> request.CreateFolder
	59,  // 79: request.Request.CreateSnapshot:type_name -> request.CreateSnapshot
	26,  // 80: request.Request.VerifyPayment:type_name -> request.VerifyPayment
	60,  // 81: request.Request.getSecret:type_name -> request.GetSecret
	61,  // 82: request.Request.addSecret:type_name -> request.AddSecret
	62,  // 83: request.Request.deleteSecret:type_name -> request.DeleteSecret
	64,  // 84: request.Request.updateSecret:type_name -> request.UpdateSecret
	65,  // 85: request.Request.listSecrets:type_name -> request.ListSecrets
	66,  // 86: request.Request.quickListSecrets:type_name -> request.QuickListSecrets
	67,  // 87: request.Request.listSecretSubkeys:type_name -> request.ListSecretSubkeys
	68,  // 88: request.Request.undeleteSecret:type_name -> request.UndeleteSecret
	63,  // 89: request.Request.destroySecret:type_name -> request.DestroySecret
	85,  // 90: request.Request.addRole:type_name -> request.AddRole
	86,  // 91: request.Request.removeRole:type_name -> request.RemoveRole
	87,  // 92: request.Request.updateRole:type_name -> request.UpdateRole
	88,  // 93: request.Request.listRoles:type_name -> request.ListRoles
	89,  // 94: request.Request.getRole:type_name -> request.GetRole
	91,  // 95: request.Request.addTeam:type_name -> request.AddTeam
	92,  // 96: request.Request.removeTeam:type_name -> request.RemoveTeam
	93,  // 97: request.Request.updateTeam:type_name -> request.UpdateTeam
	94,  // 98: request.Request.listTeams:type_name -> request.ListTeams
	95,  // 99: request.Request.getTeam:type_name -> request.GetTeam
	96,  // 100: request.Request.isOperationAllowed:type_name -> request.IsOperationAllowed
	49,  // 101: request.Request.moveFile:type_name -> request.MoveFile
	50,  // 102: request.Request.moveFolder:type_name -> request.MoveFolder
	48,  // 103: request.Request.copyFile:type_name -> request.CopyFile
	47,  // 104: request.Request.copyFolder:type_name -> request.CopyFolder
	97,  // 105: request.Request.restoreVersion:type_name -> request.RestoreVersion
	98,  // 106: request.Request.removeFile:type_name -> request.RemoveFile
	99,  // 107: request.Request.removeFolder:type_name -> request.RemoveFolder
	100, // 108: request.Request.untrashFile:type_name -> request.UntrashFile
	101, // 109: request.Request.untrashFolder:type_name -> request.UntrashFolder
	102, // 110: request.Request.undoStartWrite:type_name -> request.UndoStartWrite
	103, // 111: request.Request.detachClonedFolder:type_name -> request.DetachClonedFolder
	43,  // 112: request.Request.getMetaFromPath:type_name -> request.GetMetaFromPath
	104, // 113: request.Request.renameFile:type_name -> request.RenameFile
	105, // 114: request.Request.renameFolder:type_name -> request.RenameFolder
	107, // 115: request.Request.list:type_name -> request.List
	109, // 116: request.Request.auditLogMessage:type_name -> request.AuditLogMessage
	40,  // 117: request.Request.resetVersion:type_name -> request.ResetVersion
	117, // 118: request.Request.setUser:type_name -> request.SetUser
	118, // 119: request.Request.finalizeProfileWrite:type_name -> request.FinalizeProfileWrite
	44,  // 120: request.Request.getProfileFileMeta:type_name -> request.GetProfileFileMeta
	108, // 121: request.Request.profileChunkList:type_name -> request.ProfileChunkList
	119, // 122: request.Request.getUserType:type_name -> request.GetUserType
	80,  // 123: request.Request.getRandomBytes:type_name -> request.GetRandomBytes
	122, // 124: request.Request.share:type_name -> request.Share
	123, // 125: request.Request.unshare:type_name -> request.Unshare
	124, // 126: request.Request.updateShare:type_name -> request.UpdateShare
	125, // 127: request.Request.listShares:type_name -> request.ListShares
	23,  // 128: request.Request.resetTOTP:type_name -> request.ResetTOTP
	81,  // 129: request.Request.setRolesTeamsToUser:type_name -> request.SetRolesTeamsToUser
	13,  // 130: request.Request.updatePinOps:type_name -> request.UpdatePinOps
	14,  // 131: request.Request.deletePin:type_name -> request.DeletePin
	126, // 132: request.Request.getRolesAndTeamsOfUser:type_name -> request.GetRolesAndTeamsOfUser
	128, // 133: request.Request.restartPutChunk:type_name -> request.RestartPutChunk
	110, // 134: request.Request.verifyAuditLogMeta:type_name -> request.VerifyAuditLogMeta
	112, // 135: request.Request.getAuditLog:type_name -> request.GetAuditLog
	113, // 136: request.Request.deleteAuditLog:type_name -> request.DeleteAuditLog
	111, // 137: request.Request.getLedgerRange:type_name -> request.GetLedgerRange
	106, // 138: request.Request.listPins:type_name -> request.ListPins
	129, // 139: request.Request.getMetaFromSharedPath:type_name -> request.GetMetaFromSharedPath
	140, // [140:140] is the sub-list for method output_type
	140, // [140:140] is the sub-list for method input_type
	140, // [140:140] is the sub-list for extension type_name
	140, // [140:140] is the sub-list for extension extendee
	0,   // [0:140] is the sub-list for field type_name
}

func init() { file_request_proto_init() }
func file_request_proto_init() {
	if File_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePinOps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetTOTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiatePayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetaFromPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileFileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Remove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Copy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Folder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyFromName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroySecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickListSecrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretSubkeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndeleteSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Password); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRandomBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRolesTeamsToUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinObjectInDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOperationAllowed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UntrashFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UntrashFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoStartWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachClonedFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileChunkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAuditLogMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLedgerRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeProfileWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unshare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRolesAndTeamsOfUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartPutChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetaFromSharedPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_request_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*Key_Random)(nil),
		(*Key_Alphanumeric)(nil),
	}
	file_request_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*SecretData_Password)(nil),
		(*SecretData_Card)(nil),
		(*SecretData_Note)(nil),
		(*SecretData_Identity)(nil),
		(*SecretData_KeyValue)(nil),
		(*SecretData_Key)(nil),
		(*SecretData_Certificate)(nil),
		(*SecretData_Privatekey)(nil),
	}
	file_request_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[95].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[97].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[105].OneofWrappers = []interface{}{
		(*UserProfileMeta_UserObj)(nil),
		(*UserProfileMeta_OrganizationObj)(nil),
	}
	file_request_proto_msgTypes[116].OneofWrappers = []interface{}{}
	file_request_proto_msgTypes[119].OneofWrappers = []interface{}{
		(*Request_AddUser)(nil),
		(*Request_RemoveUser)(nil),
		(*Request_PasswordReset)(nil),
		(*Request_ChangePassword)(nil),
		(*Request_AddOrganization)(nil),
		(*Request_InitiatePayment)(nil),
		(*Request_SignIn)(nil),
		(*Request_SignOut)(nil),
		(*Request_InviteUser)(nil),
		(*Request_GetUser)(nil),
		(*Request_ListUsers)(nil),
		(*Request_RemoveOrganization)(nil),
		(*Request_VerifyOrganization)(nil),
		(*Request_GetOrganization)(nil),
		(*Request_AddPin)(nil),
		(*Request_VerifyUser)(nil),
		(*Request_GetFileHead)(nil),
		(*Request_Echo)(nil),
		(*Request_FileLock)(nil),
		(*Request_FileUnlock)(nil),
		(*Request_GetChunk)(nil),
		(*Request_StartWrite)(nil),
		(*Request_PutChunk)(nil),
		(*Request_FinalizeWrite)(nil),
		(*Request_ListFiles)(nil),
		(*Request_Remove)(nil),
		(*Request_GetFolder)(nil),
		(*Request_CreateFolder)(nil),
		(*Request_CreateSnapshot)(nil),
		(*Request_VerifyPayment)(nil),
		(*Request_GetSecret)(nil),
		(*Request_AddSecret)(nil),
		(*Request_DeleteSecret)(nil),
		(*Request_UpdateSecret)(nil),
		(*Request_ListSecrets)(nil),
		(*Request_QuickListSecrets)(nil),
		(*Request_ListSecretSubkeys)(nil),
		(*Request_UndeleteSecret)(nil),
		(*Request_DestroySecret)(nil),
		(*Request_AddRole)(nil),
		(*Request_RemoveRole)(nil),
		(*Request_UpdateRole)(nil),
		(*Request_ListRoles)(nil),
		(*Request_GetRole)(nil),
		(*Request_AddTeam)(nil),
		(*Request_RemoveTeam)(nil),
		(*Request_UpdateTeam)(nil),
		(*Request_ListTeams)(nil),
		(*Request_GetTeam)(nil),
		(*Request_IsOperationAllowed)(nil),
		(*Request_MoveFile)(nil),
		(*Request_MoveFolder)(nil),
		(*Request_CopyFile)(nil),
		(*Request_CopyFolder)(nil),
		(*Request_RestoreVersion)(nil),
		(*Request_RemoveFile)(nil),
		(*Request_RemoveFolder)(nil),
		(*Request_UntrashFile)(nil),
		(*Request_UntrashFolder)(nil),
		(*Request_UndoStartWrite)(nil),
		(*Request_DetachClonedFolder)(nil),
		(*Request_GetMetaFromPath)(nil),
		(*Request_RenameFile)(nil),
		(*Request_RenameFolder)(nil),
		(*Request_List)(nil),
		(*Request_AuditLogMessage)(nil),
		(*Request_ResetVersion)(nil),
		(*Request_SetUser)(nil),
		(*Request_FinalizeProfileWrite)(nil),
		(*Request_GetProfileFileMeta)(nil),
		(*Request_ProfileChunkList)(nil),
		(*Request_GetUserType)(nil),
		(*Request_GetRandomBytes)(nil),
		(*Request_Share)(nil),
		(*Request_Unshare)(nil),
		(*Request_UpdateShare)(nil),
		(*Request_ListShares)(nil),
		(*Request_ResetTOTP)(nil),
		(*Request_SetRolesTeamsToUser)(nil),
		(*Request_UpdatePinOps)(nil),
		(*Request_DeletePin)(nil),
		(*Request_GetRolesAndTeamsOfUser)(nil),
		(*Request_RestartPutChunk)(nil),
		(*Request_VerifyAuditLogMeta)(nil),
		(*Request_GetAuditLog)(nil),
		(*Request_DeleteAuditLog)(nil),
		(*Request_GetLedgerRange)(nil),
		(*Request_ListPins)(nil),
		(*Request_GetMetaFromSharedPath)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_request_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   120,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_request_proto_goTypes,
		DependencyIndexes: file_request_proto_depIdxs,
		EnumInfos:         file_request_proto_enumTypes,
		MessageInfos:      file_request_proto_msgTypes,
	}.Build()
	File_request_proto = out.File
	file_request_proto_rawDesc = nil
	file_request_proto_goTypes = nil
	file_request_proto_depIdxs = nil
}
